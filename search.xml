<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python3模块和包的用法(十五)</title>
      <link href="/posts/901bbff3/"/>
      <url>/posts/901bbff3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="一个完整的项目"><a href="#一个完整的项目" class="headerlink" title="一个完整的项目"></a>一个完整的项目</h1><ul><li>项目 &gt; 包 &gt; 模块 &gt; 类 / 全局方法 / 全局变量</li></ul><h1 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h1><ul><li><p>包的结构如下：</p><ul><li><code>article</code>包<ul><li><code>__init__.py</code>文件</li><li><code>modules</code>模块</li><li><code>new_modules</code>模块</li></ul></li></ul></li><li><p>特点：</p><ol><li>模块就是一个<code>py</code>文件</li><li>包就是一个包含<code>py</code>文件的文件夹（文件夹中必须要有<code>__init__.py</code>文件）</li></ol></li><li><p>模块示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模块的名称为：modules.py</span></span><br><span class="line"><span class="comment"># 限制模块中的属性</span></span><br><span class="line">__all__ = [<span class="string">'Article'</span>, <span class="string">'a'</span>]  <span class="comment"># 只能访问和使用这两个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>:</span>  <span class="comment"># article：文章</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, author)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.author = author</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'发表文章：&#123;&#125;  作者：&#123;&#125;'</span>.format(self.name, self.author)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   定义全局方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span><span class="params">(name, author)</span>:</span></span><br><span class="line">    <span class="comment"># print('发表文章：&#123;&#125;  作者：&#123;&#125;'.format(name,author))</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'发表文章：&#123;&#125;  作者：&#123;&#125;'</span>.format(name, author)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义全局变量</span></span><br><span class="line">a = <span class="string">'全局变量'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 调用类中的普通方法，并输出方法的返回值</span></span><br><span class="line">    print(Article(<span class="string">'张三的自我修养'</span>, <span class="string">'张三'</span>).show())</span><br><span class="line">    <span class="comment"># 调用函数，并输出返回值</span></span><br><span class="line">    print(article(<span class="string">'李四的自我修养'</span>, <span class="string">'李四'</span>))</span><br><span class="line">    <span class="comment"># 输出全局变量</span></span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure></li></ul><h1 id="模块的导入与使用"><a href="#模块的导入与使用" class="headerlink" title="模块的导入与使用"></a>模块的导入与使用</h1><ol><li><p><code>import + 模块名</code> / <code>模块名.变量</code> / <code>模块名.函数</code> / <code>模块名.类</code></p></li><li><p><code>from 模块名 import 变量</code> / <code>函数</code> / <code>类</code></p></li><li><p><code>from 模块名 import *</code> （<code>*</code>代表访问所有或部分）</p><ul><li>若模块中没有定义限制访问的内容，则<code>*</code>代表可访问模块的全部内容</li><li>在模块中定义限制访问的内容，形如<code>__all__ = [&#39;变量名&#39;, &#39;函数名&#39;, &#39;类名&#39;]</code>，列表中存放的是可访问的内容</li></ul></li><li><p>注意事项：</p><ul><li>无论是<code>import</code>还是<code>from</code>的形式，都会将模块进行加载</li><li>若模块自身存在调用输出，导入模块时又不想自动调用，可使用<code>if __name__ == &#39;__main__&#39;:</code>进行阻拦</li><li><code>if __name__ == &#39;__main__&#39;:</code>在<code>pycharm</code>中的快捷输入法，直接输入<code>main</code>，在<strong>回车</strong>或者<strong>tab键</strong></li></ul></li><li><p>模块的使用：</p><ul><li><p>若只导入了整个模块，没有导入模块中的内容，使用时必须用<code>模块名 + 属性名</code>，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本文的前提条件：modules.py与当前文件在同一目录下</span></span><br><span class="line"><span class="comment"># 导入整个模块（包含所有属性）</span></span><br><span class="line"><span class="keyword">import</span> modules</span><br><span class="line"><span class="comment"># 通过模块，间接的使用模块中的属性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(modules.Article(<span class="string">'张三的自我修养'</span>, <span class="string">'张三'</span>).show())</span><br><span class="line">    print(modules.article(<span class="string">'李四的自我修养'</span>, <span class="string">'李四'</span>))</span><br><span class="line">    print(modules.a)</span><br></pre></td></tr></table></figure></li><li><p>若分别导入了模块中的属性，就不需要再导入整个模块了，使用时，正常调用即可，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本文的前提条件：modules.py与当前文件在同一目录下</span></span><br><span class="line"><span class="comment"># 导入模块中个各个属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入模块中的类</span></span><br><span class="line"><span class="keyword">from</span> modules <span class="keyword">import</span> Article</span><br><span class="line"><span class="comment"># 导入模块中的全局函数</span></span><br><span class="line"><span class="keyword">from</span> modules <span class="keyword">import</span> article</span><br><span class="line"><span class="comment"># 导入模块中的全局变量</span></span><br><span class="line"><span class="keyword">from</span> modules <span class="keyword">import</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接使用模块中的属性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 调用类中的普通方法，并输出该方法的返回值</span></span><br><span class="line">    print(Article(<span class="string">'张三的自我修养'</span>, <span class="string">'张三'</span>).show())</span><br><span class="line">    <span class="comment"># 调用函数，并输出返回值</span></span><br><span class="line">    print(article(<span class="string">'李四的自我修养'</span>, <span class="string">'李四'</span>))</span><br><span class="line">    <span class="comment"># 输出全局变量</span></span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure></li><li><p>若模块导入了指定的属性，只能使用指定的属性，未包含的属性无法使用</p><ul><li><p>注意事项：只能用<code>__all__</code> 来限制访问的属性，并且这个属性是定义在模块中的</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本文的前提条件：modules.py与当前文件在同一目录下</span></span><br><span class="line"><span class="comment"># 导入指定的模块中的属性</span></span><br><span class="line"><span class="keyword">from</span> modules <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(Article(<span class="string">'王五的学习笔记'</span>, <span class="string">'王五'</span>).show())</span><br><span class="line">    <span class="comment"># print(article('王五的学习笔记', '王五'))  # 因为__all__里面不存在 article 属性，所以，无法使用</span></span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h1 id="模块的循环导入"><a href="#模块的循环导入" class="headerlink" title="模块的循环导入"></a>模块的循环导入</h1><ol><li><p>注意事项：</p><ul><li>在一个项目中，尽可能的不要使用循环导入，而且每个模块中的调用或输出语句，应该都放置在<code>__main__</code>中</li><li>若非要循环导入，那么模块中导入的语句，必须要放置一个属性中，比如放在函数中</li></ul></li><li><p>模块1示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> 导入模块<span class="number">2</span> <span class="keyword">import</span> func02</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func01</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'func01()'</span>)</span><br><span class="line">    func02()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task01</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'task01()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:  <span class="comment"># 只允许自己使用</span></span><br><span class="line">    task01()</span><br><span class="line">    func01()</span><br></pre></td></tr></table></figure></li><li><p>模块2示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func02</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'func02()'</span>)</span><br><span class="line">    <span class="keyword">from</span> 导入模块<span class="number">1</span> <span class="keyword">import</span> task01, func01  <span class="comment"># 导入模块中的task01和fun01属性</span></span><br><span class="line">    task01()</span><br><span class="line">    func01()</span><br></pre></td></tr></table></figure></li></ol><h1 id="包的导入与使用"><a href="#包的导入与使用" class="headerlink" title="包的导入与使用"></a>包的导入与使用</h1><ol><li><p>注意事项：只要两个包在同一目录下，是可以跨包导入的</p></li><li><p>导入包中的指定模块（包括所有属性）：<code>from 包名 import 模块名</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前提条件：article包必须和当前文件在同一目录下（包中必须存在__init__.py文件）</span></span><br><span class="line"><span class="comment"># 导入包中的指定模块（包括所有属性）</span></span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> modules</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 使用类属性</span></span><br><span class="line">    print(modules.Article(<span class="string">'张三的学习笔记'</span>, <span class="string">'张三'</span>).show())</span><br><span class="line">    <span class="comment"># 使用全局方法属性</span></span><br><span class="line">    print(modules.article(<span class="string">'李四的自我修养'</span>, <span class="string">'李四'</span>))</span><br><span class="line">    <span class="comment"># 使用全局变量属性</span></span><br><span class="line">    print(modules.a)</span><br></pre></td></tr></table></figure></li><li><p>导入包中的模块中的属性：<code>from 包名.模块名 import 模块中的属性名</code>（类名 / 全局函数名 / 全局变量名）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 前提条件：article包必须和当前文件在同一目录下（包中必须存在__init__.py文件）</span></span><br><span class="line"><span class="comment"># 导入包中的模块中的类属性</span></span><br><span class="line"><span class="keyword">from</span> article.modules <span class="keyword">import</span> Article</span><br><span class="line"><span class="comment"># 导入包中的模块中的全局方法属性</span></span><br><span class="line"><span class="keyword">from</span> article.modules <span class="keyword">import</span> article</span><br><span class="line"><span class="comment"># 导入包中的模块中的全局变量属性</span></span><br><span class="line"><span class="keyword">from</span> article.modules <span class="keyword">import</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(Article(<span class="string">'张三的学习笔记'</span>, <span class="string">'张三'</span>).show())</span><br><span class="line">    print(article(<span class="string">'李四的学习笔记'</span>, <span class="string">'李四'</span>))</span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure></li><li><p>导入包中的模块中的指定属性：<code>from 包名.模块名 import *</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入包中的模块中的指定属性</span></span><br><span class="line"><span class="keyword">from</span> article.modules <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(Article(<span class="string">'张三的学习笔记'</span>, <span class="string">'张三'</span>).show())</span><br><span class="line">    <span class="comment"># print(article('李四的学习笔记', '李四'))  # 因为__all__里面不存在 article 属性，所以，无法使用</span></span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure></li></ol><h1 id="包中的初始化文件的用法"><a href="#包中的初始化文件的用法" class="headerlink" title="包中的初始化文件的用法"></a>包中的初始化文件的用法</h1><ol><li><p>初始化文件：<code>__init__.py</code>（只要是<code>python</code>的包，此文件必须有，否则就不叫包）</p></li><li><p>若在此文件中定义全局变量、全局函数、类，在导入包时，会将这些属性也一并导入（因为导入包会加载此文件）</p></li><li><p>在此文件中，也可以定义<code>__all__</code>全局变量，用来设置包中可使用的模块</p></li><li><p><code>__init__.py</code>文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义可访问模块</span></span><br><span class="line">__all__ = [<span class="string">'new_modules'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Run</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;今年&#123;&#125;岁！正在跑步中......'</span>.format(self.name, self.age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全局函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(name)</span>:</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;正在吃饭中......'</span>.format(name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建全局变量</span></span><br><span class="line">a = <span class="string">'article---&gt;__init__'</span></span><br></pre></td></tr></table></figure></li><li><p><code>new_modules.py</code>文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">students</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'这是new_modules模块中的students()函数！'</span>)</span><br></pre></td></tr></table></figure></li><li><p>直接导入包并使用：<code>import 包名</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接导入包</span></span><br><span class="line"><span class="keyword">import</span> article</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只可以使用__init__.py文件中的属性，无法使用其他包中的属性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 使用初始化文件中的类属性</span></span><br><span class="line">    article.Run(<span class="string">'小明'</span>, <span class="number">88</span>).show()  <span class="comment"># 类中的普通方法时打印值，可以直接调用</span></span><br><span class="line">    <span class="comment"># 使用初始化文件中的全局函数属性</span></span><br><span class="line">    print(article.eat(<span class="string">'张三'</span>))  <span class="comment"># 全局函数中有返回值，所以用print输出</span></span><br><span class="line">    <span class="comment"># 使用初始化方法中的全局变量属性</span></span><br><span class="line">    print(article.b)</span><br></pre></td></tr></table></figure></li><li><p>导入包中的指定模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接导入包</span></span><br><span class="line"><span class="keyword">from</span> article <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只能使用__all__中指定的模块，不能使用__init__.py文件中的属性</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># 使用包中的指定模块</span></span><br><span class="line">    new_modules.students()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3类的用法(十四)</title>
      <link href="/posts/a9edf108/"/>
      <url>/posts/a9edf108/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h1><ol><li><p>类的作用：用来描述具有相同的属性和方法的对象的集合，它定义了该集合中每个对象所共有的属性和方法，对象是类的实例</p></li><li><p>类：面向对象（OOP）</p></li><li><p>命名规则：类名必须为：首字母大写；若类名由多个单词组成，必须使用驼峰式命名法，如：ValueError</p></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个简单的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span>  <span class="comment"># 在python中(object)可以省略</span></span><br><span class="line">    name = <span class="string">'张三'</span></span><br><span class="line">    age = <span class="number">88</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接输出类中的属性值</span></span><br><span class="line">print(Person.name)</span><br><span class="line">print(Person.age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改类中的属性值</span></span><br><span class="line">Person.name = <span class="string">'李四'</span></span><br><span class="line">print(Person.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用类，并将类存储在变量中</span></span><br><span class="line">a = Person()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出类中的属性值</span></span><br><span class="line">print(a.name)</span><br><span class="line">print(a.age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改类中的属性</span></span><br><span class="line">a.age = <span class="number">66</span></span><br><span class="line">print(a.age)</span><br></pre></td></tr></table></figure></li></ol><h1 id="类中的方法"><a href="#类中的方法" class="headerlink" title="类中的方法"></a>类中的方法</h1><ol><li>类中的方法：就是在类中的动作</li><li>种类：普通方法、类方法、静态方法、魔术方法</li></ol><h2 id="初始化方法与普通方法"><a href="#初始化方法与普通方法" class="headerlink" title="初始化方法与普通方法"></a>初始化方法与普通方法</h2><ol><li><p>作用：在类实例化时，会自动调用，属于类中的共有属性，也叫做构造方法</p></li><li><p>注意事项：</p><ul><li>类的方法与普通的函数只有一个特别的区别，它们必须有一个额外的<strong>第一个参数名称</strong>，按照惯例它的名称是<code>self</code></li><li><code>self</code> 代表的是类的实例，代表当前对象的地址，而 <code>self.class</code> 则指向类</li><li><code>self</code> 不是 <code>python</code> 关键字，我们把他换成 <code>arg</code> 也是可以正常执行的</li></ul></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  <span class="comment"># 定义初始化方法</span></span><br><span class="line">        <span class="comment"># 定义类中的初始化属性（共有属性）</span></span><br><span class="line">        self.name = <span class="string">'张三'</span></span><br><span class="line">        self.age = <span class="number">88</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span>  <span class="comment"># 定义普通方法</span></span><br><span class="line">        <span class="comment"># 在普通方法中使用初始化属性</span></span><br><span class="line">        print(self.name)</span><br><span class="line">        print(self.age)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先调用类，在调用类中的普通方法</span></span><br><span class="line">Person().test()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先调用类，并赋值，再调用类中的普通方法</span></span><br><span class="line">a = Person()</span><br><span class="line">a.test()</span><br></pre></td></tr></table></figure></li><li><p>初始化方法中的参数</p><ul><li><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化方法中的参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.x = name</span><br><span class="line">        self.y = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.x)</span><br><span class="line">        print(self.y)</span><br><span class="line"></span><br><span class="line">Person(<span class="string">'张三'</span>, <span class="number">66</span>).test()</span><br><span class="line"></span><br><span class="line">a = Person(<span class="string">'王五'</span>, <span class="number">99</span>)</span><br><span class="line">a.test()</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><ol><li><p>特点：</p><ul><li>类方法只能使用自身的类属性，无法使用<code>__init__(self)</code>及其他属性</li><li>定义类方法，必须使用装饰器<code>@classmethod</code></li><li>类方法中的参数不是一个对象，而是一个类，参数为：<code>cls</code></li><li>类方法不可以使用普通方法</li></ul></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name01 = <span class="string">'王五'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, age)</span>:</span></span><br><span class="line">        self.x = name</span><br><span class="line">        self.y = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.x)</span><br><span class="line">        print(self.y)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(cls, name, food)</span>:</span>  <span class="comment"># 类方法中，可以不加参数</span></span><br><span class="line">        cls.name01 = <span class="string">'李华'</span>  <span class="comment"># 类方法不仅可以使用类中的自由属性，还可以修改</span></span><br><span class="line">        cls.name = name</span><br><span class="line">        cls.food = food</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;cls.name&#125;</span>正在吃<span class="subst">&#123;cls.food&#125;</span>...'</span>)</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;cls.name01&#125;</span>正在吃<span class="subst">&#123;cls.food&#125;</span>...'</span>)  <span class="comment"># 类方法可以使用类中的自由属性</span></span><br><span class="line">        <span class="comment"># print(f'&#123;self.x&#125;正在吃&#123;cls.food&#125;...')  # 错误！不能在类方法中使用初始化方法的属性（默认参数也不同）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类方法可以不用调用类，直接调用方法即可</span></span><br><span class="line">Person.eat(<span class="string">'小王'</span>, <span class="string">'汉堡'</span>)</span><br><span class="line"></span><br><span class="line">b = Person  <span class="comment"># 无需调用类</span></span><br><span class="line">b.eat(<span class="string">'李四'</span>, <span class="string">'香蕉'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以先调用类，再调用类方法</span></span><br><span class="line">a = Person(<span class="string">'小明'</span>, <span class="number">66</span>)  <span class="comment"># 因为初始化方法有两个形参，所以调用类时，也必须加实参</span></span><br><span class="line">a.eat(<span class="string">'张三'</span>, <span class="string">'苹果'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><ol><li><p>特点：</p><ul><li>定义静态方法，必须使用装饰器<code>@staticmethod</code></li><li>静态方法中，无需添加默认参数<code>self, cls</code>，但是在使用类中的自由属性时，必须以<code>类名.属性</code>格式写入</li><li>只能访问类中的自由属性，不能访问对象的属性</li><li>加载时机和类方法相同</li></ul></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">'张三'</span></span><br><span class="line">    age = <span class="number">66</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定义静态方法</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">        Person.age = <span class="number">88</span>  <span class="comment"># 类方法不仅可以使用类中的自由属性，还可以修改</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;Person.name&#125;</span>今年<span class="subst">&#123;Person.age&#125;</span>岁！'</span>)  <span class="comment"># 使用类中的自由属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 静态方法可以不用调用类，直接调用方法即可</span></span><br><span class="line">Person.test()</span><br><span class="line"></span><br><span class="line">a = Person</span><br><span class="line">a.test()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以先调用类，再调用类方法</span></span><br><span class="line">b = Person()</span><br><span class="line">b.test()</span><br></pre></td></tr></table></figure></li></ol><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><ol><li><p>常用的魔术方法</p><ul><li><code>__init__():</code> 初始化魔术方法，触发时机：初始化对象时触发（不是实例化触发，但是和实例化在一个操作中）</li><li><code>__str__():</code> 返回格式化字符串魔术方法，触发时机：打印对象名时触发</li><li><code>__new__():</code> 实例化的魔术方法，触发时机： 在实例化对时触发</li><li><code>__call__():</code> 对象调用方法，触发时机：将对象当成函数使用的时候，会默认调用此函数中的内容</li><li><code>__del__():</code> delete的缩写，析构魔术方法，触发时机：当对象没有用（引用次数为0时）的时候被触发</li></ul></li><li><p>魔术方法的特点：自动调用，无需手动调用</p></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">     self.name = <span class="string">'张三'</span></span><br><span class="line">        self.age = <span class="number">88</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 格式化输出</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>岁！'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分配空间</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">'已执行__new__()'</span>)</span><br><span class="line">        position = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> position</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将对象当作函数调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, age)</span>:</span></span><br><span class="line">        self.name = <span class="string">'李四'</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>今年<span class="subst">&#123;age&#125;</span>岁！'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'缓存清理完毕！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接输出对象</span></span><br><span class="line">print(Person())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将对象当作函数使用</span></span><br><span class="line">a = Person()</span><br><span class="line">a(<span class="number">66</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将对象当作函数使用</span></span><br><span class="line">Person()(<span class="number">55</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------------'</span>)</span><br><span class="line"></span><br><span class="line">Person()(<span class="number">99</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'----------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment"># sys.getrefcount()函数的作用：查看引用次数，在使用此函数时，自身会调用一次，所以会多一次引用次数</span></span><br><span class="line">print(sys.getrefcount(a))</span><br></pre></td></tr></table></figure></li></ol><h1 id="私有化属性"><a href="#私有化属性" class="headerlink" title="私有化属性"></a>私有化属性</h1><ol><li><p>作用：私有化属性后，外界不可以随意访问</p></li><li><p>特点：在Python中，如果一个属性的前面出现两个下划线__,就表示这个属性只能在当前类的方法中被直接访问，不能通过对象直接访问，这个变量就被称为私有变量</p></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__name = <span class="string">'张三'</span></span><br><span class="line">        self.age = <span class="number">88</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 格式化输出默认属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.__name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>岁！'</span>  <span class="comment"># 私有属性，内部可访问</span></span><br><span class="line"></span><br><span class="line">a = Person()</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">a.name = <span class="string">'李四'</span>  <span class="comment"># 无法访问和修改</span></span><br><span class="line">a.__name = <span class="string">'李四'</span>  <span class="comment"># 无法访问和修改</span></span><br><span class="line"></span><br><span class="line">a.age = <span class="number">66</span>  <span class="comment"># 没有私有化的属性，外界不仅可以访问，还可以修改</span></span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ol><h1 id="私有化属性的修改"><a href="#私有化属性的修改" class="headerlink" title="私有化属性的修改"></a>私有化属性的修改</h1><ol><li><p>作用：</p><ul><li>利用装饰器，将私有化属性先返回出来，再重定义（先get再set）</li><li>利用普通函数，先重定义私有化属性，再返回重定义后的属性（先set再get）</li></ul></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__name = <span class="string">'张三'</span></span><br><span class="line">        self.age = <span class="number">88</span></span><br><span class="line">        self.__sex = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 格式化输出默认属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.__name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>岁，是个<span class="subst">&#123;self.__sex&#125;</span>孩纸！'</span>  <span class="comment"># 私有属性，内部可访问</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># get私有化属性</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nickname</span><span class="params">(self, )</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"></span><br><span class="line">    <span class="comment"># set私有化属性</span></span><br><span class="line"><span class="meta">    @nickname.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nickname</span><span class="params">(self, arg)</span>:</span></span><br><span class="line">        self.__name = arg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 先set私有化属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_sex</span><span class="params">(self, arg)</span>:</span></span><br><span class="line">        self.__sex = arg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 再get私有化属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_sex</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__sex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出类中的默认属性值</span></span><br><span class="line">a = Person()</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改类中的初始化属性（未私有化）</span></span><br><span class="line">a.age = <span class="number">66</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改类中的初始化中的私有化属性（装饰器重定义）</span></span><br><span class="line">a.nickname = <span class="string">'李四'</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改类中的初始化中的私有化属性（普通函数重定义）</span></span><br><span class="line">a.set_sex(<span class="string">'女'</span>)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ol><h1 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h1><ol><li><p>作用：子类继承父类，让子类拥有父类的属性，简化代码</p></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">'张三'</span></span><br><span class="line">        self.age = <span class="number">88</span></span><br><span class="line">        self.sex = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>岁了，是个<span class="subst">&#123;self.sex&#125;</span>孩纸！'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子类（需继承父类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doctor</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = Person()</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b = Doctor()</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">c = Student()</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li><li><p>子类中重定义<code>__init__()</code></p><ul><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = <span class="number">88</span></span><br><span class="line">        self.sex = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>岁了，是个<span class="subst">&#123;self.sex&#125;</span>孩纸！'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子类（需继承父类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doctor</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类中重定义初始化属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, salary)</span>:</span></span><br><span class="line">        super().__init__(name)</span><br><span class="line">        self.salary = salary</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 子类中重定义字符串输出（覆盖父类中的属性）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.name&#125;</span>的工资为<span class="subst">&#123;self.salary&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># 子类中重定义初始化属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, classroom)</span>:</span></span><br><span class="line">        Person.__init__(self, name)</span><br><span class="line">        self.classroom = classroom</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>在<span class="subst">&#123;self.classroom&#125;</span>班'</span>)</span><br><span class="line"></span><br><span class="line">a = Person(<span class="string">'张三'</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line">b = Doctor(<span class="string">'李四'</span>, <span class="number">5000</span>)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line">c = Student(<span class="string">'王五'</span>, <span class="number">6</span>)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>子类中的<code>supper()</code>用法</p><ul><li><p>作用：可以通过<code>super()</code>在子类中的内部调用父类中的普通方法</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = <span class="number">88</span></span><br><span class="line">        self.sex = <span class="string">'男'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.name&#125;</span>今年<span class="subst">&#123;self.age&#125;</span>岁了，是个<span class="subst">&#123;self.sex&#125;</span>孩纸！'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>正在吃饭。。。'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建子类（需继承父类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doctor</span><span class="params">(Person)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">food</span><span class="params">(self, food)</span>:</span></span><br><span class="line">        super().eat()  <span class="comment"># 子类在内部调用父类的普通方法</span></span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;self.name&#125;</span>今天吃的是<span class="subst">&#123;food&#125;</span>！'</span>)</span><br><span class="line"></span><br><span class="line">a = Doctor(<span class="string">'张三'</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 子类也可以在外部调用父类的普通方法</span></span><br><span class="line">a.eat()</span><br><span class="line"><span class="comment"># 调用子类中的普通方法</span></span><br><span class="line">a.food(<span class="string">'蛋炒饭'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="父类与子类中的私有化属性"><a href="#父类与子类中的私有化属性" class="headerlink" title="父类与子类中的私有化属性"></a>父类与子类中的私有化属性</h1><ol><li><p>特点：父类和子类中的私有化属性，只能给自己用，无法通过继承使用</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.a = <span class="number">66</span></span><br><span class="line">        self.__b = <span class="number">88</span>  <span class="comment"># 父类中的私有化属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'结果：<span class="subst">&#123;self.a&#125;</span>\t<span class="subst">&#123;self.__b&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span><span class="params">(A1)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>  <span class="comment"># 自定义初始化属性</span></span><br><span class="line">        super().__init__()  <span class="comment"># 继承父类中的初始化属性</span></span><br><span class="line">        self.a = <span class="number">6</span>  <span class="comment"># 修改父类中的普通属性</span></span><br><span class="line">        self.__b = <span class="number">8</span>  <span class="comment"># 子类中的私有化属性</span></span><br><span class="line"></span><br><span class="line">x = B1()  <span class="comment"># 调用子类</span></span><br><span class="line">print(x)  <span class="comment"># 输出子类</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="多继承与顺序搜索"><a href="#多继承与顺序搜索" class="headerlink" title="多继承与顺序搜索"></a>多继承与顺序搜索</h1><ol><li><p>作用：子类可以有多个父类，根据一定的顺序，确定要执行的是那个父类</p></li><li><p>特点：</p><ul><li><code>python3</code>中，搜索顺序为：广度优先</li><li><code>python2</code>中，搜索顺序为：从左到右，深度优先</li></ul></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义第一个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'p1---&gt;foo'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'p1---&gt;bar'</span>)</span><br><span class="line"><span class="comment"># 定义第二个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P2</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'p2---&gt;foo'</span>)</span><br><span class="line"><span class="comment"># 继承两个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C1</span><span class="params">(P1, P2)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 继承两个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C2</span><span class="params">(P1, P2)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'c2---&gt;bar'</span>)</span><br><span class="line"><span class="comment"># 继承两个父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(C1, C2)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   搜索顺序：D--&gt;C1--&gt;C2--&gt;P1--&gt;P2      (广度优先)</span></span><br><span class="line"><span class="comment">#   注意：在python2中，搜索顺序：D--&gt;C1--&gt;P1--&gt;P2--&gt;C2（从左到右，深度优先）</span></span><br><span class="line">d = D()</span><br><span class="line">d.bar()</span><br><span class="line">d.foo()</span><br></pre></td></tr></table></figure></li><li><p>查看搜索顺序的内建函数</p><ul><li><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> inspect</span><br><span class="line"></span><br><span class="line"><span class="comment">#   方法一</span></span><br><span class="line"><span class="comment">#   查看搜索顺序的函数：inspect.getmro()</span></span><br><span class="line">print(inspect.getmro(D))</span><br><span class="line"><span class="comment">#   方法二</span></span><br><span class="line">print(D.__mro__)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h1><ul><li>作用：一个对象可以有多种形态，例如，<strong>猫</strong>既是<strong>动物类</strong>又是<strong>宠物类</strong></li></ul><h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><ul><li><p>作用：使用同一个内存空间，优化内存空间，节省内存空间</p></li><li><p>注意事项：并不是所有的类都要用单例，只有在特殊情况下才用单例</p></li><li><p>使用时机：多个对象需要用同一个地址时，要用单例</p></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="comment"># 私有化属性，单例的地址就存在于__abc中</span></span><br><span class="line">    __abc = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.__abc <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            cls.__abc = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.__abc</span><br><span class="line">        <span class="comment"># else:</span></span><br><span class="line">        <span class="comment">#     return cls.__abc</span></span><br><span class="line"></span><br><span class="line">t1 = Test()</span><br><span class="line">t2 = Test()</span><br><span class="line"></span><br><span class="line">print(t1)</span><br><span class="line">print(t2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   查看类中的所有属性</span></span><br><span class="line">print(t1.__dir__())</span><br><span class="line">print(dir(Test))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3异常处理、推导式、文件操作的用法(十三)</title>
      <link href="/posts/a53dfe16/"/>
      <url>/posts/a53dfe16/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ol><li><p>什么是异常：异常是一个<strong>事件</strong>，该事件会在程序运行中发生，会影响程序的正常执行</p></li><li><p>作用：让程序正常运行（在<code>python</code>脚本运行时，捕获它，并处理）</p></li><li><p>基本语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 写入可能存在异常的代码，尽可能不要使用return</span></span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 存在异常类型1后，要执行的代码，而且try中的代码会终止</span></span><br><span class="line"><span class="keyword">except</span> 异常类型<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 存在异常类型2后，要执行的代码，而且try中的代码会终止</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span>  <span class="comment"># 当try中的代码不存在异常时，先执行完try中的代码，并且try中不能存在return，再执行else中的代码</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">pass</span>  </span><br><span class="line"><span class="comment"># 不管try中的代码有没有异常，都会执行finally中的代码，并覆盖之前相同的值，而且finally必须在程序最后面写，否则报错</span></span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a = int(input(<span class="string">'请输入被除数：'</span>))</span><br><span class="line">    b = int(input(<span class="string">'请输入除数：'</span>))</span><br><span class="line">    result = a / b</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">    print(<span class="string">'除数不能为0'</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">'只能输入数字。'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'代码正常！'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'代码运行完毕！'</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="多个异常处理方式"><a href="#多个异常处理方式" class="headerlink" title="多个异常处理方式"></a>多个异常处理方式</h2><ul><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> error:  <span class="comment"># error可重命名</span></span><br><span class="line">    print(error)</span><br></pre></td></tr></table></figure></li></ul><h2 id="异常中return的用法："><a href="#异常中return的用法：" class="headerlink" title="异常中return的用法："></a>异常中return的用法：</h2><ul><li><p>注意事项：</p><ol><li>若在<code>try</code>中出现<code>return</code>，会终止<code>try</code>中<code>return</code>以下代码的执行</li><li>若存在<code>else</code>分支，在<code>try</code>中就不能使用<code>return</code>了，因为<code>else</code>分支会报错</li><li>若在<code>try</code>中使用<code>return</code>，必须用函数包装起来，否则程序错误</li></ol></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        a = int(input(<span class="string">'请输入被除数：'</span>))</span><br><span class="line">        b = int(input(<span class="string">'请输入除数：'</span>))</span><br><span class="line">        result = a / b</span><br><span class="line">        print(result)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> error:</span><br><span class="line">        print(error)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">finally</span>:  <span class="comment"># 使用了finally，会覆盖return的返回值</span></span><br><span class="line">        print(<span class="string">'代码运行完毕！'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line">print(test())  <span class="comment"># 函数中存在return，调用并输出函数</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="异常中raise的用法"><a href="#异常中raise的用法" class="headerlink" title="异常中raise的用法"></a>异常中raise的用法</h2><ul><li><p>作用：自定义异常</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义一个存在异常的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    username = input(<span class="string">'请输入用户名：'</span>)</span><br><span class="line">    <span class="keyword">if</span> len(username) &lt; <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">'用户名长度必须在6位以上！'</span>)  <span class="comment"># raise抛出异常</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(username)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    register()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    print(<span class="string">'注册失败！'</span>)</span><br><span class="line">    print(err)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'注册成功！'</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="推导式"><a href="#推导式" class="headerlink" title="推导式"></a>推导式</h1><h2 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h2><ol><li><p>语法格式1</p><ul><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str01 = <span class="string">'abcdefg'</span></span><br><span class="line">result = [value <span class="keyword">for</span> value <span class="keyword">in</span> str01]  <span class="comment"># 没有添加限制条件，就遍历所有元素</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>语法格式2：<code>result01 = [结果 for value in iterable if 条件]</code></p><ul><li><p>注意事项：当结果只有一个时，判断条件在后面（先遍历后判断）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找出名字长度小于等于3的名字</span></span><br><span class="line">names = [<span class="string">'tom'</span>, <span class="string">'jack'</span>, <span class="string">'bob'</span>, <span class="string">'lucy'</span>]</span><br><span class="line">result01 = [value <span class="keyword">for</span> value <span class="keyword">in</span> names <span class="keyword">if</span> len(value) &lt;= <span class="number">3</span>]</span><br><span class="line">print(result01)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>语法格式3：<code>result02 = [结果1 if 条件 else 结果2 for value in iterable]</code></p><ul><li><p>注意事项：当结果有两个时，判断条件在前面（先判断后遍历）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断数字，如果为偶数就输出该值，否则就输出该值的平方</span></span><br><span class="line">numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">result02 = [value <span class="keyword">if</span> value % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> value ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> numbers]</span><br><span class="line">print(result02)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="集合推导式"><a href="#集合推导式" class="headerlink" title="集合推导式"></a>集合推导式</h2><ul><li><p>注意事项：集合推导式遵循集合的特性，会去除重复项并且无序输出，其他和列表推导式相同</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历所有元素</span></span><br><span class="line">str01 = <span class="string">'11224567'</span></span><br><span class="line">result01 = &#123;value <span class="keyword">for</span> value <span class="keyword">in</span> str01&#125;</span><br><span class="line">print(result01)</span><br><span class="line"><span class="comment"># 添加判断条件，只有一种结果：if...</span></span><br><span class="line">result02 = &#123;value <span class="keyword">for</span> value <span class="keyword">in</span> str01 <span class="keyword">if</span> value &gt;= <span class="string">'3'</span>&#125;  <span class="comment"># value的值为str类型</span></span><br><span class="line">print(result02)</span><br><span class="line"><span class="comment"># 添加判断条件，有两种结果：if...else...</span></span><br><span class="line">result03 = &#123;value <span class="keyword">if</span> int(value) % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">else</span> int(value) ** <span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> str01&#125;</span><br><span class="line">print(result03)</span><br></pre></td></tr></table></figure></li></ul><h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><ul><li><p>注意事项：遵循字典的所有特性</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历所有元素（键值对）</span></span><br><span class="line">dict01 = &#123;<span class="string">'name'</span>: <span class="string">'张三'</span>, <span class="string">'age'</span>: <span class="number">88</span>, <span class="string">'sex'</span>: <span class="string">'男'</span>&#125;</span><br><span class="line">result01 = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> dict01.items()&#125;</span><br><span class="line">result02 = &#123;key <span class="keyword">for</span> key <span class="keyword">in</span> dict01.keys()&#125;</span><br><span class="line">result03 = &#123;value <span class="keyword">for</span> value <span class="keyword">in</span> dict01.values()&#125;</span><br><span class="line">print(result01)</span><br><span class="line">print(result02)</span><br><span class="line">print(result03)</span><br><span class="line"><span class="comment"># 添加判断条件，只有一种结果：if...</span></span><br><span class="line">dict02 = &#123;<span class="string">'张三'</span>: <span class="number">35</span>, <span class="string">'李四'</span>: <span class="number">59</span>, <span class="string">'王五'</span>: <span class="number">99</span>, <span class="string">'赵六'</span>: <span class="number">66</span>&#125;</span><br><span class="line">result04 = &#123;key <span class="keyword">for</span> key, value <span class="keyword">in</span> dict02.items() <span class="keyword">if</span> value &gt;= <span class="number">60</span>&#125;</span><br><span class="line">print(result04)</span><br><span class="line"><span class="comment"># 添加判断条件，有两种结果：if...else...</span></span><br><span class="line">result05 = &#123;key: value +<span class="number">1</span> <span class="keyword">if</span> value &gt;= <span class="number">60</span> <span class="keyword">else</span> value <span class="keyword">for</span> key, value <span class="keyword">in</span> dict02.items()&#125;</span><br><span class="line">print(result05)</span><br></pre></td></tr></table></figure></li></ul><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><ul><li>系统内置函数：<code>open()</code></li></ul><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><ol><li><p>语法格式：<code>open(&#39;path\file_name&#39;, mode=&#39;rb&#39;)</code></p><ul><li><code>path\file_name</code>：要读取的文件（绝对或相对路径）</li><li><code>mode=&#39;rb&#39;</code>：执行的动作：读取数据（<code>mode</code>可以省略，直接写参数）；<code>b</code>：代表以二进制方式读取（读取文本文件可直接用<code>&#39;r&#39;</code>）</li></ul></li><li><p>文件读取内建函数：</p><ul><li><code>read()</code>：读取文件中的所有数据</li><li><code>readable()</code>：判断文件是否可以读取</li><li><code>readline()</code>：读取文件中的第一行数据；前提条件：之前没有读取记录</li><li><code>readlines()</code>：读取文件中的所有数据，且每隔一行自动换行，并将读取的数据存放在list中；前提条件：之前没有读取记录</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取指定文件（绝对路径也阔以）</span></span><br><span class="line">stream = open(<span class="string">'./test/test.txt'</span>, <span class="string">'r'</span>)  <span class="comment"># mode可以省略不写，读取文本文件，可不用二进制方式，b也可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断文件是否可以读取</span></span><br><span class="line">result = stream.readable()  </span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件中的所有数据（保留数据格式）</span></span><br><span class="line"><span class="comment"># result = stream.read()       </span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件中的一行数据，每执行一次取一行数据，并且每隔一行数据都空一行（前提条件：之前没有读取记录）</span></span><br><span class="line"><span class="comment"># result = stream.readline()</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="comment"># result = stream.readline()  # 第二行数据</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"><span class="comment"># result = stream.readline()  # 第三行数据</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取文件中的所有数据，并将读取的数据存放在list中，每一行数据表示一个元素，并且每行后面添加换行符，最后一行不添加（前提条件：之前没有读取记录）</span></span><br><span class="line">result = stream.readlines()</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭读取通道</span></span><br><span class="line">print(stream.close())</span><br></pre></td></tr></table></figure></li></ol><h2 id="文件写入和追加"><a href="#文件写入和追加" class="headerlink" title="文件写入和追加"></a>文件写入和追加</h2><ol><li><p>语法格式：<code>open(&#39;path\file_name&#39;, mode=&#39;wb&#39;)</code></p></li><li><p>注意事项：</p><ul><li><code>&#39;wb&#39;</code>：文件写入，首次执行，就会刷新原文件的数据（覆盖数据）</li><li><code>&#39;ab&#39;</code>：文件追加，每次执行，不刷新原来的内容，会在原始文件末尾一直追加；执行一次就多一组数据</li></ul></li><li><p>文件写入和追加内建函数：</p><ul><li><code>write(str)</code>：需要传入一个字符串做为参数，否则会报错</li><li><code>writable()</code>：判断指定文件是否可以写入数据（注意函数的拼写）</li><li><code>writelines(iterable)</code>：既可以传入字符串又可以传入一个字符序列，并将该字符序列写入文件</li><li><code>close()</code>：关闭写入通道，释放资源，但是必须在所有程序执行完后添加，否则，后面的程序报错，无法执行</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取指定文件，并指定动作：先清除原始文件中的内容，再写入数据</span></span><br><span class="line">stream = open(<span class="string">'./test/test.py'</span>, <span class="string">'w'</span>)</span><br><span class="line">date01 = [<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>]</span><br><span class="line"><span class="comment"># 判断文件是否可以写入，并返回bool值</span></span><br><span class="line">print(stream.writable())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始写入文件，并返回写入的字符数量</span></span><br><span class="line">print(stream.write(<span class="string">'abcd\n'</span>))</span><br><span class="line"><span class="comment"># print(stream.write(date))  # 报错</span></span><br><span class="line">print(stream.writelines(date01))  <span class="comment"># 正确</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭写入通道</span></span><br><span class="line">print(stream.close())</span><br><span class="line"></span><br><span class="line">print(<span class="string">'-------------------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定文件，并指定动作：直接再原始文件后面追加数据</span></span><br><span class="line">stream = open(<span class="string">'./test/test.py'</span>, <span class="string">'a'</span>)</span><br><span class="line">date02 = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'abc'</span>]</span><br><span class="line"><span class="comment"># 判断文件是否可以写入，并返回bool值</span></span><br><span class="line">print(stream.writable())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始写入文件，并返回写入的字符数量</span></span><br><span class="line">print(stream.write(<span class="string">'\nqqqq\n'</span>))</span><br><span class="line"><span class="comment"># print(stream.write(date))  # 报错</span></span><br><span class="line">print(stream.writelines(date02))  <span class="comment"># 正确</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="应用：文件复制"><a href="#应用：文件复制" class="headerlink" title="应用：文件复制"></a>应用：文件复制</h2><ul><li><p>先读取指定文件，再将读取到的内容，写入指定文件</p></li><li><p>注意事项：<code>with...as...</code>用法</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">r'c:\test\aaa.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> r_stream:  <span class="comment"># 获取图片地址，指定动作：二进制读取</span></span><br><span class="line">    container = r_stream.read()  <span class="comment"># 读取文件中的所有数据并存放于 变量 中</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'./test/bbb.png'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> w_stream:  <span class="comment"># 指定文件写入的路径</span></span><br><span class="line">        w_stream.write(container)  <span class="comment"># 开始执行文件的写入</span></span><br><span class="line">        print(<span class="string">'复制完毕！'</span>)  <span class="comment"># 全部数据写入完成后，输出打印值</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3闭包的用法(十一)</title>
      <link href="/posts/3bf538dd/"/>
      <url>/posts/3bf538dd/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="创建闭包"><a href="#创建闭包" class="headerlink" title="创建闭包"></a>创建闭包</h1><ol><li><p>条件：</p><ul><li>函数中必须有一个内部函数，并且内部函数必须引用外部函数的变量</li><li>外部函数必须要有一个返回值，并且返回值为：内部函数名</li></ul></li><li><p>作用：保存函数的状态信息，使函数的局部变量信息依然可以保存下来</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    c = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func8</span><span class="params">()</span>:</span></span><br><span class="line">        result = (a + b) * c</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func8  <span class="comment"># 返回值为：内部函数名；返回内嵌函数的地址，从而形成闭包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   接收返回值</span></span><br><span class="line">x = func(<span class="number">3</span>, <span class="number">5</span>)  <span class="comment"># 函数内有返回值，就要用变量来接收</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   调用内部函数</span></span><br><span class="line">x()  <span class="comment"># 此时，x=func8</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="闭包之保存参数的状态"><a href="#闭包之保存参数的状态" class="headerlink" title="闭包之保存参数的状态"></a>闭包之保存参数的状态</h1><ol><li><p>说明：闭包后，每次传参都会新建一个地址（id），不会覆盖之前的地址</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    c = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func5</span><span class="params">(n)</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> c</span><br><span class="line">        c += <span class="number">100</span></span><br><span class="line">        result = a + b + c + n</span><br><span class="line">        print(result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func5</span><br><span class="line"></span><br><span class="line"><span class="comment">#   接收返回值(地址)</span></span><br><span class="line">x = func(<span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">y = func(<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line">z = func(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   闭包后，每次传参都会新建一个地址（id），不会覆盖之前的地址</span></span><br><span class="line">print(id(x), x)</span><br><span class="line">print(id(y), y)</span><br><span class="line">print(id(z), z)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   调用内部函数</span></span><br><span class="line">x(<span class="number">100</span>)  <span class="comment"># 因为内部函数存在一个参数，所以必须加参数</span></span><br><span class="line">y(<span class="number">100</span>)</span><br><span class="line">z(<span class="number">100</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="闭包之计数器"><a href="#闭包之计数器" class="headerlink" title="闭包之计数器"></a>闭包之计数器</h1><ul><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span>  <span class="comment"># def &lt;=&gt; defined</span></span><br><span class="line">    list8 = [<span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func8</span><span class="params">()</span>:</span></span><br><span class="line">        list8[<span class="number">0</span>] = list8[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'第&#123;&#125;次！'</span>.format(list8[<span class="number">0</span>]), list8)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func8  <span class="comment"># 闭包返回值：内部函数名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   接收函数的返回值</span></span><br><span class="line">x = func()</span><br><span class="line"></span><br><span class="line"><span class="comment">#   调用内部函数</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        x()</span><br></pre></td></tr></table></figure></li></ul><h1 id="闭包之同级访问"><a href="#闭包之同级访问" class="headerlink" title="闭包之同级访问"></a>闭包之同级访问</h1><ul><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">        b = <span class="number">99</span></span><br><span class="line">        s = a + b</span><br><span class="line">        print(s)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(n)</span>:</span></span><br><span class="line">        func1()  <span class="comment"># 同级访问（调用）</span></span><br><span class="line">        print(<span class="string">'使用成功！'</span>, n)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'成功返回！'</span>, n  <span class="comment"># 内部函数自己的返回值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func2  <span class="comment"># 闭包返回值：内部函数名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   接收闭包返回值</span></span><br><span class="line">x = func()  <span class="comment"># x &lt;=&gt; func2</span></span><br><span class="line">x(<span class="number">1</span>)  <span class="comment"># x &lt;=&gt; func2()</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   输出内部函数自己的返回值</span></span><br><span class="line">y = x(<span class="number">2</span>)</span><br><span class="line">print(y, id(y))</span><br><span class="line"></span><br><span class="line">z = x(<span class="number">3</span>)</span><br><span class="line">print(z, id(z))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3迭代器、生成器、装饰器的用法(十二)</title>
      <link href="/posts/1ebe0c3c/"/>
      <url>/posts/1ebe0c3c/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><ol><li><p>作用：遍历可迭代对象中的元素</p></li><li><p>迭代器的创建与使用</p><ul><li><p>迭代器内建函数：<code>iter.__next__()</code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个可迭代的对象：list</span></span><br><span class="line">list01 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]  <span class="comment"># 共4个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个迭代器，名称为：iter01</span></span><br><span class="line">iter01 = iter(list01)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代器内建函数：__next__()</span></span><br><span class="line">print(iter01.__next__())</span><br><span class="line">print(iter01.__next__())</span><br><span class="line">print(iter01.__next__())</span><br><span class="line"><span class="comment"># print(iter01.__next__())</span></span><br><span class="line"><span class="comment"># print(iter01.__next__())  # 迭代到第5个元素，会报错，因为没元素了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决办法：异常处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(iter01.__next__())</span><br><span class="line">    print(iter01.__next__())  <span class="comment"># 取第5个元素时，不存在，输出异常解决</span></span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    print(<span class="string">'没有更多元素了！'</span>)</span><br></pre></td></tr></table></figure></li><li><p>迭代器与系统内置函数：<code>next()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">list01 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>]  <span class="comment"># 共4个元素</span></span><br><span class="line">iter01 = iter(list01)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统内置函数：next()</span></span><br><span class="line">print(next(iter01))</span><br><span class="line">print(next(iter01))</span><br><span class="line">print(next(iter01))</span><br><span class="line"><span class="comment"># print(next(iter01))</span></span><br><span class="line"><span class="comment"># print(next(iter01))  # 迭代到第5个元素，会报错，因为没元素了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决办法：异常处理</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    print(next(iter01))</span><br><span class="line">    print(next(iter01))  <span class="comment"># 取第5个元素时，不存在，输出异常解决</span></span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    print(<span class="string">'没有更多元素了！'</span>)</span><br></pre></td></tr></table></figure></li><li><p>迭代器与for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个可迭代的对象：list</span></span><br><span class="line">list01 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个迭代器，名称为：iter01</span></span><br><span class="line">iter01 = iter(list01)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环迭代器：不会有异常输出</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> iter01:</span><br><span class="line">    print(value, end=<span class="string">'\t'</span>)</span><br><span class="line">print()  <span class="comment"># 用于换行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环可迭代对象</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> list01:</span><br><span class="line">    print(value, end=<span class="string">'\t'</span>)</span><br><span class="line">print()</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><ol><li><p>作用：</p><ul><li>一个返回迭代器的函数，只能用于迭代操作</li><li>每调用一次生成器函数，就返回一个迭代器对象</li></ul></li><li><p>用推导式创建生成器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建生成器：g</span></span><br><span class="line">g = (x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line"><span class="comment"># 内建函数使用生成器：__next__()</span></span><br><span class="line">print(g.__next__())  <span class="comment"># 超出范围用异常解决</span></span><br><span class="line">print(g.__next__())</span><br><span class="line"><span class="comment"># 系统内置函数使用生成器</span></span><br><span class="line">print(next(g))  </span><br><span class="line">print(next(g))</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:  <span class="comment"># 超出范围用异常解决</span></span><br><span class="line">        print(next(g))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        print(<span class="string">'没有更多元素了！'</span>)</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 跳出死循环</span></span><br><span class="line"><span class="comment"># for循环使用生成器</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> g:</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure></li><li><p>创建生成器函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span>  <span class="comment"># 创建生成器函数</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 此处可添加限定条件</span></span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> n  <span class="comment"># 只要在函数体内存在yield，说明此时的函数不代表函数，而是生成器的一种定义方式</span></span><br><span class="line"></span><br><span class="line">x = func()  <span class="comment"># x为生成器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   使用生成器，用next()或者__next__()</span></span><br><span class="line">print(x.__next__())</span><br><span class="line">print(x.__next__())</span><br><span class="line">print(next(x))</span><br><span class="line">print(next(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环输出生成器</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> x:</span><br><span class="line">    <span class="keyword">if</span> value &lt;= <span class="number">10</span>:  <span class="comment"># 添加限制条件，否则无线循环</span></span><br><span class="line">        print(value, end=<span class="string">'\t'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 不满足条件，直接跳出循环；否则循环一直处于暂停状态</span></span><br><span class="line">print()  <span class="comment"># 换行</span></span><br></pre></td></tr></table></figure></li><li><p>用生成器定义菲波那切数列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   定义菲波那切数列    0,1,1,2,3,5,8,13    规律：后一个数是前两个数的和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(length)</span>:</span></span><br><span class="line">    print(<span class="number">0</span>)</span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; length:</span><br><span class="line">        <span class="keyword">yield</span> b  <span class="comment"># 相当于return b</span></span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'没有更多元素了！'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = func(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#   length定义是多少，就只能调用多少次，否则报错</span></span><br><span class="line">print(next(y))</span><br><span class="line">print(next(y))</span><br><span class="line">print(next(y))</span><br><span class="line">print(next(y))</span><br><span class="line"><span class="comment"># print(next(y))</span></span><br></pre></td></tr></table></figure></li><li><p>生成器函数send()的用法</p><ul><li><p>作用：当执行到<code>yield</code>时，利用<code>send()</code>给<code>yield</code>赋值，进行其他操作</p></li><li><p>注意事项：</p><ol><li>要想使用生成器内建函数：<code>send()</code>，必须先将<code>yield</code>存放在变量中</li><li>在使用send()之前，必须要先用<code>__next__()</code>或<code>next()</code>或<code>send(None)</code>调用一次生成器（因为<code>yield</code>是将函数中的代码拦截到此处，也就是暂停，若先不执行函数，怎么会有暂停操作；暂停后，再利用<code>send()</code>函数赋值，进行其他操作）</li><li>当<code>send(None)</code>参数为<code>None</code>时，会默认开启生成器（即首次调用生成器）</li></ol></li><li><p>示例一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 斐波那契数列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(max)</span>:</span>  <span class="comment"># 创建生成器函数</span></span><br><span class="line">    a, b, num = <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num &lt;= max:</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># 当yield返回多个值时，默认用tuple接收</span></span><br><span class="line">        result = <span class="keyword">yield</span> a, b  <span class="comment"># yield必须有变量接收（关键一步）</span></span><br><span class="line">        print(<span class="string">'插入数据：'</span>, result)</span><br><span class="line"></span><br><span class="line">x = test(<span class="number">5</span>)  <span class="comment"># 创建生成器，并限制生成器调用次数</span></span><br><span class="line">print(x.__next__())  <span class="comment"># 第一次使用生成器</span></span><br><span class="line"><span class="comment"># print(x.__next__())  # 若要用__next__()继续调用，也阔以，但是result为：None</span></span><br><span class="line"><span class="comment"># print(next(x))  # 继续用next()调用，result的值依然为：None</span></span><br><span class="line"><span class="comment"># print(next(x))</span></span><br><span class="line">print(x.send(<span class="number">99</span>))  <span class="comment"># 当使用send()调用时，必须要有一个参数，否则报错</span></span><br><span class="line">print(x.send(<span class="number">66</span>))</span><br><span class="line">print(next(x))</span><br><span class="line">print(x.send(<span class="number">88</span>))</span><br><span class="line"><span class="comment"># print(x.send(22))  # max的最大值为：5，最多只能使用5次生成器</span></span><br></pre></td></tr></table></figure></li><li><p>示例二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(max)</span>:</span></span><br><span class="line">    num = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> num &lt;= max:</span><br><span class="line">        result = <span class="keyword">yield</span> <span class="string">f'第<span class="subst">&#123;num&#125;</span>次使用生成器！'</span></span><br><span class="line">        print(<span class="string">f'遍历次数：<span class="subst">&#123;result&#125;</span>'</span>)</span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, result + <span class="number">1</span>):</span><br><span class="line">            print(<span class="string">f'---&gt;<span class="subst">&#123;value&#125;</span>'</span>)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">y = func(<span class="number">5</span>)  <span class="comment"># 创建生成器，并限制生成器调用次数</span></span><br><span class="line">print(y.send(<span class="literal">None</span>))  <span class="comment"># 首次使用生成器</span></span><br><span class="line">print(y.send(<span class="number">2</span>))</span><br><span class="line">print(y.send(<span class="number">5</span>))</span><br><span class="line">print(y.send(<span class="number">3</span>))</span><br><span class="line">print(y.send(<span class="number">10</span>))</span><br><span class="line"><span class="comment"># print(y.send(5))  # 超过限制</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>生成器的应用</p><ul><li><p>同时执行多任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建第一个任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># print('正在下载第&#123;&#125;首歌曲...'.format(i))</span></span><br><span class="line">        <span class="comment"># yield None</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="string">f'正在下载第<span class="subst">&#123;i&#125;</span>首歌曲...'</span></span><br><span class="line"><span class="comment"># 创建第二个任务</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">        print(<span class="string">'正在看第&#123;&#125;集动漫...'</span>.format(i))</span><br><span class="line">        <span class="keyword">yield</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">x = func1(<span class="number">5</span>)  <span class="comment"># 两个参数必须相同</span></span><br><span class="line">y = func2(<span class="number">5</span>)  <span class="comment"># 参数不同时，以最少的为主</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        print(next(x))  <span class="comment"># 两个中，有其中一个不满足条件，就会直接终止，另一个生成器也会直接终止</span></span><br><span class="line">        next(y)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">'歌曲下载完毕！'</span>)</span><br><span class="line">        print(<span class="string">'动漫完结！'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><ol><li><p>作用：修改其他函数的功能的函数，让代码更加的简洁</p></li><li><p>条件：</p><ul><li>必须要闭包</li><li>内部函数要调用外部函数的参数（即外部函数的参数为函数）</li></ul></li><li><p>普通装饰器的创建及使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">    a = <span class="number">100</span></span><br><span class="line">    print(<span class="string">'wrapper上层测试......'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span>  <span class="comment">#简单的装饰器，内部函数中没有参数</span></span><br><span class="line">        func()</span><br><span class="line">        print(<span class="string">'占地面积为&#123;&#125;平方米！'</span>.format(a))</span><br><span class="line">        print(<span class="string">'铺地板！'</span>)</span><br><span class="line">        print(<span class="string">'装门！'</span>)</span><br><span class="line">    print(<span class="string">'wrapper下层加载完成！'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器</span></span><br><span class="line"><span class="meta">@decorate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">house</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'毛坯房！'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数的调用</span></span><br><span class="line">house()</span><br></pre></td></tr></table></figure></li><li><p>使用装饰器后的加载顺序</p><ul><li>第一步：先加载装饰器的外部函数的内容（不包括内部函数）</li><li>第二步：再加载本体函数中的内容</li><li>第三步：最后加载装饰器的内部函数中的内容</li></ul></li><li><p>万能装饰器</p><ul><li><p>作用：满足函数的所有条件</p></li><li><p>特点：内部函数中必须有参数，并且参数为：万能参数（<code>*args, **kwargs</code>）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   定义装饰器</span></span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 引入时间函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*a, **kwargs)</span>:</span>  <span class="comment"># 万能装饰器，内部函数中有参数</span></span><br><span class="line">        func(*a, **kwargs)</span><br><span class="line">        print(<span class="string">'校检中......'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)  <span class="comment"># 快捷键：alt + enter</span></span><br><span class="line">        print(<span class="string">'校检完成！'</span>)</span><br><span class="line">        print(<span class="string">'*'</span> * <span class="number">36</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment">#   使用装饰器</span></span><br><span class="line"><span class="meta">@decorate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'---&gt;func'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@decorate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(n)</span>:</span></span><br><span class="line">    print(<span class="string">'---&gt;func1：'</span>, n)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(name,age, sex=<span class="string">'女'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">f'---&gt;func2：姓名：<span class="subst">&#123;name&#125;</span>\t年龄：<span class="subst">&#123;age&#125;</span>\t性别：<span class="subst">&#123;sex&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@decorate</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(students, classes=<span class="number">8</span>)</span>:</span></span><br><span class="line">    print(<span class="string">'幼儿园&#123;&#125;班的同学如下&#123;&#125;：'</span>.format(classes, students))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> students:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   调用函数</span></span><br><span class="line">func()  <span class="comment"># 无参数</span></span><br><span class="line">func1(<span class="number">6</span>)  <span class="comment"># 有一个参数</span></span><br><span class="line">func2(<span class="string">'jack'</span>, <span class="number">8</span>)  <span class="comment"># 有多个参数</span></span><br><span class="line"></span><br><span class="line">list01 = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王五'</span>]</span><br><span class="line">func3(list01, <span class="number">6</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>多层装饰器的使用</p><ul><li><p>特点：</p><ol><li>在使用装饰器时，遵循函数 “就近原则”，即：距离调用函数越近，则优先执行</li><li>在调用输出时，先依次输出外部函数的所有打印值，再依次输出内部函数的所有打印值（即，先执行完所有外部函数，在执行所有内部函数）</li></ol></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   定义装饰器decorate1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate1</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'decorate1正在启动中......'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wraooer</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'正在刷漆中......'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'decorate1运行完毕......'</span>)</span><br><span class="line">    <span class="keyword">return</span> wraooer</span><br><span class="line"></span><br><span class="line"><span class="comment">#   定义装饰器decorate2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate2</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'decorate2正在启动中......'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wraooer</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">        print(<span class="string">'正在铺地板中......'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'decorate2运行完毕......'</span>)</span><br><span class="line">    <span class="keyword">return</span> wraooer</span><br><span class="line"></span><br><span class="line"><span class="comment">#   定义装饰器decorate3</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate3</span><span class="params">(func)</span>:</span></span><br><span class="line">    print(<span class="string">'decorate3正在启动中......'</span>)</span><br><span class="line">    print(<span class="string">'decorate3运行完毕......'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">        print(<span class="string">'装修完毕！'</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用装饰器</span></span><br><span class="line"><span class="meta">@decorate3      #距离函数最远，最后使用此装饰器</span></span><br><span class="line"><span class="meta">@decorate1</span></span><br><span class="line"><span class="meta">@decorate2      #距离函数最近，优先使用此装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">house</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'现在是毛坯房！'</span>)</span><br><span class="line">house()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>带参数的装饰器（三层）</p><ul><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   定义装饰器（带参数）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(n)</span>:</span>   <span class="comment">#第一层：负责接收装饰器的参数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span>     <span class="comment">#第二层：负责接收函数的</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args,**kwargs)</span>:</span>    <span class="comment">#第三层：负责接收函数的参数</span></span><br><span class="line">            func(*args,**kwargs)    <span class="comment">#在内部函数调用外部函数的参数</span></span><br><span class="line">            print(<span class="string">'---&gt;需要铺设地板&#123;&#125;块！'</span>.format(n))</span><br><span class="line">        <span class="keyword">return</span> wrapper      <span class="comment">#负责返回第三层的值</span></span><br><span class="line">    <span class="keyword">return</span> decorate     <span class="comment">#负责返回第二层的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   使用装饰器</span></span><br><span class="line"><span class="meta">@outer(1000)  # 装饰器中有参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">house</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'毛坯房正在装修中......'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   使用装饰器</span></span><br><span class="line"><span class="meta">@outer(9999)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">street</span><span class="params">(time)</span>:</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;的时候，街道要施工！'</span>.format(time))</span><br><span class="line"></span><br><span class="line"><span class="comment">#   调用函数</span></span><br><span class="line">street(<span class="string">'2020-04-04'</span>)</span><br><span class="line">house()</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3系统内置函数的用法(十)</title>
      <link href="/posts/8fa15c00/"/>
      <url>/posts/8fa15c00/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h1><ol><li><p>作用：</p><ul><li>函数用于<strong>过滤</strong>序列，过滤掉不符合条件的元素，返回由符合条件元素组成的<strong>新列表</strong></li><li>接收两个参数，第一个为<strong>函数</strong>，第二个为<strong>序列</strong>，序列的每个元素作为参数传递给函数进行<strong>判断</strong>，然后返回 True 或 False，最后将返回 True 的元素放到<strong>新列表</strong>中</li></ul></li><li><p>注意事项：</p><ul><li><code>filter()</code>中的<code>function</code>代表函数名，不调用函数</li><li><code>filter()</code>返回的是一个<code>object</code>，使用时需要转换为其他类型，如：<code>list</code>、<code>tuple</code></li></ul></li><li><p>语法格式：<code>filter(function, iterable)</code> </p><ul><li><code>function</code>：函数名（判断函数）</li><li><code>iterable</code>：可迭代的对象</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = filter(<span class="keyword">lambda</span> x : x % <span class="number">2</span>==<span class="number">0</span>, range(<span class="number">10</span>))</span><br><span class="line">print(a)  <span class="comment"># 返回一个对象，节省内存</span></span><br><span class="line">print(list(a))  <span class="comment"># 将对象转化为list</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n)</span>:</span>  <span class="comment"># 定义判断函数：test()</span></span><br><span class="line">    <span class="keyword">return</span> n % <span class="number">2</span> ==<span class="number">0</span></span><br><span class="line"></span><br><span class="line">b = filter(test, range(<span class="number">10</span>))</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># print(list(b))</span></span><br><span class="line">print(tuple(b))  <span class="comment"># 将对象转换为tuple，转换后就不能再转换了</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted()函数"></a>sorted()函数</h1><ol><li><p>作用：</p><ul><li><code>sort()</code>是应用在<code>list</code>上的方法，<code>sorted()</code>可以对所有<strong>可迭代</strong>的对象进行<strong>排序</strong>操作</li><li><code>list</code>的 <code>sort()</code>方法返回的是对<strong>已经存在</strong>的列表进行操作，而内建函数<code>sorted()</code>方法返回的是一个<strong>新</strong>的<code>list</code>，而不是在原来的基础上进行的操作。</li></ul></li><li><p>语法格式：<code>sorted(iterable, key=None, reverse=False)</code></p><ul><li><code>iterable</code>：可迭代的对象</li><li><code>key</code>：指定排序的元素属性，按照指定的属性进行排序（默认为None）</li><li><code>reverse</code>：进行反转，排序规则<code>reverse=False</code>（升序，默认，可省略），<code>reverse=True</code>（降序）</li></ul></li><li><p>返回值：返回重新排序的列表</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">0</span>]</span><br><span class="line">b = sorted(a)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">students = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'小明'</span>, <span class="string">'age'</span>: <span class="number">66</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'小王'</span>, <span class="string">'age'</span>: <span class="number">99</span>, <span class="string">'gender'</span>: <span class="string">'男'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'小花'</span>, <span class="string">'age'</span>: <span class="number">88</span>, <span class="string">'gender'</span>: <span class="string">'女'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'薇薇'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'gender'</span>: <span class="string">'女'</span>&#125;</span><br><span class="line">]</span><br><span class="line">a01 = sorted(students, key=<span class="keyword">lambda</span> x : x[<span class="string">'age'</span>], reverse=<span class="literal">True</span>)  <span class="comment"># 按照age倒序排列</span></span><br><span class="line">print(a01)</span><br></pre></td></tr></table></figure></li></ol><h1 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h1><ol><li><p>作用</p><ul><li>会根据提供的函数，对指定序列做映射</li><li>将可<code>iterable</code>的对象的每一个元素，作为<code>function</code>的实参</li></ul></li><li><p>语法格式：<code>map(function, iterable, ...)</code></p><ul><li><code>function</code>：函数</li><li><code>iterable</code>：一个或多个可迭代的序列</li></ul></li><li><p>返回值：返回迭代器</p></li><li><p>示例一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">list01 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">a = map(test, list01)</span><br><span class="line">print(a)</span><br><span class="line">print(list(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line">b = map(<span class="keyword">lambda</span> x: x ** <span class="number">2</span>, list01)</span><br><span class="line">print(b)</span><br><span class="line">print(list(b))</span><br></pre></td></tr></table></figure></li><li><p>示例二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数有多个参数, 但每个参数的序列中的元素数量不一样, 会根据最少元素的序列进行</span></span><br><span class="line">list_x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]  <span class="comment"># 7 个元素</span></span><br><span class="line">list_y = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]  <span class="comment"># 6 个元素</span></span><br><span class="line">list_z = [<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>]  <span class="comment"># 4 个元素</span></span><br><span class="line">list_result = map(<span class="keyword">lambda</span> x, y, z: x ** <span class="number">2</span> + y + z, list_x, list_y, list_z)</span><br><span class="line">print(list(list_result))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 规范名字格式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Names</span><span class="params">(object)</span>:</span></span><br><span class="line">    name_set = &#123;<span class="string">'tony'</span>, <span class="string">'cHarLIE'</span>, <span class="string">'rachAEl'</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">format_name</span><span class="params">(name)</span>:</span></span><br><span class="line">        new_names = name[<span class="number">0</span>:<span class="number">1</span>].upper() + name[<span class="number">1</span>:].lower()</span><br><span class="line">        <span class="keyword">return</span> new_names</span><br><span class="line"></span><br><span class="line">    new_name_set = set(map(format_name, name_set))</span><br><span class="line">    print(new_name_set)</span><br><span class="line"></span><br><span class="line">Names()</span><br></pre></td></tr></table></figure></li></ol><h1 id="enumerate-函数"><a href="#enumerate-函数" class="headerlink" title="enumerate()函数"></a>enumerate()函数</h1><ol><li><p>作用：枚举函数，将一个可遍历的数据对象(如<code>list</code>、<code>tuple</code>或<code>str</code>)组合为一个索引序列，同时列出<code>index</code>和<code>value</code>，一般用在 for 循环当中</p></li><li><p>语法格式：<code>enumerate(iterable, start=0)</code></p><ul><li><code>iterable</code>：可迭代的对象</li><li><code>start</code>：下标起始位置</li></ul></li><li><p>返回值：枚举的对象</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># enumerate()函数的用法</span></span><br><span class="line">seasons = [<span class="string">'Spring'</span>, <span class="string">'Summer'</span>, <span class="string">'Fall'</span>, <span class="string">'Winter'</span>]</span><br><span class="line">a = list(enumerate(seasons, start=<span class="number">1</span>))</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通for循环</span></span><br><span class="line">index = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> seasons:</span><br><span class="line">    print(index, i)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for循环与enumerate()函数联用</span></span><br><span class="line"><span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(seasons, start=<span class="number">1</span>):</span><br><span class="line">    print(index, value)</span><br></pre></td></tr></table></figure></li></ol><h1 id="isinstance-函数"><a href="#isinstance-函数" class="headerlink" title="isinstance()函数"></a>isinstance()函数</h1><ol><li><p>作用：判断一个对象，是否是一个已知的类型</p><ul><li><code>type()</code> 不会认为子类是一种父类类型，<strong>不考虑</strong>继承关系。</li><li><code>isinstance()</code> 会认为子类是一种父类类型，<strong>考虑</strong>继承关系。</li></ul></li><li><p>语法格式：<code>isinstance(object, classinfo)</code></p><ul><li>object：一个实例对象</li><li>classinfo：基本类型（类名）</li></ul></li><li><p>返回值：bool</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">int01 = <span class="number">66</span></span><br><span class="line">print(isinstance(int01, int))</span><br><span class="line">str01 = <span class="string">'88'</span></span><br><span class="line">print(isinstance(str01, str))</span><br><span class="line">list01 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">print(isinstance(list01, list))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">a = isinstance(A(), A)  <span class="comment"># True</span></span><br><span class="line">aa = type(A()) == A     <span class="comment"># True</span></span><br><span class="line">b = isinstance(B(), A)  <span class="comment"># True</span></span><br><span class="line">bb = type(B()) == A     <span class="comment"># False 因为type()不认同继承关系</span></span><br><span class="line">print(a, aa, b, bb)</span><br></pre></td></tr></table></figure></li></ol><h1 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a>range()函数</h1><ol><li><p>作用：范围函数，创建一个整数序列的对象，一般用在for循环中，可用<code>list()</code>、<code>tuple()</code>来转换输出</p></li><li><p>语法格式：<code>range(start, stop, step)</code></p><ul><li><code>start</code>：计数从 <code>start</code> 开始。默认是从 <code>0</code> 开始。例如<code>range(5)</code>等价于<code>range(0, 5)</code></li><li><code>stop</code>：计数到 <code>stop</code> 结束，但不包括 <code>stop</code>，例如：<code>range(0, 5)</code> 是<code>[0, 1, 2, 3, 4]</code>没有<code>5</code></li><li><code>step</code>：步长，默认为<code>1</code>，例如：<code>range(0, 5)</code> 等价于 <code>range(0, 5. 1)</code></li></ul></li><li><p>返回值：整数序列的对象，而不是列表</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = range(<span class="number">10</span>)  <span class="comment"># 从 0 到 10（不包括10）</span></span><br><span class="line">print(list(a))</span><br><span class="line"></span><br><span class="line">b = range(<span class="number">1</span>, <span class="number">10</span>)  <span class="comment"># 从 1 到 10</span></span><br><span class="line">print(tuple(a))</span><br><span class="line"></span><br><span class="line">c = range(<span class="number">0</span>, <span class="number">30</span>, <span class="number">5</span>)  <span class="comment"># 从 0 到 30，步长为5</span></span><br><span class="line">print(list(c))</span><br><span class="line"></span><br><span class="line"><span class="comment"># range()函数与for循环联用</span></span><br><span class="line">d = <span class="string">'range'</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> range(len(d)):</span><br><span class="line">    print(d[index])</span><br></pre></td></tr></table></figure></li></ol><h1 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce()函数"></a>reduce()函数</h1><ol><li><p>作用：利用作为参数的函数，中的 2 个元素，进行各种运算</p></li><li><p>注意事项：<code>from functools import reduce</code> （使用<code>reduce()</code>函数时，必须先引入）</p></li><li><p>语法格式：<code>reduce(function, iterable, initializer)</code></p><ul><li><code>function</code>：函数，有两个参数</li><li><code>iterable</code>：可迭代的对象</li><li><code>initializer</code>：初始参数，可省略</li></ul></li><li><p>返回值：返回函数计算的结果</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="comment"># 定义不同函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">list01 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">result01 = reduce(add, list01, <span class="number">0</span>)  <span class="comment"># 初始参数为 0</span></span><br><span class="line">print(result01) <span class="comment"># 运算过程：0+1+2+3+4+5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 匿名函数</span></span><br><span class="line">result02 = reduce(<span class="keyword">lambda</span> x, y: x + y, list01)  <span class="comment"># 没有初始参数</span></span><br><span class="line">print(result02)  <span class="comment"># 运算过程：1+2+3+4+5</span></span><br><span class="line"></span><br><span class="line">result03 = reduce(<span class="keyword">lambda</span> x, y: x + y,list01, <span class="number">100</span>)  <span class="comment"># 初始参数为100</span></span><br><span class="line">print(result03)  <span class="comment"># 运算过程：100+1+2+3+4+5</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3函数的用法(九)</title>
      <link href="/posts/b6cac916/"/>
      <url>/posts/b6cac916/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h1><ol><li><p>关键词：<code>def</code> </p></li><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">(形参)</span>:</span>  <span class="comment"># 定义函数</span></span><br><span class="line">    函数体  </span><br><span class="line">函数名(实参)  <span class="comment"># 调用函数</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="函数中的不可变参数与可变参数"><a href="#函数中的不可变参数与可变参数" class="headerlink" title="函数中的不可变参数与可变参数"></a>函数中的不可变参数与可变参数</h1><ol><li><p>不可变参数：</p><ul><li><p>占位符：单个或多个有效字符，例如：<code>arg</code>、<code>name</code>等等</p></li><li><p>注意事项：不可变参数，可以有<strong>单个</strong>或<strong>多个</strong>，而且，调用时必须一一对应添加实参</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(arg, age)</span>:</span></span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;arg&#125;</span>今年<span class="subst">&#123;age&#125;</span>岁了！'</span>)</span><br><span class="line">person(<span class="string">'张三'</span>, <span class="number">66</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>可变参数：</p><ul><li><p>占位符：<code>*args</code> （<code>*</code>是标识符，<code>args</code> 是形参）</p></li><li><p>注意事项：</p><ol><li>可变参数，只能有一个<code>*args</code></li><li>在调用时，可以<strong>无</strong>实参或输入<strong>单个</strong>或输入<strong>多个</strong>实参</li><li>输出的类型为<code>tuple</code>型</li></ol></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fruits</span><span class="params">(*fruit)</span>:</span></span><br><span class="line">    print(fruit)</span><br><span class="line">    <span class="keyword">if</span> len(fruit) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> fruit:</span><br><span class="line">            print(<span class="string">f'张三喜欢吃<span class="subst">&#123;i&#125;</span>'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'張三不喜歡吃水果！'</span>)</span><br><span class="line">a = [<span class="string">'苹果6'</span>, <span class="string">'香蕉8'</span>, <span class="string">'西瓜9'</span>]</span><br><span class="line"></span><br><span class="line">fruits(<span class="string">'苹果'</span>, <span class="string">'香蕉'</span>, <span class="string">'西瓜'</span>)  <span class="comment"># 输入多个实参</span></span><br><span class="line">fruits()  <span class="comment"># 无参数</span></span><br><span class="line">fruits(a)  <span class="comment"># 输单个实参，将 a 作为一个整体</span></span><br><span class="line">fruits(*a)  <span class="comment"># 输入多个实参，*代表依次取 a 中的元素</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>不可变参数与可变参数的混合使用</p><ul><li><p>注意事项：必须先写不可变参数，再写可变参数；若存在两个不可变参数，可变参数以第三个参数为开始计算</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fruits</span><span class="params">(name,num, *fruit)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(fruit) &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> fruit:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;name&#125;</span>喜欢吃<span class="subst">&#123;num&#125;</span>个<span class="subst">&#123;i&#125;</span>！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;name&#125;</span>不喜歡吃水果！'</span>)</span><br><span class="line">a = [<span class="string">'苹果1'</span>, <span class="string">'香蕉2'</span>, <span class="string">'西瓜7'</span>]</span><br><span class="line">fruits(<span class="string">'張三'</span>, <span class="number">8</span>, <span class="string">'苹果'</span>, <span class="string">'香蕉'</span>, <span class="string">'西瓜'</span>)</span><br><span class="line">fruits(<span class="string">'張三'</span>, <span class="number">9</span>)</span><br><span class="line">fruits(<span class="string">'張三'</span>, <span class="number">6</span>, a)</span><br><span class="line">fruits(<span class="string">'張三'</span>, <span class="number">3</span>, *a)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="函数中的关键字参数"><a href="#函数中的关键字参数" class="headerlink" title="函数中的关键字参数"></a>函数中的关键字参数</h1><ol><li><p>占位符：<code>**kwargs</code> （<code>**</code>是标识符，<code>kwargs</code> 是形参）</p></li><li><p>注意事项：<code>**kwargs</code>在调用时，必须用<code>key=value</code>的形式，作为实参</p></li><li><p>输出的类型为<code>dict</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person</span><span class="params">(**abc)</span>:</span></span><br><span class="line">    print(abc)</span><br><span class="line">person(name=<span class="string">'李四'</span>, age=<span class="number">88</span>, 性别=<span class="string">'男'</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="默认值参数"><a href="#默认值参数" class="headerlink" title="默认值参数"></a>默认值参数</h1><ul><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add0</span><span class="params">(a, b=<span class="number">10</span>, c=<span class="number">5</span>)</span>:</span></span><br><span class="line">    result0 = a + b + c</span><br><span class="line">    print(result0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># add0()    # 当函数参数都为默认值参数时。可以不用输入值，因为存在默认值</span></span><br><span class="line">add0(<span class="number">5</span>)  <span class="comment"># 当输入1个值时，只对a进行赋值，其余默认；即a=5,b=10,c=5</span></span><br><span class="line">add0(<span class="number">4</span>, <span class="number">5</span>)  <span class="comment"># 当输入2个值时，会覆盖原来的参数的默认值；即a=4,b=5,c=5</span></span><br><span class="line">add0(<span class="number">5</span>, c=<span class="number">10</span>)  <span class="comment"># 要想改变指定默认值参数的值，需写入指定参数并赋值</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="混合参数的用法"><a href="#混合参数的用法" class="headerlink" title="混合参数的用法"></a>混合参数的用法</h1><ul><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(a,b,*c,**kwargs)</span>:</span>      <span class="comment">#*代表：tuple  **代表：dict</span></span><br><span class="line">    print(a,b,c,kwargs)</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,x=<span class="number">666</span>)</span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">'arg'</span>,<span class="number">7</span>,<span class="number">8</span>,aaa=<span class="number">888</span>)</span><br><span class="line"><span class="comment"># test(1,2,x=77,5)  #错误的输出调用，因为和定义的参数顺序有关</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h1><ol><li><p>说明：</p><ul><li>当返回值可以是一个值，输出时需要用变量接收，如：<code>w = add0(2,8)</code></li><li>当返回值为多个时，底层逻辑是，先将返回的多个值放入<code>tuple</code>中，再将<code>tuple</code>作为一个整体输出，如：<code>(13, &#39;admin&#39;, 5)</code></li><li>当接收多个返回值时，可以将返回值的值定义变量输出（有几个值就必须要定义几个变量值），如：<code>x,y,z = add0(2,8)</code></li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add0</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    result = a+b</span><br><span class="line">    print(result)</span><br><span class="line">    <span class="keyword">return</span> result,<span class="string">'admin'</span>,<span class="number">5</span></span><br><span class="line">add0(<span class="number">2</span>,<span class="number">8</span>)</span><br><span class="line">w = add0(<span class="number">5</span>,<span class="number">8</span>)</span><br><span class="line">print(w)</span><br><span class="line"></span><br><span class="line">x,y,z = add0(<span class="number">2</span>,<span class="number">8</span>)</span><br><span class="line">print(x,y,z)</span><br></pre></td></tr></table></figure></li></ol><h1 id="函数之全局变量和局部变量"><a href="#函数之全局变量和局部变量" class="headerlink" title="函数之全局变量和局部变量"></a>函数之全局变量和局部变量</h1><ol><li><p>全局变量：在函数体外定义的变量，可以在函数内和函数体外调用使用</p></li><li><p>局部变量：在函数体内定义的变量，只能在自身定义的函数体内使用</p></li><li><p>定义全局变量和局部变量，示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'小明'</span>  <span class="comment"># 全局变量（不可变类型：str）</span></span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment"># 全局变量（可变类型：list）</span></span><br><span class="line">print(<span class="string">'没有修改的原始数据：'</span>, name)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'func：'</span>,name)  <span class="comment"># 在函数体内使用全局变量</span></span><br><span class="line">func()    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'小王'</span>  <span class="comment"># 定义局部变量（强烈建议，局部变量和全局变量不能重名）</span></span><br><span class="line">    print(<span class="string">'func1：'</span>, name)  <span class="comment"># 打印局部变量，就近原则，因为局部变量最近</span></span><br><span class="line">func1()</span><br><span class="line">    </span><br><span class="line">print(name)  <span class="comment"># 输出全局变量</span></span><br></pre></td></tr></table></figure></li><li><p>修改全局变量与局部变量</p><ul><li><p>注意事项：</p><ol><li>若要在函数体内修改全局变量，必须用<code>global + 变量名</code> 进行声明，修改后，不可变类型的全局变量将被<strong>永久</strong>修改，会影响后续输出</li><li>若变量为<strong>不可变</strong>类型，在函数体内修改，必须使用<code>global</code>声明</li><li>若变量为<strong>可变</strong>类型，在函数体内修改，无需<code>global</code>声明，直接修改即可，如：<code>list</code></li><li>全局变量与局部变量一定不能重名</li></ol></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'小明'</span>  <span class="comment"># 全局变量（不可变类型：str）</span></span><br><span class="line">s = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment"># 全局变量（可变类型：list）</span></span><br><span class="line">print(<span class="string">'原始数据：'</span>, name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> name  <span class="comment"># 声明全局变量 name（不可变类型str）</span></span><br><span class="line">    s = <span class="string">'是程序员！'</span>  <span class="comment"># 修改全局变量 s （可变类型list）</span></span><br><span class="line">    name += s  <span class="comment"># 修改全局变量name</span></span><br><span class="line">    print(name)</span><br><span class="line">func2()</span><br><span class="line">print(<span class="string">'修改后：'</span>, name)  <span class="comment"># 修改后的值</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="内部函数"><a href="#内部函数" class="headerlink" title="内部函数"></a>内部函数</h1><ol><li><p>特点:</p><ul><li>可以访问外部函数的变量</li><li>内部函数可以修改<strong>外部函数</strong>的<strong>可变类型</strong>的变量比如：<code>list</code></li><li>内部函数修改<strong>全局</strong>的<strong>不可变变量</strong>时，需要在内部函数声明<code>global</code> 变量名</li><li>内部函数修改<strong>外部函数</strong>的<strong>不可变</strong>的变量时，需要在<strong>内部函数</strong>中声明: <code>nonlocal</code> 变量名</li><li><code>locals()</code> 查看<strong>本地变量</strong>有哪些，以<strong>字典</strong>的形式输出</li><li><code>globals()</code> 查看<strong>全局变量</strong>有哪些，以<strong>字典</strong>的形式输出（注意里面会有一些<strong>系统</strong>的键值对）</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span>  <span class="comment"># 外部函数</span></span><br><span class="line">    n = <span class="number">100</span>  <span class="comment"># 局部变量</span></span><br><span class="line">    list8 = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]  <span class="comment"># 局部变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span>  <span class="comment"># 内部函数</span></span><br><span class="line">        <span class="keyword">nonlocal</span> n  <span class="comment"># 内部函数声明不可变类型时，用nonlocal + 变量名</span></span><br><span class="line">        <span class="comment"># n += 100</span></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(list8):  <span class="comment"># 枚举函数enumerate()遍历list8</span></span><br><span class="line">            list8[index] = value + n</span><br><span class="line">        list8.sort()</span><br><span class="line">        <span class="comment"># list8.reverse()</span></span><br><span class="line">        n += <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    a()  <span class="comment"># 调用内部函数</span></span><br><span class="line"></span><br><span class="line">    print(list8)</span><br><span class="line">    print(n)  <span class="comment"># 在内部函数中nonlocal声明了变量，并且+100，所以原始数据发生了变化</span></span><br><span class="line"></span><br><span class="line">func()  <span class="comment"># 调用外部函数</span></span><br></pre></td></tr></table></figure></li><li><p>查看所有的全局变量与局部变量（本地变量）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">print(globals())  <span class="comment"># 查看全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    b = <span class="number">99</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func8</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> a</span><br><span class="line">        <span class="keyword">nonlocal</span> b</span><br><span class="line">        c = <span class="number">88</span></span><br><span class="line">        c += <span class="number">100</span></span><br><span class="line">        a += <span class="number">100</span></span><br><span class="line">        b += <span class="number">100</span></span><br><span class="line">        print(<span class="string">'a:'</span>, a, <span class="string">'\n'</span>, <span class="string">'b:'</span>, b, <span class="string">'\n'</span>, <span class="string">'c:'</span>, c, sep=<span class="string">''</span>)</span><br><span class="line">        print(locals())  <span class="comment"># 查看本地变量</span></span><br><span class="line"></span><br><span class="line">    func8()</span><br><span class="line">    print(locals())  <span class="comment"># 查看本地变量</span></span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure></li></ol><h1 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h1><ol><li><p>格式：<code>lambda 参数:返回结果</code></p></li><li><p>关键词：<code>lambda</code></p></li><li><p>作用：简化函数</p></li><li><p>注意事项：</p><ul><li>匿名函数的返回结果只能有一个</li><li>匿名函数必须有一个变量接收或做自身作为一个变量</li><li>匿名函数的结果是一个<strong>返回值</strong>，所以必须有变量接收，否则无法输出</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> a, b: a + b</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">x = a(<span class="number">3</span>, <span class="number">8</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将匿名函数作为一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, func)</span>:</span></span><br><span class="line">    a = x + y</span><br><span class="line">    print(a)</span><br><span class="line">    b = func(x, y)</span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line">add(<span class="number">7</span>, <span class="number">8</span>, <span class="keyword">lambda</span> x, y: x * y)</span><br></pre></td></tr></table></figure></li></ol><h1 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h1><ol><li><p>作用：在自己的函数体内调用自己，起到类似迭代的效果，而且递归求解比迭代求解更简单</p></li><li><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n)</span>:</span></span><br><span class="line">print(n)</span><br><span class="line">test(n)  <span class="comment"># 注意：内部调用时，必须要有条件约束，否则死循环</span></span><br><span class="line">test(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义 斐波那契数列 函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n + test(n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line"><span class="comment"># 外部调用函数</span></span><br><span class="line">x = test(<span class="number">10</span>)  <span class="comment"># 函数的返回值必须用变量来接收</span></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure></li></ol><h1 id="函数之作用域"><a href="#函数之作用域" class="headerlink" title="函数之作用域"></a>函数之作用域</h1><ul><li><p>顺序</p><ol><li>L：<code>local</code>     本地  局部变量</li><li>E：<code>encloseing</code>    嵌套</li><li>G：<code>global</code>    全局变量</li><li>B：<code>built-in</code>    内置的</li></ol></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span>     <span class="comment">#第三步：global</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span>      <span class="comment">#第二步：encloseing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">        a = <span class="number">1</span>       <span class="comment">#第一步：local</span></span><br><span class="line">        print(max([<span class="number">1</span>, <span class="number">2</span>]))  <span class="comment">#最后一步：built-in</span></span><br><span class="line">    func()</span><br><span class="line">outer()</span><br></pre></td></tr></table></figure></li></ul><h1 id="函数的调用与删除"><a href="#函数的调用与删除" class="headerlink" title="函数的调用与删除"></a>函数的调用与删除</h1><ol><li><p>注意事项：</p><ul><li>若函数中存在<strong>返回值</strong>，必须用一个<strong>变量</strong>来接收，或者直接<code>print()</code>函数</li><li>函数可以传递给其他变量，让此变量获得函数的功能</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(msg=<span class="string">'Python'</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hi!\t'</span> + msg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数后，直接输出</span></span><br><span class="line">print(<span class="string">'第一次输出：'</span>, test())</span><br><span class="line"><span class="comment"># 调用函数后，存放于变量中</span></span><br><span class="line">a = test()</span><br><span class="line">print(<span class="string">'第二次输出：'</span>, a)</span><br><span class="line"><span class="comment"># 函数传递功能</span></span><br><span class="line">b = test</span><br><span class="line">print(<span class="string">'第三次输出：'</span>, test())</span><br><span class="line"><span class="comment"># 此时的变量 b 已经具有了test函数的功能</span></span><br><span class="line">print(<span class="string">'第四次输出：'</span>, b())</span><br><span class="line"><span class="comment"># 删除函数</span></span><br><span class="line"><span class="keyword">del</span> test</span><br><span class="line"><span class="comment"># 删除test函数后，就不能再调用test了，否则报错</span></span><br><span class="line"><span class="comment"># print('第五次输出：', test())</span></span><br><span class="line"><span class="comment"># 调用赋值的函数 b()</span></span><br><span class="line">print(<span class="string">'第六次输出：'</span>, b())  <span class="comment"># 此时的 b 属于一个，具有单独功能的函数，和test没有直接关系</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="系统内置函数"><a href="#系统内置函数" class="headerlink" title="系统内置函数"></a>系统内置函数</h1>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3集合的用法(八)</title>
      <link href="/posts/2e7949f6/"/>
      <url>/posts/2e7949f6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="集合的创建"><a href="#集合的创建" class="headerlink" title="集合的创建"></a>集合的创建</h1><ol><li><p>集合的特点：集合中的元素时无序不重复的</p></li><li><p>格式：<code>set01 = {value}</code></p></li><li><p>空集合：<code>set02 = set()</code> （空集合只能用这种方式创建，<code>a={}</code>表示一个<strong>空字典</strong>）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict01 = &#123;&#125;  <span class="comment"># 空字典</span></span><br><span class="line">print(dict01, type(dict01))</span><br><span class="line"></span><br><span class="line">set01 = set()  <span class="comment"># 空集合</span></span><br><span class="line">print(set01, type(set01))</span><br><span class="line"></span><br><span class="line">set02 = &#123;<span class="number">3</span>, <span class="number">6</span>, <span class="string">'1'</span>, <span class="string">'4'</span>, <span class="number">3</span>, <span class="string">'a'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>&#125;</span><br><span class="line">print(set02)</span><br></pre></td></tr></table></figure></li></ol><h1 id="集合添加元素"><a href="#集合添加元素" class="headerlink" title="集合添加元素"></a>集合添加元素</h1><ol><li><p>添加单个元素</p><ul><li><p>内建函数：<code>add()</code></p></li><li><p>格式：<code>set.add(value)</code> </p></li><li><p>注意事项：不管添加的是什么类型的元素，加入后都代表<code>set</code>的其中一个元素</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'小明'</span>,<span class="string">'abc'</span>&#125;</span><br><span class="line">b = (<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>)</span><br><span class="line">a.add(<span class="string">'张三'</span>)</span><br><span class="line">a.add(b)        <span class="comment"># 添加tuple时，直接将tuple作为整体添加，即保留原始type</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加多个元素</p><ul><li><p>内建函数：<code>update()</code></p></li><li><p>格式：<code>set.update(value)</code></p></li><li><p>注意事项：若添加的内容是一个可迭代的类型，会将里面的元素一一取出来添加，即一次添加多个元素</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'小明'</span>,<span class="string">'abc'</span>&#125;</span><br><span class="line">b = (<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>)</span><br><span class="line">a.update(<span class="string">'张三'</span>)</span><br><span class="line">a.update(b)        </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="集合删除元素"><a href="#集合删除元素" class="headerlink" title="集合删除元素"></a>集合删除元素</h1><ol><li><p>删除指定元素</p><ul><li><p>内建函数：<code>remove()</code>、<code>discard()</code></p></li><li><p>格式：<code>set.remove(value)</code>、<code>set.discard(value)</code> （只能删除一个元素）</p></li><li><p>注意事项：<code>remove()</code>删除不存在的元素，会报错；<code>discard()</code>删除不存在的元素，不报错</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># remove()</span></span><br><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'abc'</span>&#125;</span><br><span class="line"><span class="comment"># a.remove('李四7')  # 删除不存在的元素，会报错</span></span><br><span class="line">a.remove(<span class="string">'李四'</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># discard()</span></span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'abc'</span>&#125;</span><br><span class="line">b.discard(<span class="number">3</span>)</span><br><span class="line">b.discard(<span class="number">30</span>)  <span class="comment"># 删除不存在的元素，不报错</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除第一个元素</p><ul><li><p>内建函数：<code>pop()</code></p></li><li><p>格式：<code>set.pop()</code> （默认删除第一个元素，此内建函数没有参数）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'abc'</span>,<span class="string">'qwer'</span>&#125;</span><br><span class="line">print(a)</span><br><span class="line">a.pop()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>清空集合</p><ul><li><p>内建函数：<code>clear()</code></p></li><li><p>格式：<code>set.clear()</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'张三'</span>,<span class="string">'李四'</span>,<span class="string">'abc'</span>&#125;</span><br><span class="line">a.clear()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="求集合的差集、交集、并集、对称差集"><a href="#求集合的差集、交集、并集、对称差集" class="headerlink" title="求集合的差集、交集、并集、对称差集"></a>求集合的差集、交集、并集、对称差集</h1><ol><li><p>差集</p><ul><li><p>符号：<code>-</code></p></li><li><p>内建函数：<code>difference()</code>、<code>difference_update()</code></p></li><li><p>格式：<code>set.difference(value)</code>、<code>set.difference_update(value)</code></p></li><li><p>注意事项：<code>difference_update()</code>是改变原始的数据</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">c = a - b  <span class="comment"># 差集符号 -</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">c = b.difference(a)</span><br><span class="line">print(c)</span><br><span class="line">print(b)  <span class="comment"># 原始集合 b 没有改变</span></span><br><span class="line"></span><br><span class="line">print(a)  <span class="comment"># 此时原始集合 a 没有改变</span></span><br><span class="line">d = a.difference_update(b)      <span class="comment">#注意：使用了此函数，后面的数据会发生改变，更新</span></span><br><span class="line">print(d)  <span class="comment"># 此时的 d 是空的，因为difference_update()是在原数据上修改的</span></span><br><span class="line">print(a)  <span class="comment"># 此时 a 发生了实质性的改变</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>交集 </p><ul><li><p>符号：<code>&amp;</code></p></li><li><p>内建函数：<code>intersection()</code>、<code>intersection_update()</code></p></li><li><p>注意事项：<code>intersection_update()</code>是改变原始的数据</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">c = a &amp; b  <span class="comment"># 差集符号 &amp;</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">c = b.intersection(a)</span><br><span class="line">print(c)</span><br><span class="line">print(b) </span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">d = a.intersection_update(b)      </span><br><span class="line">print(d)  </span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>并集</p><ul><li><p>符号：<code>|</code></p></li><li><p>内建函数：<code>union()</code>、<code>update()</code></p></li><li><p>注意事项：<code>update()</code>是改变原始的数据</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">c = a | b  <span class="comment"># 差集符号 |</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">c = b.union(a)</span><br><span class="line">print(c)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">d = a.update(b)</span><br><span class="line">print(d)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对称差集</p><ul><li><p>符号：<code>^</code></p></li><li><p>内建函数：<code>symmetric_difference()</code>、<code>symmetric_difference_update()</code></p></li><li><p>注意事项：<code>symmetric_difference_update()</code>是改变原始的数据</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;</span><br><span class="line">b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">c = a ^ b  <span class="comment"># 差集符号 |</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">f = (a | b) - (a &amp; b)</span><br><span class="line">print(<span class="string">'对称差集：'</span>, f)</span><br><span class="line"></span><br><span class="line">c = b.symmetric_difference(a)</span><br><span class="line">print(<span class="string">'对称差集：'</span>, c)</span><br><span class="line">print(b)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line">d = a.symmetric_difference_update(b)</span><br><span class="line">print(d)</span><br><span class="line">print(<span class="string">'对称差集：'</span>, a)</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3元组和字典的用法(七)</title>
      <link href="/posts/81d89753/"/>
      <url>/posts/81d89753/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="元组的创建"><a href="#元组的创建" class="headerlink" title="元组的创建"></a>元组的创建</h1><ol><li><p>格式：<code>tuple = (value, )</code></p></li><li><p>元组的特点：<strong>不能修改</strong>元组中的元素，但是两个或多个元组可以相互<strong>组合</strong>和<strong>重复</strong>使用</p></li><li><p>创建元组：<code>tuple01 = (1,)</code>，当元组中只有一个元素时，必须用逗号<code>,</code>分割，否则就是一个<code>int</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tuple01 = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">'5'</span>)</span><br><span class="line">print(tuple01, type(tuple01))</span><br><span class="line">tuple02 = (<span class="number">5</span>)</span><br><span class="line">print(tuple02, type(tuple02))</span><br><span class="line">tuple03 = (<span class="number">5</span>,)</span><br><span class="line">print(tuple03, type(tuple03))</span><br></pre></td></tr></table></figure></li></ol><h1 id="元组的组合和重复使用"><a href="#元组的组合和重复使用" class="headerlink" title="元组的组合和重复使用"></a>元组的组合和重复使用</h1><ul><li><p>符号：<code>+</code>组合，<code>*</code>重复</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple01 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) * <span class="number">3</span> + (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>) + (<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br><span class="line">print(tuple01)</span><br></pre></td></tr></table></figure></li></ul><h1 id="元组查询元素"><a href="#元组查询元素" class="headerlink" title="元组查询元素"></a>元组查询元素</h1><ol><li><p>用下标查询元素</p><ul><li><p>格式：<code>tuple[index]</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple01 = (<span class="number">1</span>, <span class="number">2</span>, <span class="string">'5'</span>)</span><br><span class="line">print(tuple01[<span class="number">2</span>], type(tuple01[<span class="number">2</span>]))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>切片查询多个元素</p><ul><li><p>格式：<code>tuple[start:end:step​]</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple02 = (<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>)</span><br><span class="line">print(tuple02[<span class="number">2</span>:<span class="number">6</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询指定元素的下标</p><ul><li><p>内建函数：<code>index()</code></p></li><li><p>格式：<code>tuple.index(value, start, end)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">5</span>, <span class="string">'5'</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">'5'</span>)</span><br><span class="line">print(a.index(<span class="string">'5'</span>))  <span class="comment"># 不指定开始和结束位置，只返回第一次出现的值的index（从左到右）</span></span><br><span class="line">print(a.index(<span class="string">'5'</span>, <span class="number">2</span>))  <span class="comment"># 指定开始位置（结束位置默认为最后一个元素）</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询指定元素在元组中出现的次数</p><ul><li><p>内建函数：<code>count()</code></p></li><li><p>格式：<code>tuple.count(value)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">5</span>, <span class="string">'5'</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">'5'</span>)</span><br><span class="line">print(a.count(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询元组中重复元素的位置</p><ul><li><p>系统枚举函数：<code>enumerate()</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = (<span class="number">5</span>, <span class="string">'5'</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">'5'</span>)</span><br><span class="line">b = []</span><br><span class="line">target= <span class="string">'5'</span></span><br><span class="line"><span class="keyword">for</span> index,value <span class="keyword">in</span> enumerate(a):</span><br><span class="line">    <span class="keyword">if</span> value == target:</span><br><span class="line">        b.append(index)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="字典的创建"><a href="#字典的创建" class="headerlink" title="字典的创建"></a>字典的创建</h1><ol><li><p>特点：字典中只有键值对<code>key</code>和<code>value</code>，没有<code>index</code>；字典中的<code>key</code>是唯一的，但<code>value</code>是不唯一的（<code>value</code>可重复）</p></li><li><p>格式：<code>dict = {key1: value1, key2: value2}</code></p></li><li><p>说明：字典中的<strong>元素</strong>都是以<strong>键值对</strong>的形式存放，元素之间用逗号隔开</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'id'</span>: <span class="number">1001</span>, <span class="string">'name'</span>: <span class="string">'小明'</span>, <span class="string">'age'</span>: <span class="number">88</span>&#125;</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li><li><p>复杂字典的创建</p><ul><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   注意：list可以转换成dict，前提是：list中的元素必须成对出现（tuple中只能包含两个元素）</span></span><br><span class="line"><span class="comment">#   list中包含tuple</span></span><br><span class="line">c = dict([(<span class="string">'name'</span>, <span class="string">'小明'</span>), (<span class="string">'age'</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)])</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   tuple中的元素必须承兑出现（list中只能包含两个元素）</span></span><br><span class="line">d = dict(([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>]))</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="字典添加元素"><a href="#字典添加元素" class="headerlink" title="字典添加元素"></a>字典添加元素</h1><ol><li><p>格式：<code>dict[key] = value</code></p></li><li><p>注意事项：若新添加的<code>key</code>在字典中存在，则会覆盖原来的<code>key</code>的<code>value</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'id'</span>: <span class="number">1001</span>, <span class="string">'name'</span>: <span class="string">'小明'</span>, <span class="string">'age'</span>: <span class="number">88</span>&#125;</span><br><span class="line">a[<span class="string">'id'</span>] = <span class="number">1002</span></span><br><span class="line">a[pid] = <span class="number">88</span></span><br><span class="line">a[<span class="string">'sex'</span>] = <span class="string">'男'</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li><li><p>字典添加相同的值</p><ul><li><p>内建函数：<code>fromkeys()</code></p></li><li><p>格式：<code>dict.fromkeys(iterable, default)</code>  (<code>iterable</code>：可迭代)</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;&#125;  <span class="comment"># 若字典 a 中存在数据，则会被覆盖</span></span><br><span class="line">b = <span class="string">'abcdefg'</span>  <span class="comment"># b 的值必须是可迭代的</span></span><br><span class="line">c = a.fromkeys(b)  <span class="comment"># 不添加默认值，默认value为None</span></span><br><span class="line">print(c)</span><br><span class="line">c = a.fromkeys(b, <span class="number">66</span>)  <span class="comment"># 添加默认值，此字典中的所有value都为66</span></span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line">d = dict.fromkeys(b, <span class="number">88</span>)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="字典删除元素"><a href="#字典删除元素" class="headerlink" title="字典删除元素"></a>字典删除元素</h1><ol><li><p>删除指定元素：</p><ul><li><p>关键词格式：<code>del dict[key]</code></p></li><li><p>内建函数格式：<code>dict.pop(key, default)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'张三'</span>: <span class="number">100</span>, <span class="string">'李四'</span>: <span class="number">90</span>, <span class="string">'王五'</span>: <span class="number">80</span>, <span class="string">'赵六'</span>: <span class="number">59</span>&#125;</span><br><span class="line">b = a.pop(<span class="string">'李四5'</span>, <span class="string">'删除失败！key不存在！'</span>)</span><br><span class="line">print(a, b)</span><br><span class="line">b = a.pop(<span class="string">'李四'</span>, <span class="string">'删除失败！key不存在！'</span>)</span><br><span class="line">print(a, b)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>只删除最后一个元素：</p><ul><li><p>内建函数格式：<code>dict.popitem()</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'张三'</span>: <span class="number">100</span>, <span class="string">'李四'</span>: <span class="number">90</span>, <span class="string">'王五'</span>: <span class="number">80</span>, <span class="string">'赵六'</span>: <span class="number">59</span>&#125;</span><br><span class="line">a.popitem()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>清空字典中的元素</p><ul><li><p>内建函数格式：<code>dict.clear()</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'张三'</span>: <span class="number">100</span>, <span class="string">'李四'</span>: <span class="number">90</span>, <span class="string">'王五'</span>: <span class="number">80</span>, <span class="string">'赵六'</span>: <span class="number">59</span>&#125;</span><br><span class="line">a.clear()</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="字典修改元素"><a href="#字典修改元素" class="headerlink" title="字典修改元素"></a>字典修改元素</h1><ol><li><p>修改指定的元素</p><ul><li><p>格式：<code>dict[key] = value</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict01 = &#123;<span class="string">'id'</span>: <span class="number">1001</span>, <span class="string">'name'</span>: <span class="string">'张三'</span>,<span class="string">'age'</span>: <span class="number">66</span>&#125;</span><br><span class="line">dict01[<span class="string">'age'</span>] = <span class="number">88</span></span><br><span class="line">print(dict01)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>合并两个字典</p><ul><li><p>内建函数：<code>update()</code></p></li><li><p>格式：<code>dict.update(dict)</code> （参数只有一个）</p></li><li><p>注意事项：若两个字典存在相同的<code>key</code>，则原有的<code>key</code>的<code>value</code>会被新添加的<code>key</code>的<code>value</code>覆盖；不能用<code>{} + {}</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'name'</span>:<span class="string">'张三'</span>,<span class="string">'age'</span>:<span class="number">88</span>,<span class="string">'gender'</span>:<span class="string">'男'</span>&#125;</span><br><span class="line">b = &#123;<span class="string">'name'</span>:<span class="string">'李四'</span>,<span class="string">'gender'</span>:<span class="string">'女'</span>&#125;</span><br><span class="line">c = &#123;<span class="string">'hobby'</span>:<span class="string">'玩游戏'</span>&#125;</span><br><span class="line"></span><br><span class="line">a.update(b)</span><br><span class="line">a.update(c)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="字典查询元素"><a href="#字典查询元素" class="headerlink" title="字典查询元素"></a>字典查询元素</h1><ol><li><p>查询指定元素：</p><ul><li><p>普通格式：<code>dict[key]</code> （若<code>key</code>不存在，则报错）</p></li><li><p>内建函数格式：<code>dict.get(key, default)</code> （若key不存在，输出默认值None，默认值可自定义）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'张三'</span>:<span class="number">100</span>,<span class="string">'李四'</span>:<span class="number">90</span>,<span class="string">'王五'</span>:<span class="number">80</span>,<span class="string">'赵六'</span>:<span class="number">59</span>&#125;</span><br><span class="line">print(a[<span class="string">'李四'</span>])</span><br><span class="line">print(a.get(<span class="string">'李四5'</span>, <span class="string">'key不存在！'</span>))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询所有键值对</p><ul><li><p>内建函数：<code>items()</code></p></li><li><p>格式：<code>dict.items()</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'张三'</span>:<span class="number">100</span>,<span class="string">'李四'</span>:<span class="number">90</span>,<span class="string">'王五'</span>:<span class="number">80</span>,<span class="string">'赵六'</span>:<span class="number">59</span>&#125;</span><br><span class="line">print(a.items())  <span class="comment"># 以列表的形式输出</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询所有键</p><ul><li><p>内建函数：<code>keys()</code></p></li><li><p>格式：<code>dict.keys()</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'张三'</span>:<span class="number">100</span>,<span class="string">'李四'</span>:<span class="number">90</span>,<span class="string">'王五'</span>:<span class="number">80</span>,<span class="string">'赵六'</span>:<span class="number">59</span>&#125;</span><br><span class="line">print(a.keys())</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询所有值</p><ul><li><p>内建函数：<code>values()</code></p></li><li><p>格式：<code>dict.values()</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="string">'张三'</span>:<span class="number">100</span>,<span class="string">'李四'</span>:<span class="number">90</span>,<span class="string">'王五'</span>:<span class="number">80</span>,<span class="string">'赵六'</span>:<span class="number">59</span>&#125;</span><br><span class="line">print(a.values())</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3列表的用法(六)</title>
      <link href="/posts/1ffbcd3f/"/>
      <url>/posts/1ffbcd3f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="列表的创建"><a href="#列表的创建" class="headerlink" title="列表的创建"></a>列表的创建</h1><ol><li>创建：<code>list01 = [1, &#39;abc&#39;, 8]</code></li><li>列表函数<code>list()</code>：<code>list01 = list(&#39;123abc&#39;)</code> （将str型转换为list型）</li></ol><h1 id="列表添加元素"><a href="#列表添加元素" class="headerlink" title="列表添加元素"></a>列表添加元素</h1><ol><li><p>指定位置插入元素</p><ul><li><p>内建函数：<code>insert()</code></p></li><li><p>格式：<code>list.insert(index, value)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list09 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list09.insert(<span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 在下标为 0 的位置插入int型元素 0</span></span><br><span class="line">list09.insert(<span class="number">2</span>, <span class="string">'a'</span>)  <span class="comment"># 在2的位置插入字符串元素 a</span></span><br><span class="line">print(list09)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加单个元素（<strong>默认添加到末尾</strong>）</p><ul><li><p>内建函数：<code>append()</code></p></li><li><p>格式：<code>list.append(value)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list66 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list66.append(<span class="string">'5'</span>)  <span class="comment"># 在列表末尾添加str型元素 '5'</span></span><br><span class="line">print(list66)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>添加多个元素</p><ul><li><p>方式一</p><ul><li><p>内建函数：<code>extend()</code></p></li><li><p>格式：<code>list.extend(value)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list66 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list8 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">list66.extend(list8)</span><br><span class="line">print(list66)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方式二</p><ul><li><p>拼接符：<code>+</code></p></li><li><p>格式：<code>[value] + [value]</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list6 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] + [<span class="number">7</span>, <span class="string">'8'</span>, <span class="number">9</span>]  <span class="comment"># 直接用拼接符</span></span><br><span class="line">list7 = list(<span class="string">"abcd"</span>)</span><br><span class="line">print(list6 + list7)  <span class="comment"># 直接输出两个列表中的所有数据</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>列表的重复使用</p><ul><li><p>符号：<code>*</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list55 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] + [<span class="number">7</span>, <span class="string">'8'</span>, <span class="number">9</span>] * <span class="number">3</span> <span class="comment"># 只重复 3 遍[7, '8', 9]，混合运算</span></span><br><span class="line">print(list55)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="列表删除元素"><a href="#列表删除元素" class="headerlink" title="列表删除元素"></a>列表删除元素</h1><ol><li><p>删除指定位置的元素</p><ul><li><p>关键词：<code>del</code></p></li><li><p>关键词格式：<code>del list[index]</code></p></li><li><p>内建函数：<code>pop()</code></p></li><li><p>内建函数格式：<code>list.pop(index)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关键词 del</span></span><br><span class="line">list0 = [<span class="string">'hp'</span>,<span class="string">'dell'</span>,<span class="string">'lenovo'</span>,<span class="string">'thinkpad'</span>,<span class="string">'华为6'</span>,<span class="string">'神州'</span>]</span><br><span class="line">print(<span class="string">'原始数据：'</span>,list0)</span><br><span class="line"><span class="keyword">del</span> list0[<span class="number">1</span>]       <span class="comment"># 删除下标为 1 的元素：第二个元素 'dell'</span></span><br><span class="line">print(<span class="string">'删除后的列表：'</span>,list0)       <span class="comment">#输出列表中剩余的元素</span></span><br><span class="line"><span class="comment"># 内建函数 pop()</span></span><br><span class="line">list02 = [<span class="string">'hp'</span>,<span class="string">'dell'</span>,<span class="string">'lenovo'</span>,<span class="string">'thinkpad'</span>,<span class="string">'华为6'</span>,<span class="string">'神州'</span>]</span><br><span class="line">list02.pop(<span class="number">1</span>)</span><br><span class="line">print(list02)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除指定的元素</p><ul><li><p>内建函数：<code>remove()</code> （删除的元素必须在list中，否则报错）</p></li><li><p>格式：<code>list.remove(value)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list0 = [<span class="string">'hp'</span>,<span class="string">'dell'</span>,<span class="string">'lenovo'</span>,<span class="string">'thinkpad'</span>,<span class="string">'华为6'</span>,<span class="string">'神州'</span>]</span><br><span class="line">list0.remove(<span class="string">'华为6'</span>)  <span class="comment"># 必须输入存在的元素，否则报错</span></span><br><span class="line">print(list0)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>弹出末尾的元素</p><ul><li><p>内建函数：<code>pop()</code></p></li><li><p>格式：<code>list.pop()</code> 或 <code>list.pop(index)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">l10 = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">2</span>]</span><br><span class="line">l10.pop()  <span class="comment"># 不指定位置，默认删除末尾的元素</span></span><br><span class="line">l10.pop(<span class="number">2</span>)  <span class="comment"># 指定删除 2 位置的元素</span></span><br><span class="line">print(l10)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>清空整个列表</p><ul><li><p>内建函数：<code>clear()</code></p></li><li><p>格式：list.clear()</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list88 = [<span class="string">'hp'</span>,<span class="string">'dell'</span>,<span class="string">'lenovo'</span>,<span class="string">'thinkpad'</span>,<span class="string">'华为6'</span>,<span class="string">'神州'</span>]</span><br><span class="line">list88.clear()</span><br><span class="line">print(list88)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="列表修改元素"><a href="#列表修改元素" class="headerlink" title="列表修改元素"></a>列表修改元素</h1><ol><li><p>替换列表中的元素：</p><ul><li><p>格式：<code>list[index] = value</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">brands = [<span class="string">'hp'</span>, <span class="string">'dell'</span>, <span class="string">'thinkpad'</span>, <span class="string">'华为'</span>, <span class="string">'lenovo'</span>, <span class="string">'神州'</span>]</span><br><span class="line">print(<span class="string">'原始数据：&#123;&#125;'</span>.format(brands))</span><br><span class="line">brands[<span class="number">3</span>] = <span class="string">'HUAWEI'</span></span><br><span class="line">print(<span class="string">'修改后的列表'</span>, brands)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>列表的排序：</p><ul><li><p>内建函数：<code>sort()</code>和<code>sorted()</code></p></li><li><p>格式：<code>list.sort(reverse=True)</code> 和<code>sorted(list, reverse=False)</code></p></li><li><p>注意事项：</p><ol><li><code>sort()</code>函数：默认<strong>升序</strong>排列<code>reverse=False</code>，可省略不写；但是<strong>降序</strong>排列时，必须加<code>reverse=True</code></li><li><code>sorted()</code>函数：必须有<strong>变量</strong>接收；默认<strong>升序</strong>排列<code>reverse=False</code>，可省略不写；但是<strong>降序</strong>排列时，必须加<code>reverse=True</code></li></ol></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sort()函数</span></span><br><span class="line">list5 = [<span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>]</span><br><span class="line">list5.sort()  <span class="comment"># 升序排列</span></span><br><span class="line">print(list5)</span><br><span class="line">list5.sort(reverse=<span class="literal">True</span>)  <span class="comment"># 降序排列</span></span><br><span class="line">print(list5)</span><br><span class="line"><span class="comment"># sorted()函数</span></span><br><span class="line">list6 = [<span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br><span class="line">list7 = sorted(list6)  <span class="comment"># 升序排列</span></span><br><span class="line">print(list7)</span><br><span class="line">list8 = sorted(list6, reverse=<span class="literal">True</span>)  <span class="comment"># 降序排列</span></span><br><span class="line">print(list8)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>列表的反转：</p><ul><li><p>内建函数：<code>reverse()</code></p></li><li><p>格式：<code>list.reverse()</code></p></li><li><p>注意事项：<code>reverse()</code>函数，只是将列表从右往左依次输出，不进行排序</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list58 = [<span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>]</span><br><span class="line">list58.reverse()</span><br><span class="line">print(list58)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="列表查询元素"><a href="#列表查询元素" class="headerlink" title="列表查询元素"></a>列表查询元素</h1><ol><li><p>查询指定元素</p><ul><li><p>格式：<code>list[index]</code>（注意：<code>index</code>支持负数，<code>list[-1]</code> 表示列表中的<strong>最后</strong>一个元素）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list0 = list(<span class="string">'eufbvycbwiadf'</span>)</span><br><span class="line">value0 = list0[<span class="number">2</span>]  <span class="comment"># 先指定某个元素的位置，并赋值</span></span><br><span class="line">print(<span class="string">'输出元素：'</span>, value0)  <span class="comment"># 输出变量，即输出某个元素</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>查询指定元素的索引</p><ul><li><p>内建函数：<code>index()</code></p></li><li><p>格式：<code>list.index(value)</code> （注意：输入的<code>value</code>必须是<code>list</code>中的元素，若不存在，则报错）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list3 = [<span class="number">66</span>, <span class="string">'88'</span>, <span class="number">99</span>]</span><br><span class="line">print(<span class="string">'元素的位置为：'</span>, list3.index(<span class="string">'88'</span>))  <span class="comment"># 注意元素的类型，'88'为str型</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>统计列表中的指定元素个数</p><ul><li><p>内建函数：<code>count()</code></p></li><li><p>格式：<code>list.count(value)</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list3 = [<span class="number">66</span>, <span class="string">'88'</span>, <span class="number">99</span>, <span class="number">66</span>]</span><br><span class="line">print(list3.count(<span class="number">66</span>))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>列表元素的截取</p><ul><li><p>符号：<code>[::]</code></p></li><li><p>格式：<code>list[start: end: step]</code> （start：开始的位置；end：结束的位置；step：步长）</p></li><li><p>区间：<code>[ )</code> （包含起始位置，不包含结束位置）</p></li><li><p>注意事项：<code>list[::2]</code> 参数 2 表示，每次取第二个元素（每隔1个元素取值），<code>list[::3]</code>表示，每次取第三个元素（每隔2个元素取值），负数表示反向取值（从右到左），第三个参数也叫步长</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list999 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">print(list999[<span class="number">6</span>])  <span class="comment"># 截取一个值</span></span><br><span class="line">print(list999[<span class="number">2</span>:<span class="number">6</span>])  <span class="comment"># 截取一个区间（范围），step=1（可省略）</span></span><br><span class="line">print(list999[<span class="number">2</span>:<span class="number">8</span>:<span class="number">3</span>])  <span class="comment"># 截取一个区间，step=3（步长为3）</span></span><br><span class="line">print(list999[<span class="number">7</span>:<span class="number">1</span>:<span class="number">-2</span>])  <span class="comment"># 反向截取一个区间，step=2</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3条件判断和循环语句的用法(五)</title>
      <link href="/posts/e04909ba/"/>
      <url>/posts/e04909ba/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><ol><li><p>pass()函数</p><ul><li>作用：用做<strong>占位符</strong>，保持程序结构的完整性，不做任何事情</li></ul></li><li><p>普通格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式<span class="number">1</span>:  <span class="comment"># 若表达式1成立，则进入此缩进的内容</span></span><br><span class="line"><span class="keyword">pass</span>  <span class="comment"># pass代表 “占位符”</span></span><br><span class="line"><span class="keyword">elif</span> 表达式<span class="number">2</span>:  <span class="comment"># 若表达式2成立，则进入此缩进的内容</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 若以上两个或多个表达式都不成立，则进入此缩进的内容</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>嵌套格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入一个数，判断是否是2和3的倍数</span></span><br><span class="line">user_input = int(input(<span class="string">'请输入一个整数：'</span>))</span><br><span class="line"><span class="keyword">if</span> user_input %<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> user_input %<span class="number">3</span> ==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'既是2的倍数，又是3的倍数！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'只是2的倍数！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> user_input %<span class="number">3</span> ==<span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'只能是3的倍数'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'既不是2的倍数，也不是3的倍数！'</span>)</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>注意事项：</p><ul><li>每个判断语句末尾都有<code>:</code>（分号）</li><li>使用<strong>缩进</strong>来划分<strong>语句块</strong>，相同缩进数的语句在一起，就组成了一个语句块</li><li><code>elif</code>条件，可以写多个，但是<code>if</code>和<code>else</code>只能写一次（若条件只有两个，则<code>elif</code>就不用了，只写<code>if...else...</code>即可）</li><li>条件语句中，经常和<strong>关系运算符</strong>联用</li></ul></li></ol><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><ol><li><p>range()函数</p><ul><li><p>作用：生成数列</p></li><li><p>用法：</p><ol><li><code>range()</code>中，可以有一个、两个、三个参数，默认递增</li><li><code>range(m)</code>当有一个参数时，会执行<code>[0,m)</code>，即 0 ~ m-1范围，默认递增数为1</li><li><code>range(n,m)</code>当有两个参数时，会执行<code>[n,m)</code>,即n ~ m-1范围，默认递增数为1</li><li><code>range(n,m,p)</code>当有三个参数时，会执行<code>[n,m)</code>，即n ~ m-1范围，但是递增数为<code>p</code></li></ol></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递增</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):  <span class="comment"># 遍历1~10的数字，每隔两个数，取一个数（即递增数为2）</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment"># 递减</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>, <span class="number">-10</span>, <span class="number">-2</span>):  <span class="comment"># 遍历10~-10的数字，每隔两个数，取一个数（即递减数为2）</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>while循环语句：</p><ul><li><p>普通格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式：</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># else语句可省略</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>其它格式（仅限于，循环体中只有一个语句）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (表达式): 结果  <span class="comment"># 无限循环语句</span></span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 九九乘法标</span></span><br><span class="line"><span class="comment"># 层：layer    列：column</span></span><br><span class="line">layer = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> layer &lt;= <span class="number">9</span>:</span><br><span class="line">    column = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> column &lt;= layer:</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;column&#125;</span>x<span class="subst">&#123;layer&#125;</span>=<span class="subst">&#123;column * layer&#125;</span>'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">        column += <span class="number">1</span></span><br><span class="line">    layer += <span class="number">1</span></span><br><span class="line">    print()  <span class="comment"># 因为end='\t'，所以要末尾换行</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>for循环语句</p><ul><li><p>格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> iterable:  <span class="comment"># 遍历一个可迭代的序列</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 循环结束后要执行的语句</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 九九乘法表</span></span><br><span class="line"><span class="keyword">for</span> layer <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> column <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">if</span> column &lt;= layer:</span><br><span class="line">            print(<span class="string">f'<span class="subst">&#123;column&#125;</span>x<span class="subst">&#123;layer&#125;</span>=<span class="subst">&#123;layer*column&#125;</span>'</span>, end=<span class="string">'\t'</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>break语句</p><ul><li><p>作用：跳出 <code>for</code> 和 <code>while</code> 的循环体。如果你从 <code>for</code> 或 <code>while</code> 循环中终止，任何对应的循环 <code>else</code> 块将不执行</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>continue语句</p><ul><li><p>作用：跳过当前循环块中的剩余语句，然后继续进行下一轮循环</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3进制转换与运算符的用法(四)</title>
      <link href="/posts/e6e25ec7/"/>
      <url>/posts/e6e25ec7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><ol><li><p>计算机单位：</p><ul><li>1bit = 一个二进制位（1帧）</li><li>1byte = 8bit（1个字节，构成8个比特）</li><li>1kb = 1024byte</li><li>1MB = 1024kb</li><li>1GB = 1024M</li><li>1T = 1024G</li></ul></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#   二进制 0 1 ---&gt; 十进制 0-9</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    1.在python中，二进制 开头是 0b </span></span><br><span class="line"><span class="string">    2.正数 10 转二进制：</span></span><br><span class="line"><span class="string">        二进制数：1  0   1   0   ---&gt;   十进制数：10</span></span><br><span class="line"><span class="string">        从右往左依次计算：0*2^0 + 1*2^1 + 0*2^2 + 1*2^3 = 10</span></span><br><span class="line"><span class="string">    3.负数 -8 转二进制：</span></span><br><span class="line"><span class="string">        二进制数：1 0 0 0   ---&gt;   十进制数：10</span></span><br><span class="line"><span class="string">        1）先求 8 的二进制位：1 0 0 0</span></span><br><span class="line"><span class="string">        一个字节占位 8 个二进制数</span></span><br><span class="line"><span class="string">        2）自动补齐：   0000  1 0 0 0</span></span><br><span class="line"><span class="string">        3）取反（反码）：1111  0 1 1 1</span></span><br><span class="line"><span class="string">        4）最后一位数加 1 若最后一位数是 1 ，则进一位，原位置变为 0</span></span><br><span class="line"><span class="string">        0000    1 0 0 0</span></span><br><span class="line"><span class="string">        1111    0 1 1 1</span></span><br><span class="line"><span class="string">        ---------------</span></span><br><span class="line"><span class="string">        1111    1 0 0 0</span></span><br><span class="line"><span class="string">    4.bin() 是二进制转换函数   十进制 ---&gt; 二进制</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">num_0 = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">print(bin(num_0))   <span class="comment">#bin() 是二进制转换函数   十进制 ---&gt; 二进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   八进制 ---&gt;十进制</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    1.八进制数标识：开始为：0o （零欧）</span></span><br><span class="line"><span class="string">    2.八进制数值范围：0-7   （不包括8,8以内的数）</span></span><br><span class="line"><span class="string">    3.八进制0o6430 ---&gt; 十进制3352，输出十进制用 int()函数</span></span><br><span class="line"><span class="string">    4.八进制：6 4 3 0</span></span><br><span class="line"><span class="string">      十进制：从右往左依次计算：0*8^0 + 3*8^1 + 4*8^2 + 6*8^3 = 3352                    </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">num_1 = <span class="number">0o6430</span></span><br><span class="line"></span><br><span class="line">print(int(num_1))</span><br><span class="line"></span><br><span class="line"><span class="comment">#   八进制 ---&gt;二进制</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    八进制 ---&gt; 二进制:</span></span><br><span class="line"><span class="string">    1.将八进制数：6430 分开，将单独的每一个数作为一个 十进制数</span></span><br><span class="line"><span class="string">    2.转换过程：         6    4    3    0</span></span><br><span class="line"><span class="string">        二进制：        110  100  011  000</span></span><br><span class="line"><span class="string">    3.八进制：6430 ---&gt; 二进制：110100011000</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   十六进制</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    1.十六进制开头标识符：0x  （零 埃克斯）</span></span><br><span class="line"><span class="string">    2.十六进制：0x911 ---&gt; 十进制：2321</span></span><br><span class="line"><span class="string">        转换过程：9  1   1---&gt; 1*16^0 + 1*16^1 + 9*16^2=2321</span></span><br><span class="line"><span class="string">    3.十六进制数值范围：0、1、2、3、4、5、6、7、8、9、a、b、c、d、e、f            </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">num_2 = <span class="number">0x9ab16</span></span><br><span class="line">print(<span class="string">'十六进制--&gt;十进制'</span>,int(num_2))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 十六进制 ---&gt; 二进制</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    1.十六进制：   0x   9   a   b   1   6</span></span><br><span class="line"><span class="string">    2.将十六进制数的每一个数单独出来 求 二进制</span></span><br><span class="line"><span class="string">    3.十六进制中：a=10、b=11、c=12、d=13、e=14 、f=15（单个字母的十进制数）</span></span><br><span class="line"><span class="string">    4.一一对应： 9     a     b     1     6</span></span><br><span class="line"><span class="string">    5. 二进制：1001  1010  1011  0001  0110</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(<span class="string">'''</span></span><br><span class="line"><span class="string">A：1010、B：1011、C：1100、D：1101、E：1110、F：1111（单个字母的二进制数，不区分大小写）</span></span><br><span class="line"><span class="string">进制转换练习结果：</span></span><br><span class="line"><span class="string">                八进制数：0o52510    三个一位数字</span></span><br><span class="line"><span class="string">                            5    2    5    1    0</span></span><br><span class="line"><span class="string">                二进制：    101  010  101  001  000     </span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                十六进制数：0xF0610C  四个一位数字</span></span><br><span class="line"><span class="string">                             F     0     6    1    0    C</span></span><br><span class="line"><span class="string">                二进制：    1111  0000  0110 0001 0000 1100  </span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">print(<span class="string">'--&gt;进制转换到此为止！\n'</span>, <span class="string">'都懂了吧！\n'</span>, <span class="string">'不懂得直接乱棍打死！'</span>, sep=<span class="string">'--&gt;'</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h1><ol><li><p>符号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;+&#x3D;-&#x3D;*&#x3D;&#x2F;&#x3D;</span><br><span class="line">a+&#x3D;b a&#x3D;a+b </span><br><span class="line">a-&#x3D;b a&#x3D;a-b </span><br><span class="line">a*&#x3D;b a&#x3D;a*b </span><br><span class="line">a&#x2F;&#x3D;b a&#x3D;a&#x2F;b</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当变量的值相同时，存储的位置相同(id相同)</span></span><br><span class="line">name = <span class="string">'admin'</span></span><br><span class="line">name1 = name</span><br><span class="line">name2 = <span class="string">'admin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id()函数：调出变量的存储位置</span></span><br><span class="line">print(id(name), name)</span><br><span class="line">print(id(name1), name1)</span><br><span class="line">print(id(name2), name2)</span><br><span class="line"></span><br><span class="line">print(name == name1)  <span class="comment"># == 关系运算符中的‘等于’，返回bool值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个变量赋值</span></span><br><span class="line"><span class="comment"># 先计算右边的表达式，再一一对应赋值给左边</span></span><br><span class="line">a, b = <span class="number">6</span>, <span class="number">8</span></span><br><span class="line">a, b = b, a + b  <span class="comment"># 等价于 a = b 和 b = a + b</span></span><br><span class="line">print(a, b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扩展后的赋值运算符   +=  -=  *=  /=  ...</span></span><br><span class="line">num = <span class="number">5</span></span><br><span class="line">num += <span class="number">8</span>  <span class="comment"># num = num + 8 此时的 + 代表operator的+</span></span><br><span class="line">print(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 特别注意：连接字符串的 +</span></span><br><span class="line">a = <span class="string">'abc'</span></span><br><span class="line">a += <span class="string">'qqq'</span>  <span class="comment"># 等价于：a = a + 'qqq' 此时‘+’号就是“连接符”；包含两个结果：1.连接str 2.连接后的结果</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">num_a = <span class="number">6</span></span><br><span class="line">num_a *= <span class="number">8</span></span><br><span class="line">print(num_a)</span><br><span class="line">num_a /= <span class="number">12</span></span><br><span class="line">print(num_a)</span><br></pre></td></tr></table></figure></li></ol><h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><ol><li><p>符号：<code>+ - * /</code>加减乘除     <code>//</code>取整（整除）       <code>%</code>取余       <code>**</code>求幂（次方）</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">111</span></span><br><span class="line"><span class="comment">#   加、减、乘、除运算符</span></span><br><span class="line">print(a + b)</span><br><span class="line">print(a - b)</span><br><span class="line">print(a * b)</span><br><span class="line">print(a / b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------'</span>)</span><br><span class="line"><span class="comment">#   取整运算符   //</span></span><br><span class="line">print(<span class="number">15</span> // <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------'</span>)</span><br><span class="line"><span class="comment">#   取余运算符   %</span></span><br><span class="line">print(<span class="number">5</span> % <span class="number">8</span>)</span><br><span class="line">print(<span class="number">8</span> % <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'------------------------------'</span>)</span><br><span class="line"><span class="comment">#   求幂运算符   **</span></span><br><span class="line">print(<span class="number">2</span> * <span class="number">2</span> * <span class="number">2</span>)</span><br><span class="line"><span class="comment">#   2的3次幂</span></span><br><span class="line">print(<span class="number">2</span> ** <span class="number">3</span>)</span><br></pre></td></tr></table></figure></li></ol><h1 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h1><ol><li><p>符号：<code>&gt;</code>   <code>&lt;</code>   <code>==</code>等于   <code>&gt;=</code>    <code>&lt;=</code>    <code>!=</code> 不等于   </p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字母和符号也是可以比较大小的（根据ascii码，ascii码数值越大，关系越后；ascii值大的越小）</span></span><br><span class="line"><span class="comment"># 强制转换输入的内容，因为input()默认输入的内容为str型</span></span><br><span class="line">num_0 = int(input(<span class="string">'请输入第一个数：'</span>))</span><br><span class="line">num_1 = int(input(<span class="string">'请输入第二个数：'</span>))</span><br><span class="line">result = num_0 &gt; num_1  <span class="comment"># 结果：False,True</span></span><br><span class="line">print(<span class="string">'两个数相等：'</span>, result)</span><br><span class="line"></span><br><span class="line">username = input(<span class="string">'请输入密码：'</span>) <span class="comment"># 密码：admin888</span></span><br><span class="line">uname = input(<span class="string">'请再次输入密码：'</span>)</span><br><span class="line">result0 = username == uname</span><br><span class="line">print(<span class="string">'两次输入的密码相等：'</span>, result0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># = 和 == 的用法</span></span><br><span class="line">password = input(<span class="string">'请输入密码：'</span>)</span><br><span class="line">u_password = <span class="string">'password'</span></span><br><span class="line">result = password == u_password</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># != 的用法</span></span><br><span class="line">name01 = <span class="string">'jack'</span></span><br><span class="line">name02 = <span class="string">'lucy'</span></span><br><span class="line">name03 = <span class="string">'jack'</span></span><br><span class="line">print(name01 != name02)</span><br><span class="line">print(name01 != name03)</span><br></pre></td></tr></table></figure></li></ol><h1 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h1><ol><li><p>符号：与<code>and</code>   或<code>or</code>   非<code>not</code>       结果：<code>bool</code>判断</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">msg_1 = <span class="literal">True</span></span><br><span class="line">msg_2 = <span class="literal">False</span></span><br><span class="line">msg_3 = <span class="literal">True</span></span><br><span class="line">msg_4 = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">print(msg_1 <span class="keyword">and</span> msg_2) <span class="comment"># and 有一个为假，都为假</span></span><br><span class="line">print(msg_1 <span class="keyword">and</span> msg_3) <span class="comment"># and 同时为真，才为真</span></span><br><span class="line">print(msg_1 <span class="keyword">or</span> msg_2) <span class="comment"># or 有一个为真，都为真</span></span><br><span class="line">print(msg_1 <span class="keyword">and</span> <span class="keyword">not</span> msg_3) <span class="comment"># not 将结果反过来</span></span><br><span class="line">print(<span class="keyword">not</span> msg_2 <span class="keyword">and</span> <span class="keyword">not</span> msg_4)</span><br></pre></td></tr></table></figure></li><li><p>练习：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数字计算游戏判断真假</span></span><br><span class="line">num_1 = <span class="number">8</span></span><br><span class="line">num_2 = <span class="number">5</span></span><br><span class="line">num_3 = <span class="number">3</span></span><br><span class="line">num_4 = <span class="number">2</span></span><br><span class="line">num_5 = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">result_0 = <span class="keyword">not</span> num_2 + num_3 != num_1 <span class="keyword">and</span> num_1 &gt; num_2</span><br><span class="line">print(<span class="string">'数字运算结果判断：'</span>, result_0)</span><br><span class="line"></span><br><span class="line">result_00 = num_1 &gt;= num_4 * num_5</span><br><span class="line">print(<span class="string">'*判断：'</span>, result_00)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'and用法：'</span>, num_1 &lt; num_2)</span><br><span class="line">print(<span class="string">'and用法：'</span>, num_1 &gt;= num_2 + num_3 <span class="keyword">or</span> num_1 &lt; num_2)</span><br><span class="line">print(<span class="string">'and用法：'</span>, num_1 &gt;= num_2 + num_3 <span class="keyword">and</span> num_3 == num_1 - num_2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆窗口的 “账户密码验证” 规则设定</span></span><br><span class="line">username_a = <span class="string">'username'</span></span><br><span class="line">password_a = <span class="string">'password'</span></span><br><span class="line"></span><br><span class="line">input_user = input(<span class="string">'请输入用户名：'</span>)</span><br><span class="line">input_pass = input(<span class="string">'请输入密码：'</span>)</span><br><span class="line"></span><br><span class="line">result_1 = <span class="keyword">not</span> username_a == input_user <span class="keyword">and</span> password_a == input_pass</span><br><span class="line">print(<span class="string">'登陆：'</span>, result_1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登陆窗口的 “用户名输入” 规则设定</span></span><br><span class="line">username_b = <span class="string">'admin'</span></span><br><span class="line">email_b = <span class="string">'666888@888.com'</span></span><br><span class="line">input_user_b = input(<span class="string">'请输入用户名：'</span>)</span><br><span class="line"></span><br><span class="line">input_result = username_b == input_user_b <span class="keyword">or</span> email_b == input_user_b</span><br><span class="line"></span><br><span class="line">print(<span class="string">'您输入的用户名：'</span>, input_result)</span><br></pre></td></tr></table></figure></li></ol><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><ol><li><p>符号：<code>&amp;</code>与    <code>|</code>或    <code>^</code>异或    <code>~</code>取反    <code>&lt;&lt;</code>左移    <code>&gt;&gt;</code>右移</p></li><li><p>过程：将十进制数转换为二进制数，再一一对应，进行运算</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位运算符，只能进行int型运算，将int型，10进制转换为2进制再一一对应进行运算的</span></span><br><span class="line"><span class="comment"># 英文：position</span></span><br><span class="line"><span class="comment"># 二进制函数：bin()</span></span><br><span class="line">print(bin(<span class="number">11</span>))  <span class="comment"># 0b表示二进制</span></span><br><span class="line"><span class="comment"># &amp;与    |或    ^异或    ~取反    &lt;&lt;左移    &gt;&gt;右移</span></span><br><span class="line">a = <span class="number">11</span>  <span class="comment"># 1011</span></span><br><span class="line">b = <span class="number">2</span>  <span class="comment"># 0010</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &amp;与运算符，在二进制数中，有一个为0则都为0</span></span><br><span class="line">print(a &amp; b)  <span class="comment"># 结果为0010，转换输出2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># |或运算符，在二进制数中，有一个为1，则为1，否则为0</span></span><br><span class="line">print(a | b)  <span class="comment"># 结果为1011，转换输出11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^异或运算符，在二进制数中，相同为0，不同为1</span></span><br><span class="line">print(a ^ b)  <span class="comment"># 结果为1001，转换输出为9</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ~取反运算符，例如：x = ~10   返回值为 -11</span></span><br><span class="line"><span class="comment"># 规律：正数取反，先 +1 再变符号；负数取反，先 -1 再变符号</span></span><br><span class="line">num_0 = ~ <span class="number">10</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    例如：x = ~10</span></span><br><span class="line"><span class="string">    电脑运算过程：</span></span><br><span class="line"><span class="string">    1.明确是对int型10进行取反 ~</span></span><br><span class="line"><span class="string">    2.十进制：10 --&gt; 二进制：0000 1010</span></span><br><span class="line"><span class="string">    3.对二进制：1010 取反 --&gt; 1111 0101</span></span><br><span class="line"><span class="string">    4.进行末尾减 1 --&gt; 1111 0100</span></span><br><span class="line"><span class="string">    5.对减 1 后的值进行取反 --&gt; 二进制：0000 1011--&gt;十进制：11</span></span><br><span class="line"><span class="string">    6.因为这是一个负数，所以结果为：-11</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(<span class="string">'~取反结果：'</span>, type(num_0), num_0)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;&lt;左移位运算符，</span></span><br><span class="line">x = <span class="number">11</span> &lt;&lt; <span class="number">2</span>  <span class="comment"># 在11的二进制尾部加上2个0，结果为101100转换十进制为44</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    11&lt;&lt;2 --&gt; 44</span></span><br><span class="line"><span class="string">    过程：11*2^2=44</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(type(x), x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &gt;&gt;右移位运算符，</span></span><br><span class="line"><span class="comment"># 88二进制为1011000</span></span><br><span class="line">y = <span class="number">88</span> &gt;&gt; <span class="number">2</span>  <span class="comment"># 在2的二进制数尾部去掉两个数，结果为10110，转换输出为22</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    88 &lt;&lt; 2 --&gt; 22</span></span><br><span class="line"><span class="string">    过程：88/2^2=22</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(type(y), y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 &lt;&lt;  &gt;&gt;的变化规律总结</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    左移：m&lt;&lt;n     m*2的n次方</span></span><br><span class="line"><span class="string">    右移：m&gt;&gt;n     m//2的n次方    （//代表整除、取整）</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h1><ol><li><p>符号：<code>is</code>    <code>not is</code></p></li><li><p>作用：比较两个对象的存储单元，即计较id()是否相同</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span></span><br><span class="line">age1 = <span class="number">18</span></span><br><span class="line"><span class="comment"># 输出变量的存储地址和变量，发现地址相同，因为值相同</span></span><br><span class="line">print(id(age), age)</span><br><span class="line">print(id(age1), age1)</span><br><span class="line">print(age <span class="keyword">is</span> age1)</span><br></pre></td></tr></table></figure></li></ol><h1 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h1><ol><li><p>符号：<code>in</code>    <code>not in</code></p></li><li><p>作用：判断内容是否在指定序列中，返回bool值</p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'abcd123456'</span></span><br><span class="line">b = <span class="string">'2'</span></span><br><span class="line">c = <span class="string">'2a'</span></span><br><span class="line">print(b <span class="keyword">in</span> a)</span><br><span class="line">print(c <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br></pre></td></tr></table></figure></li></ol><h1 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h1><ol><li><p>别名：三元运算符（三个元素），通用格式：<code>表达式 ? 真 : 假</code>（python不支持）</p></li><li><p>python格式：<code>真 if 表达式 else 假</code></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num_0 = <span class="number">6</span></span><br><span class="line">num_1 = <span class="number">8</span></span><br><span class="line">result_0 = (num_0 + num_1) <span class="keyword">if</span> num_0 &lt; num_1 <span class="keyword">else</span> (num_0 - num_1)</span><br><span class="line">print(result_0)</span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">num_2 = <span class="number">66</span></span><br><span class="line">num_3 = int(input(<span class="string">'请输入整数：'</span>))</span><br><span class="line">result_1 = <span class="string">'正数'</span> <span class="keyword">if</span> (num_2 - num_3) &gt;= <span class="number">0</span> <span class="keyword">else</span> <span class="string">'负数'</span>, num_2 - num_3</span><br><span class="line">print(<span class="string">'输出数字类型：'</span>, result_1, type(result_1))</span><br></pre></td></tr></table></figure></li></ol><h1 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h1><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">**</td><td align="left">指数 (最高优先级)</td></tr><tr><td align="left">~ + -</td><td align="left">按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)</td></tr><tr><td align="left">* / % //</td><td align="left">乘，除，取模和取整除</td></tr><tr><td align="left">+ -</td><td align="left">加法减法</td></tr><tr><td align="left">&gt;&gt; &lt;&lt;</td><td align="left">右移，左移运算符</td></tr><tr><td align="left">&amp;</td><td align="left">位 ‘AND’</td></tr><tr><td align="left">^ |</td><td align="left">位运算符</td></tr><tr><td align="left">&lt;= &lt; &gt; &gt;=</td><td align="left">比较运算符</td></tr><tr><td align="left">&lt;&gt; == !=</td><td align="left">等于运算符</td></tr><tr><td align="left">= %= /= //= -= += <em>= *</em>=</td><td align="left">赋值运算符</td></tr><tr><td align="left">is is not</td><td align="left">身份运算符</td></tr><tr><td align="left">in not in</td><td align="left">成员运算符</td></tr><tr><td align="left">not and or</td><td align="left">逻辑运算符</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3字符串内建函数的用法(三)</title>
      <link href="/posts/1ca1b1c8/"/>
      <url>/posts/1ca1b1c8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="note danger">            <p>注意：以下操作，仅限于字符串的内建函数</p>          </div><h1 id="字符串增删改查"><a href="#字符串增删改查" class="headerlink" title="字符串增删改查"></a>字符串增删改查</h1><h2 id="字符串的增加"><a href="#字符串的增加" class="headerlink" title="字符串的增加"></a>字符串的增加</h2><ul><li>内建函数：<code>str.join()</code></li><li>作用：<ol><li>在字符串内加入<strong>任意字符</strong>，作为<strong>分隔符</strong></li><li>在<code>list</code>中可输入空值<code>&#39;&#39;</code>合并<code>list</code>为<code>str</code></li></ol></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'abcd'</span></span><br><span class="line">result = <span class="string">'--'</span>.join(s)    <span class="comment">#对字符串的元素进行添加，并分隔</span></span><br><span class="line">print(<span class="string">'加入分隔符后的结果：'</span>,result)</span><br><span class="line"><span class="comment"># 对列表中的元素进行合并转换  list--&gt;str</span></span><br><span class="line">list0 = [<span class="string">'a'</span>,<span class="string">'d'</span>,<span class="string">'m'</span>,<span class="string">'in'</span>]</span><br><span class="line">result = <span class="string">''</span>.join(list0)</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(<span class="string">'原始数据：'</span>,list0,type(list0))</span><br><span class="line">print(<span class="string">'join([arg])结果：'</span>,result,type(result))</span><br></pre></td></tr></table></figure><h2 id="字符串的删除"><a href="#字符串的删除" class="headerlink" title="字符串的删除"></a>字符串的删除</h2><ul><li><p>内建函数：<code>str.strip()</code>、<code>str.lstrip()</code>、<code>str.rstrip()</code></p></li><li><p>作用：</p><ol><li><p><code>strip()</code>：截取、删除<code>str</code><strong>左右两边</strong>的<strong>空格</strong>和<strong>指定字符</strong>，不能删除中间的字符</p></li><li><p><code>lstrip()</code>：只作用于左边</p></li><li><p><code>rstrip()</code>：只作用于右边</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># strip()              中文翻译：除去、脱光、扒光</span></span><br><span class="line">s = <span class="string">'《--&gt;my--name is \'admin\'!--'</span>  <span class="comment"># \转义</span></span><br><span class="line">result = s.strip(<span class="string">'!《&gt;-'</span>)  <span class="comment"># srtip()调用</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">print(<span class="string">'原始数据：'</span>, s)</span><br><span class="line">print(<span class="string">'str.strip()后的结果：'</span>, result)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="字符串的修改"><a href="#字符串的修改" class="headerlink" title="字符串的修改"></a>字符串的修改</h2><ol><li><p>方式一：</p><ul><li><p>内建函数：<code>str.replace()</code></p></li><li><p>格式：<code>str.replace(old,new,[max])</code>   [max]：表示最大值，直接输入int型（数字），不需要加[]</p></li><li><p>作用：将字符串中的指定元素，替换为新的元素，并指定最大替换数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'find rfind lfind index rindex lindex replace'</span></span><br><span class="line">print(<span class="string">'s原始长度：'</span>, len(s), <span class="string">'\ns原始数据：'</span>, s)</span><br><span class="line"><span class="comment"># 全部替换</span></span><br><span class="line">result = s.replace(<span class="string">' '</span>, <span class="string">'-'</span>)  <span class="comment"># 不指定替换个数，默认全部替换</span></span><br><span class="line">print(<span class="string">'全部替换后的结果：'</span>, result)</span><br><span class="line"><span class="comment"># 部分替换</span></span><br><span class="line">result = s.replace(<span class="string">' '</span>, <span class="string">'#'</span>, <span class="number">3</span>)  <span class="comment"># 指定最大替换数量为3，即前三个字符被替换（从左到右）</span></span><br><span class="line">print(<span class="string">'部分替换后的结果：'</span>, result)</span><br><span class="line"><span class="comment"># 截取后再替换</span></span><br><span class="line">print(<span class="string">'截取原始数据后再替换：'</span>, s[<span class="number">10</span>:<span class="number">-10</span>].replace(<span class="string">' '</span>, <span class="string">'@'</span>))  <span class="comment"># 截取后再替换并输出</span></span><br></pre></td></tr></table></figure></li><li><p>练习：删除指定字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">s1 = input(<span class="string">'请输入内容：'</span>)</span><br><span class="line">s2 = input(<span class="string">'请输入要删除的字符（无需分割符，连续写即可）：'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一（推荐）：</span></span><br><span class="line"><span class="comment"># 思路：遍历s2的每个元素，一一对应判断，将s1和s2中共有的元素替换为‘’空值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s2:</span><br><span class="line">    <span class="comment"># print(i,end='')</span></span><br><span class="line">    s1 = s1.replace(i, <span class="string">''</span>)</span><br><span class="line"><span class="comment"># print('')</span></span><br><span class="line">print(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：</span></span><br><span class="line"><span class="comment"># 思路：新建s3，遍历s1，判断s1中的元素在s2中是否存在，若存在不输出，不存在依次添加到s3，最后将s3赋值给s1(或者直接输出s3，无需赋值)</span></span><br><span class="line">s3 = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s1:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> s2:</span><br><span class="line">        s3 += i</span><br><span class="line"><span class="comment"># s1 = s3</span></span><br><span class="line"><span class="comment"># print(s1)</span></span><br><span class="line">print(s3)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方式二：</p><ul><li><p>内建函数：<code>str.split()</code></p></li><li><p>格式：<code>str.split(value)</code></p></li><li><p>作用：指定字符分隔str，并将分隔后的字符串放入list中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split()      str--&gt;list</span></span><br><span class="line">s = <span class="string">'my name  is admin '</span>  <span class="comment"># 字符串中间有两个空格、末尾有一个空格</span></span><br><span class="line">result = s.split(<span class="string">' '</span>)</span><br><span class="line">print(<span class="string">'原始数据：'</span>, s)</span><br><span class="line">print(<span class="string">'split()结果：'</span>, result)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="字符串的查询"><a href="#字符串的查询" class="headerlink" title="字符串的查询"></a>字符串的查询</h2><ol><li><p>bool查找</p><ul><li><p>关键字：<code>in</code></p></li><li><p>作用：判断指定内容是否在<code>str</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'she is a very beautiful girl end'</span></span><br><span class="line">print(<span class="string">'字符串总长（起始位置：0）：'</span>, len(s))</span><br><span class="line">print(<span class="string">'in关键字判断结果：'</span>, <span class="string">'girl'</span> <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>内容查找</p><ul><li><p>内建函数：<code>str.find()</code>、<code>str.lfind()</code>、<code>str.rfind()</code></p></li><li><p>格式：<code>str.find(&#39;str&#39;, start, end)</code></p></li><li><p>作用：查找<strong>指定内容</strong>，并指定<strong>开始</strong>和<strong>结束</strong>的位置，若<strong>存在</strong>，则返回出现指定内容的<strong>下标</strong>；若<strong>不存在</strong>，则返回<code>-1</code>；不指定位置，默认值查找<strong>第一次</strong>出现的位置（默认从左到右）；<code>rfind()</code>表示从右开始查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'she is a very beautiful girl end'</span></span><br><span class="line">result = s.find(<span class="string">'e'</span>)</span><br><span class="line">print(<span class="string">'原始数据：'</span>, s)</span><br><span class="line">print(<span class="string">'find()查找后的结果：'</span>, result)</span><br><span class="line"><span class="comment"># find('str',start,end)指定开始结束位置查找</span></span><br><span class="line">result0 = s.find(<span class="string">'e'</span>, <span class="number">15</span>, <span class="number">29</span>)  <span class="comment"># 起始位--&gt;结束位  [,)，左闭右开</span></span><br><span class="line">print(<span class="string">'find(\'e\',15,29)指定开始结束位置查找结果：'</span>, result0)</span><br><span class="line">print(<span class="string">'find(\'e\',result+1)指定开始位置查找结果：'</span>, s.find(<span class="string">'e'</span>, result + <span class="number">1</span>)) <span class="comment"># 如果不写end位置，默认到字符串结束位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 截取网址末尾的文件名</span></span><br><span class="line">s = <span class="string">'www.dgtmro.com/uploads/source/42/img/test.jpg'</span></span><br><span class="line">print(<span class="string">'字符串总长：'</span>, len(s))</span><br><span class="line">result1 = s.rfind(<span class="string">'/'</span>)</span><br><span class="line">print(<span class="string">'字符串中最后出现"/"的地址：'</span>, result1)</span><br><span class="line">print(s[result1 + <span class="number">1</span>:])  <span class="comment"># 默认截取是[,)区间，所以向前一位截取</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>下标查找</p><ul><li><p>内建函数：<code>str.index()</code>、<code>str.lindex()</code>、<code>str.rindex()</code></p></li><li><p>格式：<code>str.index(&#39;str&#39;, start, end)</code></p></li><li><p>作用：查找<strong>指定内容</strong>，并指定<strong>开始</strong>和<strong>结束</strong>的位置，若<strong>存在</strong>，则返回出现指定内容的<strong>下标</strong>；若<strong>不存在</strong>，则<strong>报错</strong>ValueError；不指定位置，默认值查找<strong>第一次</strong>出现的位置（默认从左到右）；<code>rindex()</code>表示从右开始查找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'www.dgtmro.com/uploads/source/a/42/img/test.jpg'</span></span><br><span class="line">print(<span class="string">'index()查找结果：'</span>, s.index(<span class="string">'a'</span>, <span class="number">20</span>))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>元素次数统计</p><ul><li><p>内建函数：<code>count()</code></p></li><li><p>格式：<code>str.count(&#39;str&#39;, begin, end)</code></p></li><li><p>作用：查找<strong>指定内容</strong>，并指定<strong>开始</strong>和<strong>结束</strong>的位置，最后返回出现指定内容的<strong>次数</strong>；若不指定开始和结束的位置，默认从头到尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'my name is admin'</span></span><br><span class="line">result = s.count(<span class="string">'m'</span>, <span class="number">0</span>, len(s))  <span class="comment"># count('str',begin,end)表示：确认查找的str，开头至结束，可不写，默认</span></span><br><span class="line">print(<span class="string">'原始数据：'</span>, s)</span><br><span class="line">print(<span class="string">'count(\'m\',start,end)输出结果：'</span>, result)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="字符串编码与解码"><a href="#字符串编码与解码" class="headerlink" title="字符串编码与解码"></a>字符串编码与解码</h1><ol><li><p>编码</p><ul><li>内建函数：<code>encode()</code></li><li>格式：<code>str.encode(&#39;utf-8&#39;)</code></li></ul></li><li><p>解码</p><ul><li>内建函数：<code>decode()</code></li><li>格式：<code>str.decode(&#39;utf-8&#39;)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gbk：中文gb2312：简体中文</span></span><br><span class="line">msg = <span class="string">'这是中文！'</span></span><br><span class="line">print(<span class="string">'原始数据：'</span>, msg)</span><br><span class="line"><span class="comment"># 编码encode</span></span><br><span class="line">result = msg.encode(<span class="string">'utf-8'</span>)  <span class="comment"># 将中文格式的内容进行编码问题</span></span><br><span class="line">print(<span class="string">'utf-8编码后：'</span>, result)</span><br><span class="line"><span class="comment"># 解码decode    网络应用（中文一般会涉及编码）</span></span><br><span class="line">result = result.decode(<span class="string">'utf-8'</span>)  <span class="comment"># 对编码后的内容进行解码</span></span><br><span class="line">print(<span class="string">'utf-8解码后：'</span>, result)</span><br><span class="line"><span class="comment"># 输出结果：b'\xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\xad\xe6\x96\x87\xef\xbc\x81'</span></span><br><span class="line"><span class="comment"># b表示binary二进制，系统会自动转换为01</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="字母大小写转换"><a href="#字母大小写转换" class="headerlink" title="字母大小写转换"></a>字母大小写转换</h1><ul><li><p>内建函数：</p><ol><li><code>upper()</code>全部字母大写     <code>lower()</code>全部字母小写     <code>title()</code>每个单词首字母大写    <code>capitalize()</code>首字母大写</li><li><code>isupper()</code>   <code>islower()</code>   <code>istitle()</code> 检查字符串中的内容是否为相应的格式，返回<code>bool</code>值</li></ol></li><li><p>格式：<code>str.upper()</code>、<code>str.islower()</code> （不需要加参数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'my name is Admin'</span></span><br><span class="line">result = s.title()</span><br><span class="line">print(<span class="string">'大小写转换后的结果：'</span>, result)</span><br><span class="line"></span><br><span class="line">message = <span class="string">'she is a very beautiful girl'</span></span><br><span class="line">msg = message.capitalize()      <span class="comment"># 将字符串中的第一个字符转换成大写的标识形式</span></span><br><span class="line">print(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># istitle()返回bool值True、False，是判断字符串中每个单词的首字母是否大写的</span></span><br><span class="line">msg = message.istitle()</span><br><span class="line">print(msg)</span><br><span class="line"></span><br><span class="line">msg = message.title()      <span class="comment"># 将字符串中的每个单词的首字母转换成大写的标识形式</span></span><br><span class="line">print(msg)</span><br><span class="line"></span><br><span class="line">result = msg.istitle()</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">result = message.upper()      <span class="comment"># 将字符串中的所有字符转换成大写的标识形式</span></span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">msg = message.lower()      <span class="comment"># 将字符串中的所有字符转换成小写的标识形式</span></span><br><span class="line">print(msg)</span><br></pre></td></tr></table></figure></li><li><p>循环转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'Ak99UtG55GuytG66G'</span></span><br><span class="line"><span class="comment"># 思路：    定义空str（用来依次放入str中的元素）--&gt;for...in...遍历str--&gt;判断元素（三种类型：大写，小写，没有大小写：例如数字）</span></span><br><span class="line"><span class="comment">#           --&gt;判断后转换并赋值--&gt;输出最后的结果</span></span><br><span class="line">ss = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="keyword">if</span> i.isupper():</span><br><span class="line">        ss += i.lower()</span><br><span class="line">    <span class="keyword">elif</span> i.islower():</span><br><span class="line">        ss += i.upper()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ss += i</span><br><span class="line">print(ss)</span><br></pre></td></tr></table></figure></li><li><p>练习：</p><ol><li>单词每个字母都是小写字母</li><li>单词没有连续相等的字母</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">words</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 输入内容</span></span><br><span class="line">    word = input(<span class="string">'请输入一个单词：'</span>)</span><br><span class="line">    <span class="comment"># 将单词每个字母进行循环，判断是不是大写[A-Z]</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word)):</span><br><span class="line">        <span class="comment"># if word[i] &gt;= 'A' and word[i] &lt;= 'Z':</span></span><br><span class="line">        <span class="keyword">if</span> word[i].isupper():</span><br><span class="line">            print(<span class="string">'字母有大写！不喜欢这个单词！'</span>)</span><br><span class="line">            <span class="comment"># 判断结束直接终止循环，跳出函数</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="comment"># 对单词的相邻字母是否一样进行判断</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word)):</span><br><span class="line">        <span class="comment"># 系统是从0开始，len()是从1开始，所有-1</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; len(word) - <span class="number">1</span> <span class="keyword">and</span> word[i] == word[i + <span class="number">1</span>]:</span><br><span class="line">            print(<span class="string">'这个单词是叠词！不喜欢！'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'我喜欢这个单词！'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">words()</span><br></pre></td></tr></table></figure></li></ul><h1 id="判断开始和结尾"><a href="#判断开始和结尾" class="headerlink" title="判断开始和结尾"></a>判断开始和结尾</h1><ol><li><p>开始：</p><ul><li><p>内建函数：<code>startswith()</code></p></li><li><p>格式：<code>str.startswith(&#39;str&#39;, start, end)</code>，返回<code>bool</code>值（True / False）</p></li><li><p>若不指定开始位置和结束位置，默认<strong>从左到右</strong>开始匹配；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s0 = <span class="string">'hellow！Hi！'</span></span><br><span class="line">result = s0.startswith(<span class="string">'H'</span>, <span class="number">7</span>)</span><br><span class="line">print(<span class="string">'startswith()结果：'</span>, result)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>结尾</p><ul><li><p>内建函数：<code>endswith()</code></p></li><li><p>格式：<code>str.endswith(&#39;str&#39;, start, end)</code></p></li><li><p>若不指定开始位置和结束位置，默认<strong>从右到左</strong>开始匹配；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_name = <span class="string">'test.jpg'</span></span><br><span class="line">result0 = file_name.endswith(<span class="string">'jpg'</span>)</span><br><span class="line">print(<span class="string">'endswith()结果：'</span>, result0)</span><br></pre></td></tr></table></figure></li><li><p>应用（文件上传）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用：文件上传    只能上传的图片类型（jpg,png,gif,bmp）</span></span><br><span class="line">print(<span class="string">r'C:\\uploads\source\42\img\test.jpg'</span>)</span><br><span class="line">user_input = input(<span class="string">'请复制上面的路径：'</span>)</span><br><span class="line">print(<span class="string">'你输入的路径长度为：'</span>, len(user_input))</span><br><span class="line"></span><br><span class="line">s = user_input.rfind(<span class="string">'\\'</span>)</span><br><span class="line">print(<span class="string">'文件开始的开始位置：'</span>, s + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">result = user_input[s + <span class="number">1</span>:]  <span class="comment"># 获取文件名全称</span></span><br><span class="line">print(<span class="string">'获取到的文件：'</span>, result)</span><br><span class="line"><span class="keyword">if</span> result.endswith(<span class="string">'jpg'</span>) <span class="keyword">or</span> result.endswith(<span class="string">'png'</span>):</span><br><span class="line">    print(<span class="string">'属于图片类型，可以上传！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'禁止上传！只能上传图片类型！'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="判断数字和字母"><a href="#判断数字和字母" class="headerlink" title="判断数字和字母"></a>判断数字和字母</h1><ol><li><p>作用：判断str中的所有元素，属于数字还是字母</p></li><li><p>内建函数：<code>isdigit()</code>是否为数字、<code>isalpha()</code> 是否为字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># isalpha()</span></span><br><span class="line">s = <span class="string">'abc8'</span></span><br><span class="line">result = s.isalpha()</span><br><span class="line">print(<span class="string">'s.isaplha()是否全是字符类型：'</span>, result)</span><br><span class="line"><span class="comment"># isdigit()</span></span><br><span class="line">s01 = <span class="string">'888'</span>  <span class="comment"># True</span></span><br><span class="line">s02 = <span class="number">888</span>  <span class="comment"># 报错，非字符串类型</span></span><br><span class="line">s03 = <span class="string">'3.14'</span>  <span class="comment"># False</span></span><br><span class="line">result = s01.isdigit()</span><br><span class="line">print(<span class="string">'s.isdigit()是否全是数字类型：'</span>, result)</span><br></pre></td></tr></table></figure></li><li><p>练习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三次循环累加（数字累加游戏）</span></span><br><span class="line">print(<span class="string">'''</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string">    数字累加游戏</span></span><br><span class="line"><span class="string">********************</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt;= <span class="number">3</span>:</span><br><span class="line">    print(<span class="string">'请输入第&#123;&#125;个'</span>.format(i), end=<span class="string">''</span>)</span><br><span class="line">    user_input = input(<span class="string">'数：'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> user_input.isdigit():  <span class="comment"># 引用isdigit()来进行判断</span></span><br><span class="line">        a = int(user_input) <span class="comment"># 转换为int()类型</span></span><br><span class="line">        sum += a <span class="comment"># sum = sum + a</span></span><br><span class="line">        print(<span class="string">'前&#123;&#125;个数的和为：'</span>.format(i), sum)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'第&#123;&#125;个输入的内容不正确，请重新输入！'</span>.format(i))</span><br><span class="line">print(<span class="string">'总和为：'</span>, sum)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3字符串的用法(二)</title>
      <link href="/posts/625291e3/"/>
      <url>/posts/625291e3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="字符串可用符号"><a href="#字符串可用符号" class="headerlink" title="字符串可用符号"></a>字符串可用符号</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+               合并字符串</span><br><span class="line">*               字符重复使用</span><br><span class="line">[]              字符串的下标，可用来截取字符串中的元素,[::]</span><br><span class="line"><span class="keyword">in</span> 或 <span class="keyword">not</span> <span class="keyword">in</span>    判断字符串中是否存在某元素</span><br><span class="line"><span class="keyword">is</span> 或 <span class="keyword">not</span> <span class="keyword">is</span>    判断字符串id是否相同</span><br></pre></td></tr></table></figure><h1 id="定义字符串"><a href="#定义字符串" class="headerlink" title="定义字符串"></a>定义字符串</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str_0 = <span class="string">'abc'</span></span><br><span class="line">str_1 = <span class="string">"abc"</span></span><br><span class="line">str_2 = <span class="string">'''             </span></span><br><span class="line"><span class="string">--&gt;abc</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="输出字符串"><a href="#输出字符串" class="headerlink" title="输出字符串"></a>输出字符串</h1><ul><li>单双引号存储位置、占用空间一样</li><li>三引号在换行情况下，需要保留原有的格式，所以占用空间与单双引号不同；三引号在同一行使用无意义</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'str_0：'</span>,str_0,id(str_0))     </span><br><span class="line">print(<span class="string">'str_1：'</span>,str_1,id(str_1))</span><br><span class="line">print(<span class="string">'str_2：'</span>,str_2,id(str_2))</span><br></pre></td></tr></table></figure><h1 id="符号-的用法"><a href="#符号-的用法" class="headerlink" title="符号 + * 的用法"></a>符号 + * 的用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串的连接、拼接 +</span></span><br><span class="line">say = <span class="string">'my'</span></span><br><span class="line">msg = <span class="string">'friend'</span></span><br><span class="line">print(say + msg)</span><br><span class="line"><span class="comment"># 字符串的重复使用 *</span></span><br><span class="line">print(msg * <span class="number">3</span>) <span class="comment"># 重复三遍</span></span><br></pre></td></tr></table></figure><h1 id="is和not-is的用法"><a href="#is和not-is的用法" class="headerlink" title="is和not is的用法"></a>is和not is的用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较三种str类型</span></span><br><span class="line">str_0 = <span class="string">'abc'</span></span><br><span class="line">str_1 = <span class="string">"abc"</span></span><br><span class="line">str_2 = <span class="string">'''             </span></span><br><span class="line"><span class="string">--&gt;abc</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">msg1 = <span class="string">'abc'</span></span><br><span class="line">msg2 = <span class="string">'abc'</span></span><br><span class="line">msg3 = <span class="string">'abc'</span></span><br><span class="line">print(<span class="string">'---&gt;&gt;&gt;&gt;'</span>, msg2 <span class="keyword">is</span> msg3)</span><br><span class="line">print(str_1 <span class="keyword">is</span> msg1) <span class="comment"># True</span></span><br><span class="line">print(str_0 == str_1)       <span class="comment"># ==比较的是变量的内容</span></span><br><span class="line">print(str_0 <span class="keyword">is</span> str_1)       <span class="comment"># is比较的是变量的地址</span></span><br><span class="line">print(str_0 == str_2)</span><br><span class="line">print(str_0 <span class="keyword">is</span> str_2)</span><br></pre></td></tr></table></figure><h1 id="in和not-in的用法"><a href="#in和not-in的用法" class="headerlink" title="in和not in的用法"></a>in和not in的用法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str_3 = <span class="string">'abcd'</span></span><br><span class="line">print(<span class="string">'》》》'</span>, <span class="string">'a'</span> <span class="keyword">in</span> str_3)</span><br><span class="line">print(<span class="string">'》》》'</span>, <span class="string">'ac'</span> <span class="keyword">in</span> str_3)</span><br><span class="line">print(<span class="string">'》》》'</span>, <span class="string">'ac'</span> <span class="keyword">not</span> <span class="keyword">in</span> str_3)</span><br></pre></td></tr></table></figure><h1 id="符号-的用法-1"><a href="#符号-的用法-1" class="headerlink" title="符号[ ]的用法"></a>符号[ ]的用法</h1><ul><li><code>[]</code>是截取第几位；<code>[:]</code>是截取一个区间<code>[ )</code>（包左不包右）；<code>[::]</code>是按照顺序截取的，第三个参数为-1就是倒序，2就是正序隔一个字符取值，-2就是倒序之后再隔一个字符取值</li><li><code>[::-1]</code>可表示字符串倒序输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">str_4 = <span class="string">'abc.jpg'</span></span><br><span class="line">print(<span class="string">'++++++++++++++++'</span>, str_4[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># str_4[2:4]--&gt;类似rang(2,4)--&gt;[2,4)</span></span><br><span class="line">print(str_4[<span class="number">2</span>:<span class="number">4</span>]) <span class="comment"># 从index=2位置开始，index=4位置结束</span></span><br><span class="line">print(str_4[<span class="number">2</span>:<span class="number">-3</span>]) <span class="comment"># 从2位置开始，-3位置结束</span></span><br><span class="line">print(<span class="string">'负数截取：'</span>, str_4[<span class="number">-4</span>:<span class="number">-1</span>]) <span class="comment"># 从-4位置开始，-1位置结束</span></span><br><span class="line">print(str_4[::<span class="number">-1</span>])  <span class="comment"># 从-1位置开始倒序排列，前两个参数不写，默认开始到结尾(start:end)</span></span><br><span class="line">print(str_4[:<span class="number">-1</span>]) <span class="comment"># 从index=0位置开始，-1位置结束（不包括-1位置的元素）</span></span><br><span class="line">print(<span class="string">'&gt;&gt;&gt;'</span>, str_4[<span class="number">-1</span>:<span class="number">-4</span>:<span class="number">-1</span>])</span><br></pre></td></tr></table></figure><h1 id="字符串的截取"><a href="#字符串的截取" class="headerlink" title="字符串的截取"></a>字符串的截取</h1><ul><li>可以使用索引，获取字符串中的每一个字符，在字符串中，每一个字符都有一个索引，即下标</li><li>程序中数数，是从<code>0</code>开始数的，即第一位字符是的<code>index</code>为<code>0</code>，即<code>index=0</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个字符截取</span></span><br><span class="line">msg = <span class="string">'friend'</span></span><br><span class="line">print(msg[<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 多个字符截取</span></span><br><span class="line"><span class="comment"># 计算开始到结束时，遵循左闭右开的原则[ ),即包含左面的，不包含右面的，例如，str[2:4]是截取两位</span></span><br><span class="line">msg11 = <span class="string">"我会变强的！"</span></span><br><span class="line">start = <span class="number">2</span></span><br><span class="line">end = <span class="number">4</span></span><br><span class="line">print(msg11[start: end])</span><br><span class="line"><span class="comment"># 索引支持负数，负索引是从-1开始的</span></span><br><span class="line">msg2 = <span class="string">"再给我一点时间！"</span></span><br><span class="line">print(msg2[:<span class="number">3</span>])  <span class="comment"># 不写开始的位置，默认从0开始</span></span><br><span class="line">print(msg2[<span class="number">-3</span>:])  <span class="comment"># 负数也是同理，默认到最后一个位置结束（包括最后一位元素）</span></span><br><span class="line">print(msg2[:<span class="number">-1</span>])</span><br><span class="line">print(msg2[:])  <span class="comment"># 开始结束都不写，代表输出全部</span></span><br></pre></td></tr></table></figure><h1 id="字符串的格式化输出"><a href="#字符串的格式化输出" class="headerlink" title="字符串的格式化输出"></a>字符串的格式化输出</h1><ol><li><p>格式化字符串（string）</p><ul><li><p>占位符：<code>%s</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sex = <span class="string">"男"</span></span><br><span class="line">age = <span class="string">"18"</span></span><br><span class="line">age_int = <span class="number">18</span></span><br><span class="line">print(<span class="string">"我性别是%s,今年是%s岁！"</span> % (sex, age))</span><br><span class="line">print(<span class="string">"我性别是%s,今年是%s岁！"</span> % (sex, age_int))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>格式化整型（digit）</p><ul><li><p>占位符：<code>%d</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sex = <span class="string">"男"</span></span><br><span class="line">age_int = <span class="number">18</span></span><br><span class="line">print(<span class="string">"我性别是%s,今年是%d岁！"</span> % (sex, age_int))</span><br></pre></td></tr></table></figure></li></ul></li><li><p>格式化浮点数字</p><ul><li><p>占位符：<code>%f</code></p></li><li><p>可指定小数后的精度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="number">1.16</span></span><br><span class="line">print(<span class="string">"今年我的体重减少了%f公斤"</span> % (f))</span><br><span class="line">print(<span class="string">"今年我的体重减少了%f公斤"</span> % f)  <span class="comment"># 当变量只有一个时，可省略()</span></span><br><span class="line">print(<span class="string">"今年我的体重减少了%.1f公斤"</span> % f)  <span class="comment"># 在%后面加.1代表小数点后去一位，遵循5舍6入的原则</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>格式化变量</p><ul><li><p>占位符：<code>{}</code> 或 <code>{变量}</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># f 格式化输出变量</span></span><br><span class="line">name = <span class="string">'wlet'</span></span><br><span class="line">print(<span class="string">f'我的名字是：<span class="subst">&#123;name&#125;</span>！'</span>)  <span class="comment"># &#123;变量&#125; == 占位符，在字符串前必须加字符 f</span></span><br><span class="line"><span class="comment"># format 格式化输出变量</span></span><br><span class="line">age = <span class="number">88</span></span><br><span class="line">print(<span class="string">'我今年&#123;&#125;岁了！'</span>.format(age))  <span class="comment"># &#123;&#125; == 占位符</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>其他：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、字符串前加 u</span><br><span class="line">例：<span class="string">u"我是含有中文字符组成的字符串。"</span></span><br><span class="line">作用：后面字符串以 Unicode 格式 进行编码，一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、字符串前加 r</span><br><span class="line">例：<span class="string">r"\n\n\n\n”　　表示一个普通生字符串 \n\n\n\n，而不表示换行了。</span></span><br><span class="line"><span class="string">作用：</span></span><br><span class="line"><span class="string">去掉反斜杠的转移机制。</span></span><br><span class="line"><span class="string">（特殊字符：即那些，反斜杠加上对应字母，表示对应的特殊含义的，比如最常见的”\n”表示换行，”\t”表示Tab等。 ）</span></span><br><span class="line"><span class="string">应用：常用于正则表达式，对应着re模块。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3、字符串前加 b</span></span><br><span class="line"><span class="string">例: response = b'Hello World!' b' ' 表示这是一个 bytes 对象</span></span><br><span class="line"><span class="string">作用：b"</span> <span class="string">"前缀表示：后面字符串是bytes 类型。</span></span><br><span class="line"><span class="string">用处：网络编程中，服务器和浏览器只认bytes 类型数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、字符串前加 f</span></span><br><span class="line"><span class="string">作用：以f开头表示在字符串内支持大括号内的python 表达式</span></span><br><span class="line"><span class="string">例：print(f'学号：&#123;row[0]&#125;', end='  ')</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3变量与输出的用法(一)</title>
      <link href="/posts/cd630a81/"/>
      <url>/posts/cd630a81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ol><li><p>python介绍：</p><ul><li>python是一门弱类型语言</li><li>弱类型：声明的变量赋什么值，就是什么类型</li><li>变量命名规范：只能用<strong>字母</strong>、<strong>数字</strong>、<strong>下划线</strong></li></ul></li><li><p>定义变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">float01 = <span class="number">99.9</span>  <span class="comment"># float类型</span></span><br><span class="line">int01 = <span class="number">6</span>  <span class="comment"># int类型</span></span><br><span class="line">str01 = <span class="string">'乐逍遥'</span>  <span class="comment"># str类型</span></span><br><span class="line">list01 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># list类型</span></span><br><span class="line">tuple01 = (<span class="string">'a'</span>, <span class="number">2</span>, <span class="string">'test'</span>)  <span class="comment"># tuple类型</span></span><br><span class="line">dict01 = &#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'age'</span>: <span class="number">66</span>, <span class="string">'sex'</span>: <span class="string">'男'</span>&#125;  <span class="comment"># dict类型</span></span><br><span class="line">set01 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">2</span>&#125;  <span class="comment"># set类型</span></span><br></pre></td></tr></table></figure></li><li><p>输出变量：</p><ul><li><p>单个输出：<code>print(float01)</code>、<code>print(set01)</code></p></li><li><p>多个输出：</p><ul><li><p>用<code>\n</code>换行符，下一行的行首会有一个空格</p></li><li><pre><code class="python">print(float01, <span class="string">'\n'</span>, int01, <span class="string">'\n'</span>, str01, <span class="string">'\n'</span>, list01, <span class="string">'\n'</span>, tuple01, <span class="string">'\n'</span>, dict01, <span class="string">'\n'</span>, set01)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 解决办法：</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  print(float01, int01, str01, list01, tuple01, dict01, set01, sep&#x3D;&#39;\n&#39;)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li><li><p>查看变量类型：<code>print(float01, type(float01))</code>，输出变量并查看变量类型</p></li><li><p>查看python中的关键字：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keyword <span class="comment"># 导入keyword包</span></span><br><span class="line">print(keyword.kwlist) <span class="comment"># 以list的形式，输出python中的关键字</span></span><br></pre></td></tr></table></figure></li><li><p>练习一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'  ~~~'</span>)</span><br><span class="line">print(<span class="string">'   *'</span>)</span><br><span class="line">print(<span class="string">'  ***'</span>)</span><br><span class="line">print(<span class="string">' *****'</span>)</span><br><span class="line">print(<span class="string">'*******'</span>)</span><br><span class="line">print(<span class="string">' *****'</span>)</span><br><span class="line">print(<span class="string">'  ***'</span>)</span><br><span class="line">print(<span class="string">'   *'</span>)</span><br><span class="line">print(<span class="string">'  ~~~'</span>)</span><br></pre></td></tr></table></figure></li><li><p>练习二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">my_name = <span class="string">'乐天'</span></span><br><span class="line">print(<span class="string">'大家好！我是'</span>, my_name, <span class="string">'！'</span>)</span><br></pre></td></tr></table></figure></li><li><p>练习三：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name_aa = <span class="string">'《卧春》'</span></span><br><span class="line">name_a = <span class="string">'暗梅幽闻花，'</span></span><br><span class="line">name_b = <span class="string">'卧枝伤恨底，'</span></span><br><span class="line">name_c = <span class="string">'遥闻卧似水，'</span></span><br><span class="line">name_d = <span class="string">'易透达春绿。'</span></span><br><span class="line"></span><br><span class="line">print(name_aa)</span><br><span class="line">print(name_a)</span><br><span class="line">print(name_b)</span><br><span class="line">print(name_c)</span><br><span class="line">print(name_d)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"\n"</span>, name_aa, <span class="string">"\n"</span>, name_a, <span class="string">"\n"</span>, name_b, <span class="string">"\n"</span>, name_c, <span class="string">"\n"</span>, name_d)</span><br></pre></td></tr></table></figure></li></ol><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><ol><li><p>输出函数：<code>print()</code></p></li><li><p><code>print()</code>默认语法格式：<code>print(value1,value2,value3,...,sep=&#39; &#39;,end=&#39;\n&#39;)</code></p></li><li><p>直接输出内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">3.14</span>)</span><br><span class="line">print(<span class="number">5</span>)</span><br><span class="line">print(<span class="string">"hellow word！"</span>)</span><br><span class="line">print([<span class="string">'a'</span>, <span class="number">8</span>, <span class="number">3.14</span>, <span class="string">'b'</span>])</span><br><span class="line">print((<span class="string">'a'</span>, <span class="number">8</span>, <span class="number">3.14</span>, <span class="string">'b'</span>))</span><br><span class="line">print(&#123;<span class="string">'name'</span>: <span class="string">'jack'</span>, <span class="string">'age'</span>: <span class="number">66</span>, <span class="string">'sex'</span>: <span class="string">'男'</span>&#125;)</span><br><span class="line">print(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>单个变量输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name_a = <span class="string">"小乐"</span></span><br><span class="line">print(name_a)</span><br></pre></td></tr></table></figure></li><li><p>多个变量输出：</p><ul><li>当输出多个变量时，默认用空格分割，即：sep=’ ‘</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age_a = <span class="number">19</span></span><br><span class="line">gender_a = <span class="string">'boy'</span></span><br><span class="line">print(age_a, gender_a)  <span class="comment"># sep默认的分割是 空格</span></span><br></pre></td></tr></table></figure></li><li><p><code>sep=&#39; &#39;</code>的用法：</p><ul><li><p>默认<code>sep=&#39; &#39;</code>（值为空格），可自己选择替换<code>空格</code>的字符；若sep的值为空，即<code>sep=&#39;&#39;</code>，则变量之间无分割</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age_a = <span class="number">19</span></span><br><span class="line">gender_a = <span class="string">'boy'</span></span><br><span class="line">print(age_a, gender_a, sep=<span class="string">'--'</span>)  <span class="comment"># sep='*'，可自己选择替换 空格的字符，若sep的值为空，即sep=''，则变量之间无分割</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>end=&#39;\n&#39;</code>的用法：默认值为<code>\n</code>（换行），可选择替换<code>\n</code>的字符，若值为空，即<code>end=&#39;&#39;</code>，则变量输出不换行</p><ul><li><p>转义字符：\n 换行，python默认在每行输出语句结束后，加\n自动换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'第一行\n第二行'</span>)</span><br></pre></td></tr></table></figure></li><li><p>默认值为\n（换行），可选择替换\n的字符，若值为空，即end=’’，则变量输出不换行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'AAA'</span>, end=<span class="string">''</span>)  <span class="comment"># 'AAA\n' ---&gt; 'AAA'</span></span><br><span class="line">print(<span class="string">'BBB'</span>, end=<span class="string">''</span>)  <span class="comment"># 'BBB\n' ---&gt; 'BBB'</span></span><br><span class="line">print(<span class="string">'CCC'</span>, end=<span class="string">''</span>)  <span class="comment"># 'CCC\n' ---&gt; 'CCC'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>保留原样格式输出：</p><ul><li><p>将内容按照格式写在三引号中即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">message0 = <span class="string">'''</span></span><br><span class="line"><span class="string">亲爱的：</span></span><br><span class="line"><span class="string">    你好！</span></span><br><span class="line"><span class="string">    回家给我买一个地球玩玩！</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(message0)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>让转义字符不转义：</p><ul><li><p>直接在字符串前加 r 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">r'我给你们说句古诗文：\n窗子前头有月光，\n好像地上有银两！'</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>制表符的用法：\t</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'亲爱的用户：\n'</span>, <span class="string">'\t亲点击链接激活用户：激活用户！'</span>)</span><br></pre></td></tr></table></figure></li><li><p>将字符串中的关键字标出来，进行转义处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"今年'体重'又减少了2公斤"</span>)      <span class="comment">#使用单双引号转义处理</span></span><br><span class="line">print(<span class="string">'我想说："我真的很厉害"'</span>)       <span class="comment">#单双引号嵌套使用</span></span><br><span class="line">print(<span class="string">"今年\"体重\"又减少了2公斤"</span>)    <span class="comment">#使用\反斜杠进行转义</span></span><br><span class="line">print(<span class="string">'今年\'体重\'又减少了2公斤'</span>)    <span class="comment">#使用\反斜杠进行转义</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python3语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络协议知识</title>
      <link href="/posts/cef22fc4/"/>
      <url>/posts/cef22fc4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h1><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/Au3kgTLwBpn1dEG.png" alt="OSI_logo.jpg.png"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/OEDYp9gCMNe8Irx.png" alt="OSI_logo01.jpg"></p><ol><li><strong>OSI的划分</strong>：<ul><li>某一层的服务就是该层及下一层的功能，通过接口给上一层提供</li><li>各层所提供的服务和这些服务是怎么实现的无关（各层服务独立实现）</li></ul></li><li><strong>应用层</strong>：直接为计算机用户提供接口、各种网络服务；网络协议有：http、ftp、SMTP（电子邮件传输的协议）等</li><li><strong>表示层</strong>：对应用层数据的编码和转换功能，确保数据能被安全接收；数据压缩、加密属于转换功能</li><li><strong>会话层</strong>：建立、管理、维护，表示层实体的通信会话</li><li><strong>传输层</strong>：端到端的数据链接（传输）功能；（“端”指端口）；协议：TCP、UDP、 HTTPS</li><li><strong>网络层</strong>：通过IP寻址来建立两个节点之间的连接：路由器；协议：IP协议（internet的基础）</li><li><strong>数据链路层</strong>：位 / 比特流（bit），字节（byte），帧（0,1）<ul><li>1比特 = 一个二进制位（1帧）</li><li>1字节 = 8比特</li><li>1kb = 1024byte</li><li>1MB = 1024kb</li><li>1GB = 1024MB</li><li>1T = 1024GB</li></ul></li><li><strong>物理层</strong>：集线器、网线、电缆、中继器（看得见摸得着）</li></ol><h1 id="IP地址的分类及划分范围"><a href="#IP地址的分类及划分范围" class="headerlink" title="IP地址的分类及划分范围"></a>IP地址的分类及划分范围</h1><ul><li>互联网使用的是32位地址（Ipv4）</li></ul><ol><li><strong>IP地址格式</strong>：<ul><li>IP地址 = 网络地址 + 主机地址</li><li>IP地址 = 主机地址 + 子网地址 + 主机地址</li></ul></li><li><strong>A类</strong>（为大型网络设计）：<ul><li>格式：1个字节的网络地址 + 3个字节的主机地址</li><li>在A类中，网络地址的最高位必须是“0”；（1.0.0.0 ~ 127.0.0.0）；127个，每个可容纳1亿多主机</li><li>127.0.0.1为“本机地址localhost”，用于本地机器的测试</li><li>0 ~ 127（0：代表任何地址；127：代表回溯测试地址）；实际范围是：1 ~ 126；默认子网掩码为：255.0.0.0</li></ul></li><li><strong>B类</strong>：<ul><li>格式：2个字节的网络地址 + 2个字节的主机地址</li><li>在B类中，网络地址最高位必须是“10”；（128.0.0.0 ~ 191.255.255.255）；16382个，每个可容纳6万多主机</li><li>128 ~ 191（128.0.0.0和191.255.0.0为保留IP）；实际范围：128.1.0.0 ~ 191.254.0.0</li></ul></li><li><strong>C类</strong>：<ul><li>格式：3个字节的网络地址 + 1个字节的主机地址</li><li>在C类中，网络地址的最高位是“110”；（192.0.0.0 ~ 223.255.255.255）；209万多个，每个可容纳254台主机</li><li>192 ~ 223（192.0.0.0和223.255.255.0位保留IP）；实际范围：192.0.1.0 ~ 233.255.254.0</li><li>C类地址中的私有地址：192.168.0.0 ~ 192.168.255.255是私有地址</li></ul></li><li><strong>D类</strong>：<ul><li>多用于“多点广播（multicast）”</li><li>IP地址第一个字节以“1110”开始（专门保留的地址,并不指向特定的网络）</li><li>224.0.0.0 ~ 239.255.255.255</li></ul></li><li><strong>E类</strong>：<ul><li>以“11110”开始。为将来使用保留</li><li>240.0.0.0 ~ 255.255.255.254（255.255.255.255用于广播地址）</li></ul></li></ol><h1 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h1><ul><li>流程：<ol><li>第一步（客户端）：<code>SYN=1,ACK=0,seq=x</code></li><li>第二步（服务端）：<code>SYN=1,ACK=1,seq=y,ack=x+1</code></li><li>第三步（客户端）：<code>ACK=1,seq=x+1,ack=y+1</code></li></ol></li><li>功能介绍：<ol><li><strong>SYN</strong>：代表请求创建连接</li><li><strong>ACK</strong>：代表确认接受</li><li><strong>seq</strong>：代表序列号</li><li><strong>ack</strong>：代表下一个“数据包”的编号；<code>ack=seq+1</code></li></ol></li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/F2OXhesoJEAiaNK.jpg" alt="sanciwoshou.jpg"></p><h1 id="四次分手"><a href="#四次分手" class="headerlink" title="四次分手"></a>四次分手</h1><ul><li>流程：<ol><li>第一步（客户端）：<code>FIN=1,seq=x</code></li><li>第二步（服务端）：<code>ACK=1,seq=y,ack=x+1</code> 和 <code>FIN=1,seq=z,ack=x+1</code>（2个包同时发出）</li><li>第三步（客户端）：<code>ACK=1,seq=x+1,ack=z+1</code></li></ol></li><li>功能介绍：<ul><li><strong>FIN</strong>：代表请求关闭连接（“四次分手时”，TCP的连接是双向的，所以，一个FIN只能关闭一个方向）</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/27/Ogkcm325HEAFI7N.png" alt="sicifenshou.png"></p><h1 id="TCP协议与UDP协议传输的区别"><a href="#TCP协议与UDP协议传输的区别" class="headerlink" title="TCP协议与UDP协议传输的区别"></a>TCP协议与UDP协议传输的区别</h1><ol><li>基于连接与无连接</li><li>对系统资源的要求（TCP较多，UDP较少）</li><li>UDP程序结构较简单</li><li>流模式与数据报模式</li><li>TCP保证数据的正确性，UDP可能丢包；TCP保证数据顺序，UDP不保证 </li></ol><h1 id="http请求方式（8种）"><a href="#http请求方式（8种）" class="headerlink" title="http请求方式（8种）"></a>http请求方式（8种）</h1><ol><li><strong>get</strong>：向特定资源发送请求（请求指定的页面信息，并返回实体的主体）；（通过“url”传递信息）</li><li><strong>post</strong>：向指定的资源提交数据并进行请求处理（提交表单，上传文件），可导致新的资源的建立和原有资源的修改；（放在request body中，可“抓包”获取）；</li><li><strong>head</strong>：和“get”请求相似，但是不能返回实体，用于获取“小消息”中的“头部信息”</li><li><strong>put</strong>：向指定资源位置上上传最新数据；（会把之前的覆盖；“post”不会覆盖，只会增加数据）</li><li><strong>delete</strong>：请求服务器删除页面</li><li><strong>options</strong>：允许客户端查看服务器性能</li><li><strong>trace</strong>：回显服务器收到的请求，主要用于测试和诊断</li><li><strong>connect</strong>：http/1.1协议中能够将连接改为管道方式的代理服务器</li></ol><h1 id="HTTP协议与HTTPS协议的区别"><a href="#HTTP协议与HTTPS协议的区别" class="headerlink" title="HTTP协议与HTTPS协议的区别"></a>HTTP协议与HTTPS协议的区别</h1><ol><li>HTTPS协议 = HTTP协议 + SSL协议</li><li><strong>HTTP</strong>：超文本传输协议；<strong>HTTPS</strong>：超文本安全传输协议</li><li><strong>工作层</strong>：在OSI网络模型中，HTTP工作于<strong>应用层</strong>，而HTTPS工作在<strong>传输层</strong>（SSL在传输层进行加密的）。</li><li><strong>连接端口</strong>：HTTP标准端口是80（浏览网页的默认端口），而HTTPS的标准端口是443（网页浏览端口）。</li><li><strong>传输方式</strong>：HTTP是超文本传输协议，信息是明文传输，而HTTPS是SSL加密传输协议。</li><li><strong>工作耗时</strong>：HTTP耗时=TCP握手，而HTTPS耗时=TCP握手+SSL握手。</li><li><strong>显示形式</strong>：HTTP的URL以<code>http://</code>开头，而HTTPS的URL以<code>https://</code>开头。</li><li><strong>费用</strong>：HTTP无需费用，而HTTPS需要到CA申请证书，一般免费证书较少，需要一定费用。</li><li><strong>安全性</strong>：HTTP的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP协议安全。</li></ol><h1 id="arp协议"><a href="#arp协议" class="headerlink" title="arp协议"></a>arp协议</h1><ol><li><strong>arp协议</strong>：地址解析协议</li><li><strong>作用：</strong>通过解析IP得到Mac地址</li><li><strong>工作层：</strong>网络层</li><li><strong>常用命令：</strong>arp -a（查看本机存活的所有IP）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> internet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim编辑器使用手册</title>
      <link href="/posts/22e0b6f/"/>
      <url>/posts/22e0b6f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><ul><li>打开vim编辑器 / 用vim编辑器打开文件：<code>vim</code> / <code>vim 文件1 文件2 。。。</code>  </li><li>打开多个文件进行比较：<code>vim -d 文件1 文件2 。。。</code>（适用于版本比较）</li></ul><h1 id="vim的三种模式"><a href="#vim的三种模式" class="headerlink" title="vim的三种模式"></a>vim的三种模式</h1><ul><li>命令模式、编辑模式、末行模式</li></ul><h1 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h1><ol><li><code>ZZ</code>(大写) – 保存并退出</li><li>按键代表命令：<ul><li><code>i</code> 或a – 进入编辑模式</li><li><code>:</code> – 进入末行模式</li></ul></li><li><code>G</code> (大写) – 光标移动到末尾；<code>88G</code> – 光标移动到88行</li><li><code>gg</code> – 光标移动到首行</li><li><code>h、j、k、l</code> – 光标移动<code>左下上右</code>；<code>66h</code> – 光标向左移动66个字符</li><li>快捷组合键：<ul><li><code>Ctrl + Y</code> / <code>Ctrl + E</code> – 移动一行（上 / 下）</li><li><code>Ctrl + B</code> / <code>Ctrl + F</code> – 翻一页（下 / 上）</li></ul></li><li>数字<code>0</code> / <code>$</code> – 光标到行首 / 行末；<code>w</code>(小写) – 光标移动到下一个单词</li><li><code>dd</code> – 删除光标所在行；<code>88dd</code> – 从光标所在行向下删除88行</li><li><code>yy</code> – 复制光标所在行；<code>66yy</code> – 从光标所在行复制66行</li><li><code>p</code> – 粘贴；<code>8p</code> – 粘贴8遍</li><li><code>u</code> – 撤销；<code>Ctrl + R</code> – 恢复</li></ol><h1 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h1><ul><li><code>i</code> / a – 进入编辑模式</li><li><code>esc :wq!</code> – 退出编辑模式，进入<strong>末行模式</strong>（:），<strong>保存</strong>（w），<strong>退出</strong>（q），<strong>强制执行</strong>（!）</li></ul><h1 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h1><ol><li><code>:</code> – 在命令模式下输入，进入末行模式</li><li>:336 — 定位到指定行（336行）</li><li><code>set nu</code> – 显示行号；set nonu – 不显示行号</li><li><code>syntax on</code> – 显示高亮语法；syntax off – 不显示高亮语法</li><li><code>set ts=4</code> – 修改制表键的空格数</li><li><code>set ruler</code> – 显示光标所在的位置；set noruler – 不显示光标所在的位置</li><li>映射快捷键：<ul><li><code>map &lt;f2&gt; gg99999dd</code> – 在命令模式下，自定义快捷键：从第一行开始删除99999行</li><li><code>ionremap __main if __name__ == &#39;__main__&#39;</code> – 在编辑模式下，输入 <code>__main</code> 自动补替换后面内容</li></ul></li><li>多文件操作：<ul><li><code>ls</code> – 查看所有打开的文件(注意：ln创建的文件，不支持查看)</li><li><code>b 数字</code> – 指定显示那个文件</li><li><code>vs</code> – 垂直拆分窗口</li><li><code>sp</code> – 水平拆分窗口</li><li><code>Ctrl + W</code>(双击) – 切换窗口</li><li><code>qa</code> – 退出所有窗口</li></ul></li></ol><h1 id="更改vim的配置"><a href="#更改vim的配置" class="headerlink" title="更改vim的配置"></a>更改vim的配置</h1><ul><li><p>切换至用户主目录 – <code>cd ~</code> –新建隐藏文件<code>.vimrc</code> – 编辑如下配置（<strong>.vimrc</strong>文件中必须删除中文注释，否则会有异常）：</p></li><li><pre><code class="c#"><span class="keyword">set</span> nu <span class="meta"># 显示行号</span>syntax <span class="keyword">on</span>  <span class="meta"># 语法高亮开启</span><span class="keyword">set</span> ts=<span class="number">4</span>  <span class="meta"># 设置制表键为4个空格</span><span class="keyword">set</span> expandtab <span class="meta"># 将制表键自动转换为空格</span><span class="keyword">set</span> autoindent  <span class="meta"># 自动缩进</span><span class="keyword">set</span> ruler  <span class="meta"># 显示标尺（光标所在的位置）</span><span class="keyword">set</span> nohls  <span class="meta"># 设置搜索的结果不要用高亮</span>&lt;!--￼<span class="number">0</span>--&gt;</code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编辑器 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统使用手册</title>
      <link href="/posts/b37d76b1/"/>
      <url>/posts/b37d76b1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><ol><li>查看登陆用户情况：<code>w</code> / <code>who</code> / <code>whoami</code>  /  <code>last</code> </li><li>创建用户 / 修改用户密码 / 删除指定用户：<code>adduser 用户名</code>  / <code>passwd 用户名</code> / <code>userdel -r 用户名</code></li><li>查看系统所有用户：<ul><li><code>cat -n /etc/passwd | cut -d : -f 1</code></li></ul></li><li>切换用户：<code>su 用户名</code>（switch user） <code>sudo</code>（以root权限执行命令）</li><li>查看日期 / 日历：<code>data / cal</code></li><li>清除屏幕：<code>clear</code></li><li>退出当前登陆：<code>logout</code>  /  <code>exit</code></li><li>查看帮助：<code>man</code>  /  <code>info</code> / <code>--help</code></li><li>打开历史记录 / 清除历史记录：<code>history</code> / <code>history -c</code></li><li>启动桌面（图形化界面）：<code>init 5</code></li><li>启动当前用户的桌面（图形化界面）：<code>startx</code> </li><li>重启系统：<code>reboot</code> / <code>init 6</code></li><li>立刻关机（现在） / 安全关机：<code>shutdown -h now</code> / <code>init 0</code></li><li>发送消息：<code>write</code> / <code>wall</code> / <code>mesg</code></li><li>自定义命令：<code>alias ll=&#39;ls -al&#39;</code>（给<code>ls -al</code> 命令添加另外的启动方式<code>ll</code>，原命令不变）</li></ol><h1 id="Linux网络及服务程序管理命令"><a href="#Linux网络及服务程序管理命令" class="headerlink" title="Linux网络及服务程序管理命令"></a>Linux网络及服务程序管理命令</h1><ol><li><code>ping</code> 检查网络可达性 – ICMP – Internet Control Management Protocol – 网络层<ul><li><code>ttl</code>time to live – 数据存活时间（若数据有错误，经过指定数量的路由器就会停止检查，默认ttl=64）</li><li><code>PING TO DEATH</code>ping到死（需超大量服务器同时执行）；DDoS：分布式拒绝服务攻击（TCP Flood）</li></ul></li><li><code>ifconfig</code> / <code>ip</code> 查看网络信息<ul><li><code>127.0.0.1</code> 回环地址<code>localhost</code>（别名）</li><li><code>ifconfig eth0</code> 查看以太网信息</li><li><code>ifconfig lo</code> 查看本机信息</li><li><code>ip addr</code>作用和<code>ifconfig</code>相同：查看以太网和本机信息</li></ul></li><li><code>systemctl</code> Linux系统管理守护进程、工具和库的集合<ul><li><code>systemctl start nginx</code> — 启动服务（<strong>以<code>nginx</code>服务为例</strong>）</li><li><code>systemctl restart nginx</code> — 重启服务</li><li><code>systemctl stop nginx</code> — 停止服务</li><li><code>systemctl status nginx</code> — 查看服务程序的状态</li><li><code>systemctl enable nginx</code> — 服务开机自启</li><li><code>systemctl disable nginx</code> — 服务开机不自启</li></ul></li><li><code>firewalld</code> — 防火墙服务<ul><li><code>systemctl start firewalld</code> — 启动防火墙</li><li><code>systemctl stop firewalld</code> — 关闭防火墙</li><li><code>systemctl status firewalld</code> — 查看防火墙状态</li><li><code>systemctl enable firewalld</code> — 防火墙开机自启</li><li><code>systemctl disable firewalld</code> — 防火墙开机不自启</li><li><code>firewall-cmd --reload</code> — 重启防火墙</li><li><code>firewall-cmd --state</code> — 查看防火墙状态</li><li><code>firewall-cmd --version</code> — 查看防火墙版本</li><li><code>firewall-cmd --get-active-zones</code> — 查看防火墙区域信息</li><li><code>firewall-cmd --zone=public --add-port=6379/tcp</code> — <strong>暂时</strong>在公共区开启一个端口：6379，传输协议为：tcp<ul><li><code>--permanent</code> — <strong>永久</strong>的开启 / 生效（<strong>参数</strong>）</li></ul></li><li><code>firewall-cmd --zone=public --lists-ports</code> — 查看公共区开放的端口</li><li><code>firewall-cmd --zone=public --query-port=6379/tcp</code> — 查看指定端口是否开启（yes / no）</li><li><code>firewall-cmd --zone=public --remove-port=6379/tcp --permanent</code> — 移除 / 关闭指定端口（可永久移除）</li></ul></li><li><code>service</code> – 服务管理</li><li><code>top</code> – 动态监视进程活动与系统负载等信息（任务管理器）</li><li><code>jobs</code> — 查看后台进程任务</li><li>切换程序前后台运行的方法：<ul><li><code>启动命令 &amp;</code> — <code>redis-server &amp;</code> — 后台运行（<strong>符号&amp;</strong>）</li><li>先查看后台进程，若存在后台进程，再 <code>fg %1</code>（这里的<code>1</code>代表进程序号） — 前台运行</li><li>先启动服务<code>redis-server</code> 再 <code>Ctrl + Z</code> — 把前台的命令停下来放到后台（此时的程序处于后台停止状态，需启动）</li><li><code>Ctrl + Z</code>后查看后台进程，再 <code>bg %1</code>启动程序（这里的<code>1</code>代表进程序号） — 后台运行</li></ul></li><li><code>netstat</code> 查看服务程序的信息和状态<ul><li><code>-anp</code> – 查看网络状态，显示所有，显示ip，显示端口号</li></ul></li><li><code>ps</code> 查看进程和网络<ul><li><code>ps -ef</code> — 查看所有进程，标准格式显示数据</li><li><code>ps -aux</code> — 查看所有进程，BSD格式显示数据（可以查看CPU，内存）</li><li><code>ps -aux --sort -rss</code> — 内存降序</li><li><code>ps -aux --sort rss</code> — 内存升序</li><li><code>ps -aux --sort %cpu</code> — CPU升序</li><li><code>ps -aux --sort -%cpu</code> — CPU降序</li><li><code>ps -aux --sort -%cpu | head -10</code> — 取前十占用CPU的进程</li></ul></li><li><code>kill</code> – 终止指定的PID进程<ul><li><code>kill PID</code> — 用PID号杀死进程</li><li><code>-9</code> — 强制执行</li></ul></li><li><code>killall</code> — 终止指定服务的所有进程<ul><li><code>killall nginx</code> — 终止Nginx服务的所有进程</li></ul></li></ol><h1 id="Linux文件操作相关命令"><a href="#Linux文件操作相关命令" class="headerlink" title="Linux文件操作相关命令"></a>Linux文件操作相关命令</h1><ol><li><code>pwd</code> - 打印工作路径</li><li><code>cd</code> - 切换目录</li><li><code>ls</code> - 列出目录下的内容</li><li><code>cat</code> -concatenate - 连接多个文件（查看文件的内容）</li><li><code>touch</code> - 创建空文件或修改已有文件的最后访问时间<ul><li><code>-a</code>：仅修改“读取时间”（atime）</li><li><code>-m</code>：仅修改“修改时间”（mtime）</li><li><code>-d</code>：同时修改“atime”和“mtime”</li></ul></li><li><code>mkdir</code> - make directory - 创建文件夹</li><li><code>rm</code> - remove - 删除<ul><li><code>-f</code>：强制删除文本</li><li><code>-r</code>：删除目录 – 递归删除（包括目录下的所有文件）</li><li><code>-v</code>：显示执行过程</li><li><code>-i</code>：在执行指令时，选择Y/N（默认不显示，不区分大小写）</li></ul></li><li><code>rmdir</code> - 删除空文件夹</li><li><code>wget</code> - 通过网络下载文件</li><li><code>gzip</code> / <code>gunzip</code> - 文件压缩 / 解压（gz / tgz）</li><li><code>xz</code> - 文件压缩 / 解压（xz）<ul><li><code>-z</code> – 压缩</li><li><code>-d</code> – 解压缩  </li></ul></li><li><code>tar</code> - 文件归档 / 解归档<ul><li><code>-xvf</code> – 解归档</li><li><code>-cvf</code> – 创建归档文件</li></ul></li><li><code>wc</code> - 查看文件行数、单词数、字符数</li><li><code>sort</code> – 文件排序</li><li><code>uniq</code> – 文件去重（相邻相同的内容会被过滤掉）</li><li><code>more</code> / <code>less</code> - 分页查看文件</li><li><code>diff</code> - 比较文件的差别</li><li><code>cp</code> – copy 拷贝文件</li><li><code>mv</code> – move 移动文件或文件重命名（同一路径下移动，相当于文件重命名）</li><li><code>grep</code> – 匹配内容 / 搜索内容（string）<ul><li><code>grep mysql</code> — 搜索mysql</li><li><code>ps -ef | grep mysql | grep -v grep</code> — 不要显示grep关键词 — <code>grep -v grep</code> </li><li><code>gerp -E &quot;\&lt;\/?script.*?&gt;&quot; index.html</code> – 添加正则 -E 进行匹配</li></ul></li><li><code>find</code> – 文件搜索<ul><li>-name – find / -name “*.html” – 搜索出根目录下的所有匹配文件 – 参数-delete，可将查找结果一并删除</li><li>-size – find ./ -size 10M – 在当前目录下搜索出大于10M的文件</li><li>-type – 根据类型搜索 – d / f / l / s – 文件夹 / 普通文件 / 链接文件</li><li>-atime – 最后访问时间</li><li>-mtime – 最后修改时间</li><li>-ctime – 创建时间</li></ul></li></ol><h1 id="Linux常用特殊符号"><a href="#Linux常用特殊符号" class="headerlink" title="Linux常用特殊符号"></a>Linux常用特殊符号</h1><ol><li>管道符：<code>|</code>（拼接多个命令 - 前一个命令的输出是后一个命令的输入）</li><li>输出重定向：<code>&gt;</code></li><li>追加输出重定向：<code>&gt;&gt;</code></li><li>错误输出重定向：<code>2&gt;</code></li><li>错误追加输出重定向：<code>2&gt;&gt;</code></li></ol><h1 id="Linux常用快捷组合键"><a href="#Linux常用快捷组合键" class="headerlink" title="Linux常用快捷组合键"></a>Linux常用快捷组合键</h1><ol><li><code>Ctrl + Alt + T</code>： 打开Linux图形化终端</li><li><code>Ctrl + D</code>：  结束输入</li><li><code>Ctrl + W</code>： 删除命令中的一块（从后至前删除）</li><li><code>Ctrl + A</code>： 光标到行首</li><li><code>Ctrl + E</code>： 光标到行尾</li><li><code>Ctrl + L</code>：清除屏幕（clear）</li></ol><h1 id="Linux系统下的软件安装"><a href="#Linux系统下的软件安装" class="headerlink" title="Linux系统下的软件安装"></a>Linux系统下的软件安装</h1><h2 id="CentOs系统"><a href="#CentOs系统" class="headerlink" title="CentOs系统"></a>CentOs系统</h2><ul><li>包管理工具 - yum / rpm / apt<ol><li><code>rpm</code> 全称：redhat package manager</li><li><code>yum</code>全称：yellowdog updater modified</li><li><code>yum search nginx</code> – 从默认的仓库搜索有没有指定的软件</li><li><code>yum install -y nginx</code> – 安装软件</li><li><code>yum remove -y nginx</code> – 卸载软件</li><li><code>yum info nginx</code> – 查看软件的相关信息</li><li><code>yum list installed</code> – 查看已安装的软件</li><li><code>yum update nginx</code> – 更新软件</li><li><code>yum update</code> – 更新所有软件</li></ol></li></ul><h1 id="Linux创建链接"><a href="#Linux创建链接" class="headerlink" title="Linux创建链接"></a>Linux创建链接</h1><ol><li>硬链接：<code>ln test.py /root/code/test.py</code><ul><li>创建后，只要改变其中一个文件的内容，其余文件也会随之更改</li><li>(给磁盘文件添加了新的引用，不占用内存空间，只要文件引用次数不为0，文件就不会消失)</li></ul></li><li>软连接：<code>ln -s /usr/local/python37/bin/python3 /usr/bin/python3</code> （相当于windows系统下的创建快捷方式）</li></ol><h1 id="Linux远程连接"><a href="#Linux远程连接" class="headerlink" title="Linux远程连接"></a>Linux远程连接</h1><h2 id="ssh远程连接"><a href="#ssh远程连接" class="headerlink" title="ssh远程连接"></a>ssh远程连接</h2><ol><li>被连主机需开启ssh服务 – sudo <code>/etc/init.d/ssh start</code> – sudo <code>/etc/init.d/ssh stop</code>(sudo 权限足够可省略)</li><li>被连接主机需开启远程登陆权限：<ul><li>打开ssh的配置文件 – <code>vim /etc/ssh/sshd_config</code></li><li>开启远程登陆权限 – <code>PermitRootLogin</code>的值更改为 – <code>yes</code></li><li>先关闭ssh服务，再开启ssh服务</li></ul></li><li>开始连接 – <code>ssh let@192.168.245.128</code> – 再输入密码即可连接</li></ol><h2 id="scp远程连接"><a href="#scp远程连接" class="headerlink" title="scp远程连接"></a>scp远程连接</h2><ul><li>上传文件 – <code>scp code/example01.py let@192.168.245.128:/home/let</code> – 从本地路径至服务器路径</li><li>上传文件夹 – <code>scp -r code/ root@192.168.245.128:/root</code>（添加参数 -r）</li></ul><h2 id="sftp远程连接"><a href="#sftp远程连接" class="headerlink" title="sftp远程连接"></a>sftp远程连接</h2><ol><li>进入sftp – <code>sftp root@192.168.245.128</code> – 输入正确密码即可进入</li><li>打开使用手册，查看所有命令 <code>-- help</code></li><li>上传文件、文件夹 – 将本地文件上传到服务器路径下<ul><li><code>put example.py</code> </li><li><code>put -r code</code> – 参数不区分大小写</li><li>先lcd切换本地路径，再cd切换到服务器路径</li></ul></li><li>下载文件、文件夹 – 将服务器的文件下载到本地路径下<ul><li><code>get test.txt</code></li><li><code>get -R code</code> – 参数不区分大小写</li><li>先lcd切换本地路径，再cd切换到服务器路径</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html基础语言</title>
      <link href="/posts/adfa9574/"/>
      <url>/posts/adfa9574/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="web前端开发工具"><a href="#web前端开发工具" class="headerlink" title="web前端开发工具"></a>web前端开发工具</h1><ul><li>下载地址：dcloud.io</li><li>工具名称：HBuilder X（国产免费）</li></ul><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><ul><li>作用：承载内容</li></ul><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><ul><li><p>块级标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标题标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  <span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 段落标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 水平分隔标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 块级元素标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 无序列表标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有序列表标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义列表标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表格标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表单标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>行级标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 超链接标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 图像标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组合文档中的行内元素标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输入标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="文本标签"><a href="#文本标签" class="headerlink" title="文本标签"></a>文本标签</h2><p>常用文本标签</p><ul><li>h1~h6 - 标题 - heading</li><li>hr - 水平分隔线 - 水平标尺） - horizontal ruler</li><li>br - 换行 - break ruler</li><li>p - 段落</li><li>sup / sub - 上标 、下标</li><li>em / strong - 斜体、加粗（强调）</li><li>del / ins  - 删除线、下划线</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span>水平分割线</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span>末尾换行</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>段落（自动换行）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>  <span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span>  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span>  <span class="tag">&lt;<span class="name">ins</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>字符实体/字体替换符</p><ol><li>空格：&nbsp; 请点击“空格”</li><li>尖括号：&lt;请点击符号&gt;</li><li>其他</li></ol><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><ul><li>列表标签可以自由嵌套</li></ul><ol><li><p>有序列表：</p><ul><li>ol - ordered list<ul><li>li - list item</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>无序列表：</p><ul><li>ul - unordered list <ul><li>li - list item</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义列表：</p><ul><li>dl - definition list<ol><li>dt - definition title</li><li>dd - definition description</li></ol></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>定义标题<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>定义的描述1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>定义的描述2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>列表嵌套：</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        蔬菜：</span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>葱、蒜苗<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>茄子、杏鲍菇<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        水果：</span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>梨子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>桃子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dt&gt;定义标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/python-logo.png"</span> &gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>python<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dt</span>&gt;</span>面向对象编程<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>基本概念：类、对象<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dd</span>&gt;</span>三大支柱：封装、继承、多态<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;dd&gt;定义的描述 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>语法结构简单易懂<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>动态弱类型语言，需要python解释器才能执行<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h2><ol><li><p>页面链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- a标签 - name属性和id属性用法相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"top"</span> <span class="attr">id</span>=<span class="string">"bottom"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_self"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>锚链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#bottom"</span>&gt;</span>去底部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"#top"</span>&gt;</span>回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>功能链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">herf</span>=<span class="string">"mailto:123@qq.com"</span>&gt;</span>联系站长<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- img标签可单独使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- title标签：鼠标悬浮在图像上出现的提示信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- alt标签：图片加载失败后的提示信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/日本国模人体艺术图片.jpg"</span> <span class="attr">title</span>=<span class="string">"日本国模人体艺术图片"</span> <span class="attr">alt</span>=<span class="string">"图片加载失败..."</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- figcaption标签：在图片下方添加信息（图片名称） --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul><li><p>表格快捷创建：<code>table&gt;tr*5&gt;td*4</code>（5行4列）</p></li><li><p>多行光标：按住ctrl + 单机选择位置 &gt; 退出：esc</p></li><li><p>自动在标签外嵌套一层标签：选中标签范围 + ctrl + ]</p></li><li><p>HTML 表格有两种单元格类型：</p><ol><li>表头单元格 - 包含头部信息（由<th>元素创建）</li><li>标准单元格 - 包含数据（由<td>元素创建）</li></ol><p><strong><em>th 元素中的文本呈现为粗体并且居中。</em></strong></p><p><strong><em>td 元素中的文本是普通的左对齐文本。</em></strong></p></li></ul><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- border="1"边框为1，不推荐使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- caption添加表格标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>学生考试成绩表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- thead添加表格头部（默认不显示） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- width='120' 设置表格宽度为120，字体加粗 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">'120'</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">'120'</span>&gt;</span>语文<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">'120'</span>&gt;</span>数学<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">'120'</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">width</span>=<span class="string">'120'</span>&gt;</span>体育<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tbody添加表格内部数据（默认不显示） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>91<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>81<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>71<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>61<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rowspan="1" 行为一个单元格 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- clospan="1" 列为一个单元格 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- align="center"、"left"、"right" 数据排列：居中对齐、左对齐、右对齐 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"1"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span> <span class="attr">rowspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>59<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>90<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>59<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>赵六<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>99<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>88<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>77<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>66<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tfoot添加表格尾部（默认不显示） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><ul><li>表单控件：<code>&lt;form action=&quot;&quot; method=&quot;&quot;&gt;&lt;/form&gt;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- action=""提交表单时，提交到哪个文件中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- fieldset标签：给表单中的指定表单加线框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- legend标签：在线框上添加文本信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户基本信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            用户名：</span><br><span class="line">            <span class="comment">&lt;!-- size="30" 设置输入框的长度 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- maxlength="10" 设置输入框中数据的最大长度 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- placeholder="" 设置输入框底层的提示内容 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- required 必填项 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- readonly 只读项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">size</span>=<span class="string">"30"</span> <span class="attr">maxlength</span>=<span class="string">"10"</span> <span class="attr">placeholder</span>=<span class="string">"填写3-10个字符"</span> <span class="attr">required</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            密码：</span><br><span class="line">            <span class="comment">&lt;!-- type="password" 隐藏数据 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">required</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            确认密码：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"repassword"</span> <span class="attr">required</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            性别：</span><br><span class="line">            <span class="comment">&lt;!-- type="radio"单选框 checked默认选择项，这里只能选择一个 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span> &gt;</span>男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span>&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>用户附加信息<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            爱好：</span><br><span class="line">            <span class="comment">&lt;!-- type="checkbox"复选框 checked可加多个默认选择项 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"美食"</span> <span class="attr">checked</span> &gt;</span>美食</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"旅游"</span>&gt;</span>旅游</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"运动"</span> <span class="attr">checked</span> &gt;</span>运动</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"视频"</span>&gt;</span>视频</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- select&gt;option*5 添加5个下拉列表 --&gt;</span></span><br><span class="line">            省份：</span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"01"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"02"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"03"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"04"</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"05"</span> <span class="attr">selected</span> &gt;</span>四川省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            生日：</span><br><span class="line">            <span class="comment">&lt;!-- type="date" 设置日期框 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            邮箱：</span><br><span class="line">            <span class="comment">&lt;!-- 邮箱框 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">required</span> <span class="attr">readonly</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            头像：</span><br><span class="line">            <span class="comment">&lt;!-- 文件框 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"photo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            个人简介：</span><br><span class="line">            <span class="comment">&lt;!-- textarea 自定义文本框，可设置行数和列数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">name</span>=<span class="string">"个人简介"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- type="submit" 添加提交按钮 value属性不写有默认值：提交、重置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"确认注册"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- type="reset" 添加重置按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"重新填写"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>表单控件中的重要属性</p><ol><li><p><code>name</code>属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置文本输入框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置日期选择框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"birthday"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置邮件输入框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置自定义文本输入框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"30"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">name</span>=<span class="string">"个人简介"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>value</code>属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置单选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">checked</span> &gt;</span>男</span><br><span class="line"><span class="comment">&lt;!-- 设置复选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fav"</span> <span class="attr">value</span>=<span class="string">"美食"</span> <span class="attr">checked</span> &gt;</span>美食</span><br><span class="line"><span class="comment">&lt;!-- 设置自定义下拉列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"province"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"01"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"02"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"03"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"04"</span>&gt;</span>重庆<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"05"</span> <span class="attr">selected</span> &gt;</span>四川省<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="音频标签"><a href="#音频标签" class="headerlink" title="音频标签"></a>音频标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- controls设置控制台按钮 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- loop设置循环播放 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- autoplay默认自动播放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">"./audios/我们不一样铃声.mp3"</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span> &gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="视频标签"><a href="#视频标签" class="headerlink" title="视频标签"></a>视频标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">loop</span> <span class="attr">autoplay</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"./videos/流浪的子弹.mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h1><ul><li>分类：内部样式表（style标签中）、外部样式表（css文件中）、内嵌样式表/行内样式表（body标签中）</li><li>作用：渲染页面</li><li>一般情况下网站的首页会使用内部样式表 - 首页正常渲染</li><li>其他页面可以共享一个或多个外部样式表 - 代码复用/减少对带宽和流量的使用</li></ul><h2 id="选择器使用原则"><a href="#选择器使用原则" class="headerlink" title="选择器使用原则"></a>选择器使用原则</h2><ul><li>不冲突的样式会叠加</li><li>有冲突的样式遵循三条原则：<ol><li>就近原则</li><li>具体性原则</li><li>重要原则</li></ol></li></ul><h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*标签选择器*/</span></span></span><br><span class="line">    h1&#123;</span><br><span class="line">    width: 1450px;</span><br><span class="line">    height: 50px;</span><br><span class="line"><span class="css">    <span class="comment">/*上下边缘为0,自动化*/</span></span></span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="comment">/*类选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*背景色*/</span></span></span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.b</span> &#123;</span></span><br><span class="line">        background-color: orange;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.c</span> &#123;</span></span><br><span class="line">        background-color: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.d</span> &#123;</span></span><br><span class="line">        background-color: green;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.e</span> &#123;</span></span><br><span class="line">        background-color: cyan;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.f</span> &#123;</span></span><br><span class="line">        background-color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.g</span> &#123;</span></span><br><span class="line">        background-color: purple;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.h</span> &#123;</span></span><br><span class="line">        color: blue;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.big</span> &#123;</span></span><br><span class="line">        font-size: 45px;</span><br><span class="line">        width: 1450px;</span><br><span class="line">        height: 150px;</span><br><span class="line">        border: 0px;</span><br><span class="line">        margin: 10px auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.normal</span> &#123;</span></span><br><span class="line">        font-size: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.small</span> &#123;</span></span><br><span class="line">        font-size: 15px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/*ID选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-id">#header</span>,<span class="selector-id">#footer</span> &#123;</span></span><br><span class="line">        width: 1450px;</span><br><span class="line">        height: 120px;</span><br><span class="line"><span class="css">        <span class="comment">/*边界：1px 实线 red*/</span></span></span><br><span class="line">        border: 1px solid red;</span><br><span class="line"><span class="css">        <span class="comment">/*上下边缘为10px,自动化*/</span></span></span><br><span class="line">        margin: 10px auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="comment">/*属性选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*form input后代选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*form&gt;input儿子选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span>,<span class="selector-tag">form</span> <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span>&#123;</span></span><br><span class="line">        border: none;</span><br><span class="line">        border-bottom: 1px dotted darkgray;</span><br><span class="line">        outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*form~input兄弟选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*form+input相邻兄弟选择器*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">form</span>~<span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*outline轮廓线*/</span></span></span><br><span class="line">        outline: none;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">lightgray</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="comment">/*focus鼠标点击*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-tag">form</span>~<span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line">        outline: none;</span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#55ffff</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本与字体设置"><a href="#文本与字体设置" class="headerlink" title="文本与字体设置"></a>文本与字体设置</h2><ul><li><p>属性定义及使用说明</p><ol><li>font 简写属性 - 在一个声明中设置所有字体属性。</li><li>可设置的属性是（按顺序）： “font-style font-variant font-weight font-size/line-height font-family”</li><li>font-size和font-family的值是必需的。如果缺少了其他值，默认值将被插入，如果有默认值的话。</li></ol><p><strong>注意：</strong> line - height属性设置行与行之间的空间。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.ms1</span> &#123;</span></span><br><span class="line">        font-family: 楷体;</span><br><span class="line">        font-size: 260%;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(145, 218, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/*字母间距*/</span></span></span><br><span class="line">        letter-spacing: 10px;</span><br><span class="line">        width: 450px;</span><br><span class="line">        height: 60px;</span><br><span class="line"><span class="css">        <span class="comment">/*边框3px dotted虚线/星罗棋布的*/</span></span></span><br><span class="line">        border: 3px dotted gray;</span><br><span class="line"><span class="css">        <span class="comment">/* solid实线/实心的 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* border:3px solid black; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 线条高度，行高*/</span></span></span><br><span class="line">        line-height: 60px;</span><br><span class="line"><span class="css">        <span class="comment">/* 文本排列 */</span></span></span><br><span class="line">        text-align: center;</span><br><span class="line"><span class="css">        <span class="comment">/* 外边距：10px 自动变 */</span></span></span><br><span class="line">        margin: 10px auto;</span><br><span class="line"><span class="css">        <span class="comment">/*文本装饰 下划线 红色*/</span></span></span><br><span class="line">        text-decoration: underline;</span><br><span class="line"><span class="css">        <span class="comment">/*overline上划线；wavy - 波浪线；*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* text-decoration: wavy overline red; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/*line-through删除线*/</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* text-decoration: line-through; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 文本阴影：水平4px；垂直：2px；颜色：灰色 */</span></span></span><br><span class="line">        text-shadow: 4px 2px gray;</span><br><span class="line"><span class="css">        <span class="comment">/*文本转换：大写*/</span></span></span><br><span class="line">        text-transform: uppercase;</span><br><span class="line"><span class="css">        <span class="comment">/*文本缩进：60px*/</span></span></span><br><span class="line">        text-indent: 60px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引入新字体"><a href="#引入新字体" class="headerlink" title="引入新字体"></a>引入新字体</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 定义字体的名称 - 字体类型 */</span></span></span><br><span class="line">        font-family: "默陌流星公举体";</span><br><span class="line"><span class="css">        <span class="comment">/* 设置字体存放路径 */</span></span></span><br><span class="line">        src: url('fonts/默陌流星公举体.ttf');</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="边框和轮廓的设置"><a href="#边框和轮廓的设置" class="headerlink" title="边框和轮廓的设置"></a>边框和轮廓的设置</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 边框 */</span></span></span><br><span class="line">        border: 1px dotted gray;</span><br><span class="line"><span class="css">        <span class="comment">/* 轮廓线 */</span></span></span><br><span class="line">        outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/25/tMdUcXelsmxfZJv.gif" alt="box-model.gif"></p><p><em>不同部分的说明：</em></p><ul><li><p><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</p></li><li><p><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</p></li><li><p><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</p></li><li><p><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像。</p></li><li><p>border边框属性值:</p><ol><li>none - 取消边框</li><li>solid - 实线</li><li>dotted - 虚线</li><li>double - 双重线</li></ol></li><li><p>border-radius: 10px;  边框（半径）圆角属性值；</p></li><li><p>border-top-left-radius: 10px;  边框左上角属性值；</p></li><li><p>border-bottom-right-radius: 30px;  边框右下角属性值；</p></li><li><p>border-collapse: collapse;  边界塌陷：塌陷；（取消重复边框）</p></li></ul><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">        width: 17%;</span><br><span class="line">        height: 100%;</span><br><span class="line"><span class="css">        <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(137, 203, 101, 0<span class="selector-class">.5</span>);</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span><span class="selector-pseudo">:10px</span> <span class="selector-tag">double</span> <span class="selector-id">#55ff00</span>;</span></span><br><span class="line">        margin: 1% auto;</span><br><span class="line">        padding: 1%;</span><br><span class="line">        text-align: center;</span><br><span class="line">        background: url(images/蓝色星空近月雪山雪景.jpg) -100px -100px no-repeat no-repeat;</span><br><span class="line"><span class="css">        <span class="comment">/* background-image: url(images/蓝色星空近月雪山雪景.jpg); */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* 背景重复:水平不重复 垂直不重复 */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* background-repeat: no-repeat no-repeat; */</span></span></span><br><span class="line"><span class="css">        <span class="comment">/* background-position: -100px -10px; */</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    table &#123;</span><br><span class="line"><span class="css">        <span class="comment">/*边框塌陷（去除边框的重复阴影）*/</span></span></span><br><span class="line">        border-collapse: collapse;</span><br><span class="line">    &#125;</span><br><span class="line">    th,rd &#123;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h2><ul><li>list-style-type: none;  属性值（设置列表项标记的类型）</li></ul><h2 id="元素位置属性"><a href="#元素位置属性" class="headerlink" title="元素位置属性"></a>元素位置属性</h2><ul><li>position位置属性值: <ol><li>static - 静态定位 - 浏览器的默认定位，不可改变</li><li>relative - 相对定位 - 相对于原来正常的位置，可用（top、bottom、left、right）移动位置</li><li>absolute - 绝对定位 - 相对于父元素来设置定位</li><li>fixed - 固定位置 - 相对于浏览器位置来设置位置</li></ol></li><li>float位置属性值：<ol><li>left - 元素浮动到左边</li><li>right - 元素浮动到右边</li></ol></li><li>display位置属性值：<ol><li>inline-block - 元素在一条线上</li><li>block - 元素在默认位置</li><li>none - 元素不显示（页面其他元素会自动占位）</li></ol></li></ul><h2 id="元素显隐性属性"><a href="#元素显隐性属性" class="headerlink" title="元素显隐性属性"></a>元素显隐性属性</h2><ul><li>display显示属性值: <ol><li>block - 元素在默认位置</li><li>inline-block - 元素在一条线上</li><li>none - 元素不显示（页面其他元素会自动占位）</li></ol></li><li>visibility可见性属性值: <ol><li>visible - 默认可见</li><li>hidden - 不可见（隐藏后，页面保留原位置，不自动占位）</li></ol></li></ul><h1 id="第三方js库"><a href="#第三方js库" class="headerlink" title="第三方js库"></a>第三方js库</h1><ul><li>url - <a href="http://www.bootcdn.cn" target="_blank" rel="noopener">www.bootcdn.cn</a></li></ul><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ul><li>作用：交互式行为。</li><li>JavaScript 对大小写是敏感的。</li><li>JavaScript 使用 Unicode 字符集。</li></ul><p>代码示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设定按钮键，并指定按钮的触发事件,onclick：单机鼠标（点击） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"showContent()"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//JavaScript的函数命名必须为‘驼峰式命名法’</span></span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">showContent</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.alert(<span class="string">'窗口警报'</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="js规范写法"><a href="#js规范写法" class="headerlink" title="js规范写法"></a>js规范写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加事件监听器 - load</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123; content &#125;)</span><br><span class="line"><span class="comment">// 及时调用函数</span></span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; content &#125;()</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; content &#125;)()</span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;content &#125;)()</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul><li>JavaScript 有多种数据类型：数字，字符串，数组，对象等等：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">16</span>;                                  <span class="comment">// Number 通过数字字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> points = x * <span class="number">10</span>;                              <span class="comment">// Number 通过表达式字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">"Johnson"</span>;                         <span class="comment">// String 通过字符串字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">"Saab"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>];              <span class="comment">// Array  通过数组字面量赋值</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">firstName</span>:<span class="string">"John"</span>, <span class="attr">lastName</span>:<span class="string">"Doe"</span>&#125;;  <span class="comment">// Object 通过对象字面量赋值</span></span><br></pre></td></tr></table></figure><h2 id="变量、常量"><a href="#变量、常量" class="headerlink" title="变量、常量"></a>变量、常量</h2><ul><li>在编程语言中，变量、常量用于存储数据值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义全局变量：var</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;  <span class="comment">//a可以重新赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义块级变量：let</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">8</span>;   <span class="comment">//a可以重新赋值</span></span><br><span class="line"><span class="comment">//一对花括号可以构成一个块级作用域，let定义的变量就是块级作用域变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义常量：const</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">6</span>;  <span class="comment">//a不可以二次赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断变量类型：typeof()；js中只有number类型，没有float类型</span></span><br><span class="line"><span class="keyword">typeof</span>(a)</span><br><span class="line"><span class="comment">//js中的空值：null</span></span><br><span class="line">a = <span class="literal">null</span></span><br><span class="line"><span class="comment">//js中的[]为数组类型；</span></span><br><span class="line"><span class="comment">//js中的符号类型：symbol</span></span><br></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><ul><li>JavaScript 可以通过不同的方式来输出数据：<ol><li>使用 <strong>window.alert()</strong> 弹出警告框。</li><li>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</li><li>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</li><li>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</li></ol></li></ul><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a><em>算数运算符</em></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加、减、乘、除、取余、次方、递增、递减</span></span><br><span class="line"><span class="number">1</span>+<span class="number">2</span>;  <span class="number">5</span><span class="number">-3</span>;  <span class="number">3</span>*<span class="number">8</span>;  <span class="number">9</span>/<span class="number">3</span>;  <span class="number">5</span>%<span class="number">3</span>;  <span class="number">2</span>**<span class="number">3</span>;  i++;i+=<span class="number">1</span>;  i--;i-=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// 整除 - parseInt();  // - 代表注释</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">9</span>/<span class="number">6</span>)</span><br><span class="line"><span class="comment">// 两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串，如下实例：</span></span><br><span class="line">x=<span class="number">5</span>+<span class="number">5</span>;  <span class="comment">// 10</span></span><br><span class="line">y=<span class="string">"5"</span>+<span class="number">5</span>;  <span class="comment">// 55</span></span><br><span class="line">z=<span class="string">"Hello"</span>+<span class="number">5</span>;  <span class="comment">// Hellow5</span></span><br><span class="line"><span class="keyword">var</span> result1=<span class="number">5</span>+<span class="number">5</span>+<span class="string">"abc"</span>; <span class="comment">//结果将是"10abc"</span></span><br><span class="line"><span class="keyword">var</span> result2= <span class="string">""</span>+<span class="number">5</span>+<span class="number">5</span>+<span class="string">"abc"</span>; <span class="comment">//结果将是"55abc"</span></span><br><span class="line"><span class="comment">// 规则:如果把数字与字符串相加，结果将成为字符串！</span></span><br><span class="line"><span class="comment">// 判断变量类型 - typeof()</span></span><br><span class="line"><span class="keyword">typeof</span>(y)</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a><em>赋值运算符</em></h3><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等同于</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">x=y</td><td align="left"></td></tr><tr><td align="left">+=</td><td align="left">x+=y</td><td align="left">x=x+y</td></tr><tr><td align="left">-=</td><td align="left">x-=y</td><td align="left">x=x-y</td></tr><tr><td align="left">*=</td><td align="left">x*=y</td><td align="left">x=x*y</td></tr><tr><td align="left">/=</td><td align="left">x/=y</td><td align="left">x=x/y</td></tr><tr><td align="left">%=</td><td align="left">x%=y</td><td align="left">x=x%y</td></tr></tbody></table><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><em>逻辑运算符</em></h3><ul><li>逻辑与 - &amp;&amp;</li><li>逻辑或 - ||</li><li>逻辑非 - !<ol><li>如果一个操作数是一个对象，返回false;</li><li>如果一个操作数是一个空字符串，返回false;</li><li>如果一个操作数是一个非空字符串，返回false</li><li>如果一个操作数是一个数值0，返回true;</li><li>如果一个操作数是任意的非零字符，返回false;</li><li>如果一个操作数是null，返回true;</li><li>如果一个操作数是NaN，返回true;</li><li>如果一个操作数是undefined，返回true;</li></ol></li></ul><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a><em>位运算符</em></h3><table><thead><tr><th align="left">位运算符</th><th align="left">用法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">按位与（ AND）</td><td align="left"><code>a &amp; b</code></td><td align="left">对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。</td></tr><tr><td align="left">按位或（OR）</td><td align="left">`a</td><td align="left">b`</td></tr><tr><td align="left">按位异或（XOR）</td><td align="left"><code>a ^ b</code></td><td align="left">对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。</td></tr><tr><td align="left">按位非（NOT）</td><td align="left"><code>~ a</code></td><td align="left">反转操作数的比特位，即0变成1，1变成0。</td></tr><tr><td align="left">左移（Left shift）</td><td align="left"><code>a &lt;&lt; b</code></td><td align="left">将 <code>a</code> 的二进制形式向左移 <code>b</code> (&lt; 32) 比特位，右边用0填充。</td></tr><tr><td align="left">有符号右移</td><td align="left"><code>a &gt;&gt; b</code></td><td align="left">将 a 的二进制表示向右移<code>b</code>(&lt; 32) 位，丢弃被移出的位。</td></tr><tr><td align="left">无符号右移</td><td align="left"><code>a &gt;&gt;&gt; b</code></td><td align="left">将 a 的二进制表示向右移<code>b</code>(&lt; 32) 位，丢弃被移出的位，并使用 0 在左侧填充。</td></tr></tbody></table><h3 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a><em>逗号操作符</em></h3><ul><li>对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">x = (x++, x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// expected output: 2</span></span><br><span class="line"></span><br><span class="line">x = (<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"><span class="comment">// expected output: 3</span></span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a><em>比较运算符</em></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 大于、小于、等于、一致/严格/绝对等于、不相等、不一致/严格/绝对等于、大于等于、小于等于</span></span><br><span class="line">x &gt; y;  x &lt; y;  x == y;  x === y;  x != y;  x !== y;  x &gt;= y;  x &lt;= y;  <span class="comment">//返回值 - true/false</span></span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a><em>三元运算符</em></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件 ？ 满足条件执行的代码 ： 不满足条件执行的代码</span></span><br><span class="line">condition ? trueContent : falseContent</span><br></pre></td></tr></table></figure><h2 id="if-条件语句"><a href="#if-条件语句" class="headerlink" title="if  条件语句"></a>if  条件语句</h2><ul><li><strong>if 语句</strong> - 只有当指定条件为 true 时，使用该语句来执行代码</li><li><strong>if…else 语句</strong> - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</li><li><strong>if…else if….else 语句</strong>- 使用该语句来选择多个代码块之一来执行</li><li><strong>switch 语句</strong> - 使用该语句来选择多个代码块之一来执行</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition)&#123;content&#125;</span><br><span class="line"><span class="keyword">if</span> (condition)&#123;content1&#125; <span class="keyword">else</span>&#123;content2&#125;</span><br><span class="line"><span class="keyword">if</span> (condition1)&#123;content1&#125; <span class="keyword">else</span> <span class="keyword">if</span>(condition2)&#123;conten2t&#125; <span class="keyword">else</span>&#123;content3&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-条件语句"><a href="#switch-条件语句" class="headerlink" title="switch 条件语句"></a>switch 条件语句</h2><ul><li>注意：case后面必须写固定值，不能写范围；若要写范围，就用if语句</li></ul><p><em>判断今天是星期几</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断今天是星期几</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x;</span><br><span class="line">    <span class="keyword">var</span> d=<span class="keyword">new</span> <span class="built_in">Date</span>().getDay();</span><br><span class="line">    <span class="keyword">switch</span> (d)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:x=<span class="string">"今天是星期日"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:x=<span class="string">"今天是星期一"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:x=<span class="string">"今天是星期二"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:x=<span class="string">"今天是星期三"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:x=<span class="string">"今天是星期四"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:x=<span class="string">"今天是星期五"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:x=<span class="string">"今天是星期六"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML=x;</span><br><span class="line">&#125;</span><br><span class="line">myFunction()</span><br></pre></td></tr></table></figure><p>for循环</p><ul><li>循环可以将代码块执行指定的次数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常用for循环格式 - for(;;)&#123;&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; arr.length; i++)&#123; content &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for/in 语句循环遍历对象的属性：</span></span><br><span class="line"><span class="keyword">var</span> person=&#123;<span class="attr">fname</span>:<span class="string">"John"</span>,<span class="attr">lname</span>:<span class="string">"Doe"</span>,<span class="attr">age</span>:<span class="number">25</span>&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> person)  <span class="comment">// x 为属性名</span></span><br><span class="line">&#123;</span><br><span class="line">    txt=txt + person[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for/of循环 - ES6新语法 - 功能非常强大</span></span><br><span class="line">stringA = <span class="string">'aucnwcniocio'</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> stringA)&#123;</span><br><span class="line">    alert(value)</span><br><span class="line">    <span class="comment">// document.write(value + '&lt;br&gt;')</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while循环 - condition只能写添加</span></span><br><span class="line"><span class="keyword">while</span>(condition)&#123; content &#125;  <span class="comment">// 不加条件，程序会死循环</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// do/while - 至少执行一次 - false也要执行一次</span></span><br><span class="line"><span class="keyword">do</span>&#123; content &#125;<span class="keyword">while</span>(condition);</span><br></pre></td></tr></table></figure><h2 id="break和continue语句"><a href="#break和continue语句" class="headerlink" title="break和continue语句"></a>break和continue语句</h2><ul><li>break - 终止、跳出循环</li><li>continue - 跳过本次循环，继续执行下一次循环</li></ul><h2 id="typeof语句"><a href="#typeof语句" class="headerlink" title="typeof语句"></a>typeof语句</h2><ul><li>作用 - 查看数据类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">"John"</span>                 <span class="comment">// 返回 string</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">3.14</span>                   <span class="comment">// 返回 number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>                    <span class="comment">// 返回 number</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">false</span>                  <span class="comment">// 返回 boolean</span></span><br><span class="line"><span class="keyword">typeof</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]              <span class="comment">// 返回 object</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;<span class="attr">name</span>:<span class="string">'John'</span>, <span class="attr">age</span>:<span class="number">34</span>&#125;  <span class="comment">// 返回 object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">new</span> <span class="built_in">Date</span>()             <span class="comment">// 返回 object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;         <span class="comment">// 返回 function</span></span><br><span class="line"><span class="keyword">typeof</span> myCar                  <span class="comment">// 返回 undefined (如果 myCar 没有声明)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>                   <span class="comment">// 返回 object</span></span><br></pre></td></tr></table></figure><h2 id="常用数据类型转换"><a href="#常用数据类型转换" class="headerlink" title="常用数据类型转换"></a>常用数据类型转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(x)         <span class="comment">// 将变量 x 转换为字符串并返回</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">123</span>)       <span class="comment">// 将数字 123 转换为字符串并返回</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">100</span> + <span class="number">23</span>)  <span class="comment">// 将数字表达式转换为字符串并返回</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(x)  <span class="comment">// 将返回结果转换为一个整数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"10"</span>);<span class="comment">//返回 10</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"19"</span>,<span class="number">10</span>);<span class="comment">//返回 19 (10+9)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"11"</span>,<span class="number">2</span>);<span class="comment">//返回 3 (2+1)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"17"</span>,<span class="number">8</span>);<span class="comment">//返回 15 (8+7)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"1f"</span>,<span class="number">16</span>);<span class="comment">//返回 31 (16+15)</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">"010"</span>);<span class="comment">//未定：返回 10 或 8</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">param</span>)</span>&#123; content &#125;</span><br><span class="line"><span class="comment">// 定义箭头函数</span></span><br><span class="line"><span class="keyword">let</span> myFcunction = <span class="function">(<span class="params">param</span>) =&gt;</span> &#123; content &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义匿名/无名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">param</span>)</span>&#123; content &#125;</span><br><span class="line">(param) =&gt; &#123; content &#125;</span><br></pre></td></tr></table></figure><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><h3 id="最新类定义"><a href="#最新类定义" class="headerlink" title="最新类定义"></a>最新类定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Person类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//在类中，必须加constructor关键词，定义变量</span></span><br><span class="line">    <span class="keyword">constructor</span>(name, age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.age = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在类中定义方法</span></span><br><span class="line">    eat(food)&#123;</span><br><span class="line">        <span class="comment">//document.write()在网页上写入数据，注意设置“样式表”</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在吃<span class="subst">$&#123;food&#125;</span>&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    watchAv()&#123;</span><br><span class="line">        <span class="comment">//在方法中添加条件判断</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; <span class="number">18</span>)&#123;</span><br><span class="line">            <span class="comment">// alert(this.name + '只能看《熊出没》')</span></span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>只能看《熊出没》&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// alert(this.name + '正在看片...')</span></span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在看片...&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象 - 必须new</span></span><br><span class="line"><span class="comment">// new作用 - 给对象分配空间</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(<span class="string">'李四'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment">//调用类属性</span></span><br><span class="line">person1.eat(<span class="string">'蛋炒饭'</span>)</span><br><span class="line">person2.watchAv()</span><br></pre></td></tr></table></figure><h3 id="构造器函数"><a href="#构造器函数" class="headerlink" title="构造器函数"></a>构造器函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造器函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意使用关键词：prototype原形</span></span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params">food</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在吃<span class="subst">$&#123;food&#125;</span>&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.watchAv = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.age &lt; <span class="number">18</span>)&#123;</span><br><span class="line">        <span class="comment">// alert(this.name + '只能看《熊出没》')</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>只能看《熊出没》&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// alert(this.name + '正在看片...')</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在看片...&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> Person(<span class="string">'张三'</span>, <span class="number">20</span>)</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person(<span class="string">'李四'</span>, <span class="number">18</span>)</span><br><span class="line"><span class="comment">//调用类属性</span></span><br><span class="line">person1.eat(<span class="string">'蛋炒饭'</span>)</span><br><span class="line">person2.watchAv()</span><br></pre></td></tr></table></figure><h3 id="对象表达式（原始类创建法）"><a href="#对象表达式（原始类创建法）" class="headerlink" title="对象表达式（原始类创建法）"></a>对象表达式（原始类创建法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义常量</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="comment">//定义属性 - 注意各个属性之间的分隔符 - 逗号</span></span><br><span class="line">    name: <span class="string">'张三'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    eat: <span class="function"><span class="keyword">function</span>(<span class="params">food</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// alert(this.name + '正在吃' + food)</span></span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在吃<span class="subst">$&#123;food&#125;</span>&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    watchAv: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.age &gt;= <span class="number">18</span>)&#123;</span><br><span class="line">            <span class="comment">// alert(this.name + '正在看片。。。')</span></span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>正在看片。。。&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// alert(this.name + '只能看《熊出没》')</span></span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">`&lt;div class="divClass"&gt;<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>只能看《熊出没》&lt;/div&gt;&lt;br&gt;`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接调用属性</span></span><br><span class="line">person.eat(<span class="string">'红烧肉'</span>)</span><br><span class="line"><span class="comment">//修改属性</span></span><br><span class="line">person.age = <span class="number">17</span></span><br><span class="line">person.watchAv()</span><br></pre></td></tr></table></figure><h2 id="原生js实现关闭按钮效果"><a href="#原生js实现关闭按钮效果" class="headerlink" title="原生js实现关闭按钮效果"></a>原生js实现关闭按钮效果</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//定义变量closebtn 通过id获取元素</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> closebtn = <span class="built_in">document</span>.getElementById(<span class="string">'closeBtn'</span>)</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 关闭按钮 - 添加事件监听器 - 点击触发</span></span></span><br><span class="line"><span class="actionscript">    closebtn.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取相对应的元素 - 通过id</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> advDiv = <span class="built_in">document</span>.getElementById(<span class="string">'adv'</span>)</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// 指定元素 - 样式：显示元素属性 - 不显示（达到关闭效果）</span></span></span><br><span class="line"><span class="actionscript">        advDiv.style.display=<span class="string">'none'</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="页面写入数据"><a href="#页面写入数据" class="headerlink" title="页面写入数据"></a>页面写入数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串``撇：里面可以折行，也可以加入占位符：$&#123;&#125;、&amp;times;代表乘号、&amp;nbsp;代表空格</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">`<span class="subst">$&#123;j&#125;</span>&amp;times;<span class="subst">$&#123;i&#125;</span>=<span class="subst">$&#123;j*i&#125;</span>&amp;nbsp;`</span>)</span><br></pre></td></tr></table></figure><h2 id="页面弹窗显示数据"><a href="#页面弹窗显示数据" class="headerlink" title="页面弹窗显示数据"></a>页面弹窗显示数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">`<span class="subst">$&#123;j&#125;</span>&amp;times;<span class="subst">$&#123;i&#125;</span>=<span class="subst">$&#123;j*i&#125;</span>&amp;nbsp;`</span>)</span><br></pre></td></tr></table></figure><h2 id="原生js实现静态九九乘法表"><a href="#原生js实现静态九九乘法表" class="headerlink" title="原生js实现静态九九乘法表"></a>原生js实现静态九九乘法表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="comment">/*定义样式表*/</span></span></span><br><span class="line">            table &#123;</span><br><span class="line">                border-collapse: collapse;</span><br><span class="line">                margin: auto;</span><br><span class="line">            &#125;</span><br><span class="line">            td &#123;</span><br><span class="line">                border: 2px solid black;</span><br><span class="line">                width: 70px;</span><br><span class="line">                height: auto;</span><br><span class="line">                text-align: center;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-tag">rgba</span>(255, 0, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 添加表格标签，创建表格</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">`&lt;table&gt;`</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义行的循环次数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i+=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.write(<span class="string">`&lt;tr&gt;`</span>)</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 定义列的循环次数</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;=i;j+=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">window</span>.document.write(<span class="string">`&lt;td&gt;`</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(<span class="string">`<span class="subst">$&#123;j&#125;</span>&amp;times;<span class="subst">$&#123;i&#125;</span>=<span class="subst">$&#123;j*i&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">document</span>.write(<span class="string">`&lt;/td&gt;`</span>)</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.write(<span class="string">`&lt;/tr&gt;`</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.write(<span class="string">`&lt;/table&gt;`</span>)</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="原生js实现电子时钟功能"><a href="#原生js实现电子时钟功能" class="headerlink" title="原生js实现电子时钟功能"></a>原生js实现电子时钟功能</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="comment">/*设置时钟的显示框*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-id">#clock</span> &#123;</span></span><br><span class="line">                width: 280px;</span><br><span class="line">                height: 30px;</span><br><span class="line"><span class="css">                <span class="comment">/*水平居中*/</span></span></span><br><span class="line">                line-height: 30px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#7ad11c</span>;</span></span><br><span class="line">                text-align: center;</span><br><span class="line">                right: 10px;</span><br><span class="line">                top: 10px;</span><br><span class="line">                position: absolute;</span><br><span class="line">                color: white;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义一个块级元素标签 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"clock"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//定义常量 - 通过id获取页面元素</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> clockDiv = <span class="built_in">document</span>.getElementById(<span class="string">'clock'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//定义常量 - 设置一周的星期数</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> weekday = [<span class="string">'日'</span>,<span class="string">'一'</span>,<span class="string">'二'</span>,<span class="string">'三'</span>,<span class="string">'四'</span>,<span class="string">'五'</span>,<span class="string">'六'</span>]</span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">showClock</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//获取当前时间</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> year = now.getFullYear()</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// js中的getMonth()默认是由0~11的，所有直接调用这个方法的话数据会少1.因此需要额外加上1。</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> month = now.getMonth() + <span class="number">1</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> date = now.getDate()</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> hour = now.getHours()</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> minutes = now.getMinutes()</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> seconds = now.getSeconds()</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//当秒数小于10时，默认只显示一位，可进行string的拼接，完成两位数</span></span></span><br><span class="line">                if(seconds &lt; 10)&#123;</span><br><span class="line"><span class="actionscript">seconds = <span class="string">'0'</span> + seconds </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">//获取星期数，默认[0,1,2,3,4,5,6]</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> day = now.getDay()</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//定义页面的输出格式</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> fullStr = <span class="string">`<span class="subst">$&#123;year&#125;</span>年<span class="subst">$&#123;month&#125;</span>月<span class="subst">$&#123;date&#125;</span>日 <span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;minutes&#125;</span>:<span class="subst">$&#123;seconds&#125;</span> 星期<span class="subst">$&#123;weekday[day]&#125;</span>`</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">//将数据写入提前定义好的元素框中</span></span></span><br><span class="line">                clockDiv.textContent = fullStr</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">//调用函数 - 只显示一次时间</span></span></span><br><span class="line">            showClock()</span><br><span class="line"><span class="actionscript">            <span class="comment">//定义计时器：1000毫秒=1秒钟（依次调用执行代码）</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.setInterval(showClock,<span class="number">1000</span>)</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="阻止事件的默认行为"><a href="#阻止事件的默认行为" class="headerlink" title="阻止事件的默认行为"></a>阻止事件的默认行为</h2><p><strong><em>方法一（推荐）</em></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在回调函数体中，添加一个preventDefault()方法</span></span><br><span class="line">anchor[i].addEventListener(<span class="string">'click'</span>, (evt) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 添加事件对象的preventDefault方法 - 阻止事件的默认行为</span></span><br><span class="line">    evt.preventDefault()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>方法二</em></strong></p><ul><li>a标签为超链接标签，当执行a标签中的内容时，会默认刷新页面。</li><li>href=”javascript:void(0);”这个的含义是，让超链接去执行一个js函数，而不是去跳转到一个地址，而void(0)表示一个空的方法，也就是不执行js函数。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加 href="javascript:void(0)" 表示：伪协议，不做任何操作，阻止a标签的默认行为 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个a标签的href属性都要添加 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0)"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="阻止事件的传播"><a href="#阻止事件的传播" class="headerlink" title="阻止事件的传播"></a>阻止事件的传播</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evt.stopPropagation()  <span class="comment">// 阻止事件的传播</span></span><br></pre></td></tr></table></figure><h2 id="原生js获取页面元素的方法"><a href="#原生js获取页面元素的方法" class="headerlink" title="原生js获取页面元素的方法"></a>原生js获取页面元素的方法</h2><h3 id="图片循环切换效果"><a href="#图片循环切换效果" class="headerlink" title="图片循环切换效果"></a>图片循环切换效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#adv</span> &#123;</span></span><br><span class="line">                width: 960px;</span><br><span class="line">                margin: auto;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-class">.aimgs</span> &#123;</span></span><br><span class="line">                width: 960px;</span><br><span class="line">                margin: auto;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"adv"</span> <span class="attr">class</span>=<span class="string">"aimgs"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;img src="" alt=""&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/日本国模人体艺术图片.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"960"</span> <span class="attr">name</span>=<span class="string">"photo01"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;img src="images/蓝色星空近月雪山雪景.jpg" alt="" width="960" name="photo02"&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//document.getElementById('标识') --&gt; HTMLElement</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//document.getElementsByTagName('标签名') --&gt; NodeList</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//document.getElementsByClassName('类名') --&gt; NodeList</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//document.querySelector('样式表选择器') --&gt; HTMLElement</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//document.querySelectorAll('样式表选择器') --&gt; NodeList</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//firstChild / lastChild / children --&gt; 获取子节点</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//parentNode --&gt; 获取父节点</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//previousSibiling / nextSibiling --&gt; 获取兄弟节点</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// const img = document.getElementById('adv').children[0]</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// const img = document.getElementsByTagName('img')[1]</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// const img = document.getElementsByClassName('aimgs')</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// const img = document.querySelector('#adv&gt;img')</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// const img = document.querySelectorAll('#adv&gt;img')[0]</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// const img = document.getElementById('adv').children[0]</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> img = <span class="built_in">document</span>.querySelector(<span class="string">'#adv&gt;img'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> imageNames = [<span class="string">'日本美女背影人体艺术图片.jpg'</span>,<span class="string">'日本大胆美女人体写真图片.jpg'</span>,<span class="string">'日本国模人体艺术图片.jpg'</span>, <span class="string">'蓝色星空近月雪山雪景.jpg'</span>]</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> imageIndex = <span class="number">0</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">switchImage</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 先输出第一张图片，再 +1</span></span></span><br><span class="line"><span class="actionscript">                img.src = <span class="string">'images/'</span> + imageNames[imageIndex]</span></span><br><span class="line">                imageIndex += 1</span><br><span class="line"><span class="actionscript">                <span class="comment">// 图片数组中的 “下标” 与 “总长度” 取余 - 可以达到依次循环 “下标” 的效果</span></span></span><br><span class="line">                imageIndex %= imageNames.length</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义计时器setInterval(执行的函数, 毫秒) - 循环切换图片</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> timeId = setInterval(switchImage, <span class="number">2000</span>)</span></span><br><span class="line"><span class="actionscript">   <span class="comment">// 添加时间监听器 - 鼠标放置触发</span></span></span><br><span class="line"><span class="actionscript">            img.addEventListener(<span class="string">'mouseover'</span>,() =&gt; clearInterval(timeId))</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 添加时间监听器 - 鼠标移除触发</span></span></span><br><span class="line"><span class="actionscript">            img.addEventListener(<span class="string">'mouseout'</span>,() =&gt; &#123;timeId = setInterval(switchImage, <span class="number">2000</span>)&#125;)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 添加时间监听器 - 鼠标移动触发（加速图片切换速度，秒换）</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// img.addEventListener('mousemove',() =&gt; &#123;timeId = setInterval(switchImage, 2000)&#125;)</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原生js修改页面元素的标签属性"><a href="#原生js修改页面元素的标签属性" class="headerlink" title="原生js修改页面元素的标签属性"></a>原生js修改页面元素的标签属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#buttons</span> &#123;</span></span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line">            button &#123;</span><br><span class="line">                width: 120px;</span><br><span class="line">                height: 50px;</span><br><span class="line"><span class="css">                <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line">                padding-top: 10px;</span><br><span class="line">                font: 30px/10px "黑体";</span><br><span class="line">                border: none;</span><br><span class="line">                background-color: red;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span>草莓<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span>蓝莓<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span>西瓜<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span>芒果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">disabled</span>&gt;</span>柠檬<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//通过选择器获取页面多个元素 - document.querySelectorAll() - NodeList</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> allButtons = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#buttons&gt;button'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// forEach()的简洁写法</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// forEach() - 遍历获取到的元素数组 - button</span></span></span><br><span class="line"><span class="javascript">            allButtons.forEach(<span class="function"><span class="params">button</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 无名函数体 - 给button元素添加事件监听器 - click触发</span></span></span><br><span class="line"><span class="actionscript">                button.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 无名函数体 - 定义复选框 = button元素数组中的第一个元素</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> checkbox = button.firstChild</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 复选框 - 选中 = 取反值</span></span></span><br><span class="line">                    checkbox.checked = !checkbox.checked</span><br><span class="line"><span class="actionscript">                    <span class="comment">// button元素 - 样式表 - 背景颜色 </span></span></span><br><span class="line"><span class="actionscript">                    button.style.backgroundColor = checkbox.checked ? <span class="string">'green'</span> : <span class="string">'red'</span></span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//依次循环，获取相应的页面元素 - 注意变量的设置 - var/let</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// ES6的做法 - 设置块级变量，正常运行</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// for (let i = 0; i &lt; allButtons.length; i += 1) &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 闭包（closure） - 将一个块级作用域的变量的生命周期延长至了全局</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// allButtons[i].addEventListener('click', () =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// let checkbox = allButtons[i].firstChild</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// checkbox.checked = !checkbox.checked</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// allButtons[i].style.backgroundColor = checkbox.checked ? 'green' : 'red'</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// ES5的做法 - 回调式编程 - 在函数中添加一个事件对象作为参数（event不是关键词）</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 我们知道事件发生时要做什么，但是我们不知道事件什么时候发生</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 在这种情况下，我们就要放入一个回调函数（callback function）</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 绑定事件时传入的函数，通常我们称之为回调函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 当浏览器执行该回调函数时，会传入一个代表事件的对象</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 通过事件对象的target属性，就可以获取到事件源（谁引发了事件）</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 注意 - 全局变量</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// for (var i = 0; i &lt; allButtons.length; i += 1) &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// allButtons[i].addEventListener('click', (event) =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// let checkbox = event.target.firstChild</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// checkbox.checked = !checkbox.checked</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// event.target.style.backgroundColor = checkbox.checked? 'green' : 'red'</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原生js修改标签的属性和内容"><a href="#原生js修改标签的属性和内容" class="headerlink" title="原生js修改标签的属性和内容"></a>原生js修改标签的属性和内容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改标签的文本内容 - textContent</span></span><br><span class="line"><span class="comment">// 修改标签的内容 - innerHTML</span></span><br><span class="line"><span class="comment">// 修改标签属性 - img.src - img.title - img.style - Checkbox.checked</span></span><br></pre></td></tr></table></figure><h3 id="原生js添加和删除页面元素"><a href="#原生js添加和删除页面元素" class="headerlink" title="原生js添加和删除页面元素"></a>原生js添加和删除页面元素</h3><h4 id="动态列表效果"><a href="#动态列表效果" class="headerlink" title="动态列表效果"></a>动态列表效果</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span><span class="selector-pseudo">:960px</span>;</span></span><br><span class="line">                height: auto;</span><br><span class="line">                margin: auto;</span><br><span class="line"><span class="css">                <span class="comment">/* text-align: center; */</span></span></span><br><span class="line"><span class="css">                <span class="comment">/* background-color: #55FF00; */</span></span></span><br><span class="line">                align-content: center;</span><br><span class="line"><span class="css">                <span class="comment">/* position: relative ; */</span></span></span><br><span class="line"><span class="css">                <span class="comment">/* left: 600px; */</span></span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#fruits</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">                width: 150px;</span><br><span class="line">                height: auto;</span><br><span class="line">                font: 20px/15px '黑体';</span><br><span class="line">                color: white;</span><br><span class="line">                text-align: center;</span><br><span class="line">                padding: 10px;</span><br><span class="line">                margin: 2px;</span><br><span class="line">                background-color: rgba(85, 170, 255,1);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#fruits</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">                float: right;</span><br><span class="line">                color: white;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-tag">div</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span></span><br><span class="line">                width: 170px;</span><br><span class="line">                height: 30px;</span><br><span class="line">                border: none;</span><br><span class="line">                border-bottom: 1px solid darkgray;</span><br><span class="line">                outline: none;</span><br><span class="line">                position: relative;</span><br><span class="line">                left: 40px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#ok</span> &#123;</span></span><br><span class="line">                width: 80px;</span><br><span class="line">                height: auto;</span><br><span class="line">                font: 20px/15px '黑体';</span><br><span class="line">                text-align: center;</span><br><span class="line">                color: white;</span><br><span class="line">                padding: 10px;</span><br><span class="line">                border: none;</span><br><span class="line">                background-color: red;</span><br><span class="line">                outline: none;</span><br><span class="line">                position: relative;</span><br><span class="line">                left: 40px;</span><br><span class="line"><span class="css">                <span class="comment">/* 光标 - 指针 */</span></span></span><br><span class="line">                cursor: pointer; </span><br><span class="line">            &#125;</span><br><span class="line">            input &#123;</span><br><span class="line">                text-align: center;</span><br><span class="line">                font: 20px/10px "黑体";</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"fruits"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 添加 href="javascript:void(0)" 表示：伪协议，不做任何操作，阻止a标签的默认行为 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>火龙果<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>西瓜<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ok"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义清除元素的函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">removeListItem</span><span class="params">(evt)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 阻止事件的默认行为</span></span></span><br><span class="line">                evt.preventDefault()</span><br><span class="line"><span class="actionscript">                <span class="comment">// 通过事件中的target属性 - 获取到标签的父节点</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> li = evt.target.parentNode</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 通过父标签 - 清除字标签</span></span></span><br><span class="line">                ul.removeChild(li)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义添加元素的函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">addListItem</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> name = input.value.trim()</span></span><br><span class="line">                if (name)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 通过document对象的createElement()方法，可以创建新的标签</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 在li标签中添加文本内容 - name值</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// li.textContent = name</span></span></span><br><span class="line">                    li.innerHTML = name</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 创建a标签</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 在a标签中添加内容 - 实体字符 - ×（cha）</span></span></span><br><span class="line"><span class="actionscript">                    a.innerHTML = <span class="string">'&amp;times;'</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 在a标签中添加属性 - href</span></span></span><br><span class="line"><span class="actionscript">                    a.href = <span class="string">''</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// a标签 - 添加事件监听器 - 鼠标点击</span></span></span><br><span class="line"><span class="actionscript">                    a.addEventListener(<span class="string">'click'</span>,removeListItem)</span></span><br><span class="line">                    li.appendChild(a)</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 通过父标签的appendChild()方法，可将字标签追加到父标签的末尾</span></span></span><br><span class="line">                    ul.appendChild(li)</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 通过父标签的insertBefore(arg1,arg2)方法，可将字标签添加到父标签的指定位置</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// ul.insertBefore(li, ul.firstChild)</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 清除输入框中的值 - 默认值</span></span></span><br><span class="line"><span class="actionscript">                    input.value = <span class="string">''</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 标签的focus()方法，可以让标签获得焦点</span></span></span><br><span class="line">                    input.focus()</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 标签的blur()方法，可以让标签失去焦点</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// input.blur()</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取相对应的整个无序列表 - 通过id=“fruits”</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> ul = <span class="built_in">document</span>.querySelector(<span class="string">'#fruits'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取相对应的输入框 - 通过id="fruits"的相邻兄弟选择器</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// const input = document.querySelector('#fruits+input')</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// const input = document.querySelector('#fruits+input')</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取相对应的输入框 - 通过ul的下一个兄弟元素</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> input = ul.nextElementSibling</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 输入框 - 添加事件监听器 - 键盘Enter(回车)</span></span></span><br><span class="line"><span class="actionscript">            input.addEventListener(<span class="string">'keypress'</span>, (evt) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// evt.keyCode - 事件触发代码 - 13(ascii码值)代表Enter</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 页面弹窗，查看触发代码</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// alert(evt.keyCode)</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// evt.which - 解决浏览器兼容问题</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> code = evt.keyCode || evt.which</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 事件触发条件 - Enter(回车)</span></span></span><br><span class="line">                if (code == 13)&#123;</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 调用添加元素函数</span></span></span><br><span class="line">                    addListItem()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取相对应的按钮 - 通过id="ok"</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> okButton = <span class="built_in">document</span>.querySelector(<span class="string">'#ok'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 按钮 - 添加事件监听器 - 鼠标点击</span></span></span><br><span class="line"><span class="actionscript">            okButton.addEventListener(<span class="string">'click'</span>, () =&gt; &#123; addListItem() &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 获取无序列表中的全部超链接 - 生成一个数组</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> anchor = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#fruits&gt;li&gt;a'</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// forEach()遍历所有的超链接 - 定义删除函数 - 删除元素</span></span></span><br><span class="line"><span class="javascript">            anchor.forEach(<span class="function"><span class="params">delAnchor</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 给删除函数添加事件监听器 - 点击触发 - 定义触发事件（用无名函数定义）</span></span></span><br><span class="line"><span class="actionscript">                delAnchor.addEventListener(<span class="string">'click'</span>, (event) =&gt; &#123;</span></span><br><span class="line">                    event.preventDefault()</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 触发事件（removeChild关键词） - 通过父类ul，清除li单个列表 - click触发</span></span></span><br><span class="line">                    ul.removeChild(delAnchor.parentNode)</span><br><span class="line"><span class="actionscript">                    <span class="comment">// removeListItem()</span></span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 普通for()循环遍历超链接 - 删除元素</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// for(let i = 0; i &lt; anchor.length; i += 1)&#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 获取到单个元素 - 添加事件监听器 - 设置回调函数 </span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// anchor[i].addEventListener('click', (event) =&gt; &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 添加事件对象的preventDefault方法 - 阻止事件的默认行为</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// event.preventDefault()</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// // 设定回调函数中的触发事件</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// ul.removeChild(anchor[i].parentNode)</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// &#125;</span></span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="导入jQuery"><a href="#导入jQuery" class="headerlink" title="导入jQuery"></a>导入jQuery</h2><ul><li>url - <a href="http://www.bootcdn.cn/jquery/" target="_blank" rel="noopener">www.bootcdn.cn/jquery/</a></li></ul><h2 id="jQuery规范写法"><a href="#jQuery规范写法" class="headerlink" title="jQuery规范写法"></a>jQuery规范写法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; content &#125;)  <span class="comment">// 第一种写法</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; content &#125;)  <span class="comment">// 第二种写法</span></span><br><span class="line">$(() =&gt; &#123; content &#125;)  <span class="comment">// 第三种写法</span></span><br></pre></td></tr></table></figure><h2 id="jQuery操作表格"><a href="#jQuery操作表格" class="headerlink" title="jQuery操作表格"></a>jQuery操作表格</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#divTable</span> &#123;</span></span><br><span class="line">                border-collapse: collapse;</span><br><span class="line"><span class="css">                <span class="comment">/* margin: auto; */</span></span></span><br><span class="line">                margin-bottom: 10px;</span><br><span class="line">            &#125;</span><br><span class="line">            th, td &#123;</span><br><span class="line">                border: 1px solid black;</span><br><span class="line">                width: 100px;</span><br><span class="line">                height: 30px;</span><br><span class="line">                text-align: center;</span><br><span class="line">                color: rgba(0, 0, 0, 1);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"divA"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"divTable"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">caption</span>&gt;</span>数据统计表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>身高<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">th</span>&gt;</span>体重<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item1a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item2a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item3a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item4a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item5a<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item1b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item2b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item3b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item4b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item5b<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item1c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item2c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item3c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item4c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item5c<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item1d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item2d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item3d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item4d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item5d<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item1e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item2e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item3e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item4e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">td</span>&gt;</span>item5e<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"pretty"</span>&gt;</span>隔行换色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"cancel"</span>&gt;</span>清除背景色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"clear"</span>&gt;</span>清除所有<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"remove"</span>&gt;</span>删除一行<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"hide"</span>&gt;</span>表格淡出<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// on/off/one - 绑定事件/取消事件/绑定一次事件</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 隔行换色 - css()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#pretty'</span>).on(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// tr:odd/event - 行：奇数/偶数 - 系统默认第一行为0行</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#divTable&gt;tbody&gt;tr:odd'</span>).css(<span class="string">'background-color'</span>,<span class="string">'lightgray'</span>)</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#divTable&gt;tbody&gt;tr:even'</span>).css(<span class="string">'background-color'</span>,<span class="string">'lightgreen'</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line"><span class="actionscript">            <span class="comment">// $('选择器') --&gt; jQuery对象 --&gt; 封装了很多方法</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#cancel'</span>).on(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// tr:odd/event - 行：奇数/偶数</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#divTable&gt;tbody&gt;tr'</span>).css(<span class="string">'background-color'</span>,<span class="string">''</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 清除数据 - empty()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#clear'</span>).on(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#divTable&gt;tbody&gt;tr'</span>).empty()</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 删除一行(last-child/first-child) - remove()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#remove'</span>).on(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#divTable&gt;tbody&gt;tr:last-child'</span>).remove()</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 表格淡出/淡入 - fadeOut()/fadeIn()</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#hide'</span>).on(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> content = $(<span class="string">'#hide'</span>).text()</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(content == <span class="string">'表格淡出'</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#divTable'</span>).fadeOut(<span class="number">1000</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'#hide'</span>).text(<span class="string">'表格淡入'</span>)</span></span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="actionscript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#divTable'</span>).fadeIn(<span class="number">2000</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'#hide'</span>).text(<span class="string">'表格淡出'</span>)</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery实现动态列表"><a href="#jQuery实现动态列表" class="headerlink" title="jQuery实现动态列表"></a>jQuery实现动态列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>动态列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="css">                <span class="selector-tag">width</span><span class="selector-pseudo">:960px</span>;</span></span><br><span class="line">                height: auto;</span><br><span class="line">                margin: auto;</span><br><span class="line"><span class="css">                <span class="comment">/* text-align: center; */</span></span></span><br><span class="line"><span class="css">                <span class="comment">/* background-color: #55FF00; */</span></span></span><br><span class="line">                align-content: center;</span><br><span class="line"><span class="css">                <span class="comment">/* position: relative ; */</span></span></span><br><span class="line"><span class="css">                <span class="comment">/* left: 600px; */</span></span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#fruits</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line">                width: 150px;</span><br><span class="line">                height: auto;</span><br><span class="line">                font: 20px/15px '黑体';</span><br><span class="line">                color: white;</span><br><span class="line">                text-align: center;</span><br><span class="line">                padding: 10px;</span><br><span class="line">                margin: 2px;</span><br><span class="line">                background-color: rgba(85, 170, 255,1);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#fruits</span> &gt; <span class="selector-tag">li</span> &gt; <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">                float: right;</span><br><span class="line">                color: white;</span><br><span class="line">                text-decoration: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-tag">div</span> <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span></span><br><span class="line">                width: 170px;</span><br><span class="line">                height: 30px;</span><br><span class="line">                border: none;</span><br><span class="line">                border-bottom: 1px solid darkgray;</span><br><span class="line">                outline: none;</span><br><span class="line">                position: relative;</span><br><span class="line">                left: 40px;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#ok</span> &#123;</span></span><br><span class="line">                width: 80px;</span><br><span class="line">                height: auto;</span><br><span class="line">                font: 20px/15px '黑体';</span><br><span class="line">                text-align: center;</span><br><span class="line">                color: white;</span><br><span class="line">                padding: 10px;</span><br><span class="line">                border: none;</span><br><span class="line">                background-color: red;</span><br><span class="line">                outline: none;</span><br><span class="line">                position: relative;</span><br><span class="line">                left: 40px;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">            &#125;</span><br><span class="line">            input &#123;</span><br><span class="line">                text-align: center;</span><br><span class="line">                font: 20px/10px "黑体";</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"fruits"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 添加 href="javascript:void(0)" 表示：伪协议，不做任何操作，阻止a标签的默认行为 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>苹果<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>香蕉<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>火龙果<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>西瓜<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>×<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fruit"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ok"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"确定"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 定义删除元素函数</span></span></span><br><span class="line"><span class="actionscript">            <span class="function"><span class="keyword">function</span> <span class="title">removeListItem</span><span class="params">(evt)</span> </span>&#123;</span></span><br><span class="line">                evt.preventDefault()</span><br><span class="line"><span class="javascript">                $(evt.target).parent().remove()</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            $(() =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 删除指定元素</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#fruits&gt;li&gt;a'</span>).on(<span class="string">'click'</span>, removeListItem)</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 添加指定元素与删除</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ok'</span>).on(<span class="string">'click'</span>, (evt) =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 返回被选元素的前一个同级元素</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> input = $(<span class="string">'#ok'</span>).prev()</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> name = input.val().trim()</span></span><br><span class="line">                    if (name) &#123;</span><br><span class="line"><span class="javascript">                        $(<span class="string">'#fruits'</span>).append(</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'&lt;li&gt;'</span>).text(name).append(</span></span><br><span class="line"><span class="javascript">                                $(<span class="string">'&lt;a href=""&gt;'</span>).html(<span class="string">'&amp;times;'</span>).on(<span class="string">'click'</span>, removeListItem)</span></span><br><span class="line">                            )</span><br><span class="line">                        )</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="actionscript">                    input.val(<span class="string">''</span>).get(<span class="number">0</span>).focus()</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery实现周公解梦"><a href="#jQuery实现周公解梦" class="headerlink" title="jQuery实现周公解梦"></a>jQuery实现周公解梦</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>周公解梦<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">            * &#123;</span><br><span class="line"><span class="css">                <span class="comment">/* border: 1px solid red; */</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#sou</span> &#123;</span></span><br><span class="line">                width: 1280px;</span><br><span class="line">                height: 200px;</span><br><span class="line">                text-align: center;</span><br><span class="line">                margin: auto;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#ok</span> &#123;</span></span><br><span class="line">                border: none;</span><br><span class="line">                padding: 15px;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-id">#00a200</span>;</span></span><br><span class="line">                color: white;</span><br><span class="line">                outline: none;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#ok</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line">                background-color: red;</span><br><span class="line">            &#125;</span><br><span class="line">            input &#123;</span><br><span class="line">                margin-top: 150px;</span><br><span class="line">                font: 30px/10px "黑体";</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-tag">input</span><span class="selector-attr">[type=text]</span> &#123;</span></span><br><span class="line">                border: none;</span><br><span class="line"><span class="css">                <span class="selector-tag">border-bottom</span>: 2<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000000</span>;</span></span><br><span class="line">                outline: none;</span><br><span class="line">                text-align: center;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#results</span> &#123;</span></span><br><span class="line">                width: 1280px;</span><br><span class="line">                height: auto;</span><br><span class="line">                text-align: center;</span><br><span class="line">                margin: auto;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="css">            <span class="selector-id">#results</span> &gt; <span class="selector-tag">p</span> &#123;</span></span><br><span class="line">                text-align: left;</span><br><span class="line"><span class="css">                <span class="selector-tag">background-color</span>: <span class="selector-tag">rgba</span>(140, 208, 103, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"sou"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">'input'</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"请输入查询的关键字"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ok"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"搜索"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"results"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            $(() =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#ok'</span>).on(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> input = $(<span class="string">'#input'</span>).val().trim()</span></span><br><span class="line">                    if (input.length &gt; 0) &#123;</span><br><span class="line"><span class="actionscript">                        <span class="keyword">var</span> url = <span class="string">'http://api.tianapi.com/txapi/dream/index'</span></span></span><br><span class="line"><span class="javascript">                        $.ajax(&#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                            <span class="string">"url"</span>: url,</span></span><br><span class="line"><span class="actionscript">                            <span class="string">"type"</span>: <span class="string">"get"</span>, <span class="comment">//"post" - "delete" - "put" - "patch"</span></span></span><br><span class="line"><span class="actionscript">                            <span class="string">"data"</span>: &#123;</span></span><br><span class="line"><span class="actionscript">                                <span class="string">"key"</span>: <span class="string">"ce844c3dc80a5b21da6c36e82b52dca7"</span>,</span></span><br><span class="line"><span class="actionscript">                                <span class="string">"word"</span>: input,</span></span><br><span class="line"><span class="actionscript">                                <span class="string">"num"</span>: <span class="number">10</span></span></span><br><span class="line">                            &#125;,</span><br><span class="line"><span class="actionscript">                            <span class="string">"dataType"</span>: <span class="string">"json"</span>, <span class="comment">// "xml" - "text"</span></span></span><br><span class="line"><span class="javascript">                            <span class="string">"success"</span>: <span class="function">(<span class="params">jsond</span>) =&gt;</span> &#123;</span></span><br><span class="line">                                if (jsond.code == 250) &#123;</span><br><span class="line"><span class="javascript">                                    $(<span class="string">'#results'</span>).append($(<span class="string">'&lt;p&gt;'</span>).html(jsond.msg))</span></span><br><span class="line"><span class="actionscript">                                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; jsond.newslist.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">                                        $(<span class="string">'#results'</span>).append($(<span class="string">'&lt;p&gt;&lt;br&gt;'</span>).html(jsond.newslist[i].result))</span></span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数的四种用法"><a href="#函数的四种用法" class="headerlink" title="$函数的四种用法"></a>$函数的四种用法</h2><p>第一种 - 函数的<strong>参数</strong>为<strong>匿名函数</strong>或<strong>箭头函数</strong>，传入的函数是<strong>页面加载完成</strong>后要执行的<strong>回调函数</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; &#125;)</span><br></pre></td></tr></table></figure><p>第二种 - 函数的<strong>参数</strong>为<strong>样式表选择器</strong>，获取<strong>页面元素</strong>得到一个<strong>jQuery对象</strong>（伪数组=原生javascript对象）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#fruits&gt;li&gt;a'</span>).on(<span class="string">'click'</span>, (evt) =&gt; &#123; evt.preventDefault() &#125;)</span><br></pre></td></tr></table></figure><p>第三种 - 函数的<strong>参数</strong>为<strong>标签字符串</strong>，<strong>创建</strong>一个<strong>新的元素</strong>并获得对应的<strong>jQuery对象</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'&lt;li&gt;'</span>).text(name).append($(<span class="string">'&lt;a herf=""&gt;'</span>))</span><br></pre></td></tr></table></figure><p>第四种 - 函数的<strong>参数</strong>为一个<strong>原生的javascript对象</strong>，返回与原生javascript对象<strong>对应</strong>的<strong>jQuery对象</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(evt.target).parent().remove()</span><br></pre></td></tr></table></figure><h2 id="jQuery中常用函数"><a href="#jQuery中常用函数" class="headerlink" title="jQuery中常用函数"></a>jQuery中常用函数</h2><ul><li>prev() - 返回被选元素的前一个同级元素。</li><li>val() - 返回或设置被选元素的 value 属性。</li><li>trim() - 用于删除字符串的头尾空格。</li><li>prepend() - 追加到前面</li></ul><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h2 id="测试地址"><a href="#测试地址" class="headerlink" title="测试地址"></a>测试地址</h2><ul><li>url - <a href="http://www.tianapi.com" target="_blank" rel="noopener">www.tianapi.com</a></li></ul><h2 id="原生Ajax请求-加载图片"><a href="#原生Ajax请求-加载图片" class="headerlink" title="原生Ajax请求 - 加载图片"></a>原生Ajax请求 - 加载图片</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"photos"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"load"</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> photos = <span class="built_in">document</span>.querySelector(<span class="string">'#photos'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> loadBtn = <span class="built_in">document</span>.querySelector(<span class="string">'#load'</span>)</span></span><br><span class="line"><span class="actionscript">                <span class="comment">// 符号&amp; - 添加参数</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// num - 显示最大数量</span></span></span><br><span class="line"><span class="actionscript">                <span class="comment">// page - 显示页码</span></span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> url = <span class="string">'http://api.tianapi.com/meinv/index?key=ce844c3dc80a5b21da6c36e82b52dca7&amp;num=10&amp;page='</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> page = <span class="number">0</span></span></span><br><span class="line"><span class="actionscript">                loadBtn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span></span><br><span class="line">                    page += 1</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 创建异步请求对象</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// open()方法的参数 - 第一个：请求类型 - 第二个：url - 第三个：必须设置为true（异步请求）/false（同步请求）</span></span></span><br><span class="line"><span class="actionscript">                    xhr.open(<span class="string">'get'</span>, url + page, <span class="literal">true</span>)</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 绑定事件回调函数 - 在收到服务器返回的数据后，要对页面进行局部刷新</span></span></span><br><span class="line"><span class="actionscript">                    xhr.addEventListener(<span class="string">'readystatechange'</span>, () =&gt; &#123;</span></span><br><span class="line">                        if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span><br><span class="line"><span class="actionscript">                            <span class="comment">// alert(typeof xhr.responseText)</span></span></span><br><span class="line"><span class="actionscript">                            <span class="comment">// 将返回的json字符串解析为javascript对象</span></span></span><br><span class="line"><span class="javascript">                            <span class="keyword">let</span> json = <span class="built_in">JSON</span>.parse(xhr.responseText)</span></span><br><span class="line"><span class="actionscript">                            <span class="comment">// newslist - josn文件中的属性</span></span></span><br><span class="line"><span class="javascript">                            json.newslist.forEach(<span class="function">(<span class="params">meinv</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">                                <span class="comment">// console.log(mm.picUrl)</span></span></span><br><span class="line"><span class="actionscript">                                <span class="comment">// 创建img标签</span></span></span><br><span class="line"><span class="javascript">                                <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</span></span><br><span class="line"><span class="actionscript">                                <span class="comment">// meinv.picUrl - json文件中的属性</span></span></span><br><span class="line">                                img.src = meinv.picUrl</span><br><span class="line">                                img.width = 300</span><br><span class="line"><span class="actionscript">                                <span class="comment">// insertBefore() - 在现有的子节点前插入一个新的子节点</span></span></span><br><span class="line"><span class="actionscript">                                <span class="comment">// appendChild() - 将元素添加到指定的节点中</span></span></span><br><span class="line">                                photos.appendChild(img, photos.lastElementChild)</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line"><span class="actionscript">                    <span class="comment">// 发送异步请求 - null可省略</span></span></span><br><span class="line"><span class="actionscript">                    xhr.send(<span class="literal">null</span>)</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)()</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery实现Ajax请求-加载图片"><a href="#jQuery实现Ajax请求-加载图片" class="headerlink" title="jQuery实现Ajax请求 - 加载图片"></a>jQuery实现Ajax请求 - 加载图片</h2><h3 id="方法一（推荐）"><a href="#方法一（推荐）" class="headerlink" title="方法一（推荐）"></a>方法一（推荐）</h3><ul><li>$.ajax({ })方法 - 万能方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery实现Ajax请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"photos"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"load"</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            $(() =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> url = <span class="string">'http://api.tianapi.com/meinv/index'</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> page = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#load'</span>).on(<span class="string">'click'</span>, (evt) =&gt; &#123;</span></span><br><span class="line">                    page += 1</span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> data = &#123;<span class="string">"key"</span>:<span class="string">"ce844c3dc80a5b21da6c36e82b52dca7"</span>,<span class="string">"page"</span>:page,<span class="string">"num"</span>:<span class="number">10</span>&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    $.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"url"</span>: url,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"type"</span>: <span class="string">"get"</span>, <span class="comment">//"post" - "delete" - "put" - "patch"</span></span></span><br><span class="line"><span class="actionscript">                        <span class="string">"data"</span>: data,</span></span><br><span class="line"><span class="actionscript">                        <span class="string">"dataType"</span>: <span class="string">"json"</span>,  <span class="comment">// "xml" - "text"</span></span></span><br><span class="line"><span class="actionscript">                        <span class="string">"headers"</span>: &#123;&#125;,</span></span><br><span class="line"><span class="javascript">                        <span class="string">"success"</span>: <span class="function">(<span class="params">json</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            json.newslist.forEach(<span class="function">(<span class="params">mm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                                $(<span class="string">'#photos'</span>).append($(<span class="string">'&lt;img&gt;'</span>).attr(<span class="string">'src'</span>, mm.picUrl).attr(<span class="string">'width'</span>, <span class="string">'300'</span>))</span></span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;,</span><br><span class="line"><span class="javascript">                        <span class="string">"error"</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;&#125;</span></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li>$.getJSON(url,data,()=&gt;{ })方法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>jQuery实现Ajax请求<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"photos"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"load"</span>&gt;</span>加载更多<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">            $(() =&gt; &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">const</span> url = <span class="string">'http://api.tianapi.com/meinv/index'</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> page = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#load'</span>).on(<span class="string">'click'</span>, (evt) =&gt; &#123;</span></span><br><span class="line">                    page += 1</span><br><span class="line"><span class="javascript">                    <span class="keyword">let</span> data = &#123;<span class="string">"key"</span>:<span class="string">"ce844c3dc80a5b21da6c36e82b52dca7"</span>,<span class="string">"page"</span>:page&#125;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// $对象的getJSON()方法可以执行异步请求（get请求）获得服务器返回的JSON格式的数据</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 第一个参数是请求的url（统一资源定位符）</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 第二个参数是要发送给服务器的数据（JSON格式），如果没有数据发送给服务器可以省略不写</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// 第三个参数是请求成功服务器返回数据之后要执行的回调函数，其参数为服务器返回的内容处</span></span></span><br><span class="line"><span class="javascript">                    $.getJSON(url, data, (json) =&gt; &#123;  <span class="comment">// 只能发送get请求，只能接受json数据</span></span></span><br><span class="line"><span class="javascript">                        json.newslist.forEach(<span class="function">(<span class="params">mm</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                            $(<span class="string">'#photos'</span>).append($(<span class="string">'&lt;img&gt;'</span>).attr(<span class="string">'src'</span>, mm.picUrl).attr(<span class="string">'width'</span>, <span class="string">'300'</span>))</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Echarts创建图表"><a href="#Echarts创建图表" class="headerlink" title="Echarts创建图表"></a>Echarts创建图表</h1><ul><li>url - <a href="http://www.echartsjs.com" target="_blank" rel="noopener">www.echartsjs.com</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">            <span class="selector-id">#box</span> &#123;</span></span><br><span class="line">                width: 600px;</span><br><span class="line">                height: 400px;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入Echarts --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;script src="https://cdn.bootcdn.net/ajax/libs/echarts/4.8.0/echarts.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设定图表元素的位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 基于准备好的DOM页面，初始化echarts实例</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> myEcharts = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'box'</span>))</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 指定图表的配置和数据</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> option = &#123;</span></span><br><span class="line">                title: &#123;</span><br><span class="line"><span class="actionscript">                    text: <span class="string">'Echarts 入门示例'</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                tooltop: &#123;&#125;,</span><br><span class="line">                legend: &#123;</span><br><span class="line"><span class="actionscript">                    data: [<span class="string">'销量'</span>]</span></span><br><span class="line">                &#125;,</span><br><span class="line">                xAxis: &#123;</span><br><span class="line"><span class="actionscript">                    data: [<span class="string">"衬衫"</span>,<span class="string">"羊毛衫"</span>,<span class="string">"雪纺衫"</span>,<span class="string">"裤子"</span>,<span class="string">"高跟鞋"</span>,<span class="string">"袜子"</span>]</span></span><br><span class="line">                &#125;,</span><br><span class="line">                yAxis: &#123;&#125;,</span><br><span class="line">                series: [&#123;</span><br><span class="line"><span class="actionscript">                    name: <span class="string">'销量'</span>,</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">// bar - 柱状图；pie - 饼图；。。。</span></span></span><br><span class="line"><span class="actionscript">                    type: <span class="string">'bar'</span>,</span></span><br><span class="line">                    data: [5, 20, 36, 10, 10, 20]</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// 使用刚指定的配置项和数据，显示图表</span></span></span><br><span class="line">            myEcharts.setOption(option)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="bootstrap可视化定制页面"><a href="#bootstrap可视化定制页面" class="headerlink" title="bootstrap可视化定制页面"></a>bootstrap可视化定制页面</h1><ul><li>url - <a href="http://www.ibootstrap.cn" target="_blank" rel="noopener">www.ibootstrap.cn</a></li></ul><h1 id="字体的三种分类"><a href="#字体的三种分类" class="headerlink" title="字体的三种分类"></a>字体的三种分类</h1><ul><li><strong><em>衬线字体、非衬线字体、等宽字体</em></strong></li></ul><h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP / IP"></a>TCP / IP</h1><ul><li>Internet - TCP / IP - 协议族</li><li>结构层<ol><li>应用层 - HTTP / SMTP / POP3 / FTP / SSH / QQ</li><li>传输层 - TCP/UDP - 端到端传输</li><li>IP层（网络层） - 寻址和路由</li><li>网络接口层 - 接入网络（分帧、校验）</li></ol></li></ul><h1 id="同步与异步的本质"><a href="#同步与异步的本质" class="headerlink" title="同步与异步的本质"></a>同步与异步的本质</h1><ul><li>同步 - 阻塞式访问 - 需等待 - 第一个请求没有收到响应，就不会请求第二个；等第一个请求接收到响应后，才会请求第二个。</li><li>异步 - 非阻塞式访问 - 无需等待 - 第一个请求没有接收到响应，还会请求第二个，第三个…或者做其他事情；什么时候接收到响应，什么时候处理结果。</li></ul>]]></content>
      
      
      <categories>
          
          <category> html语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html语言 </tag>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPN服务器的搭建</title>
      <link href="/posts/f73aba26/"/>
      <url>/posts/f73aba26/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="加速器的安装"><a href="#加速器的安装" class="headerlink" title="加速器的安装"></a>加速器的安装</h1><h2 id="方法一（推荐）"><a href="#方法一（推荐）" class="headerlink" title="方法一（推荐）"></a>方法一（推荐）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;chiakge&#x2F;Linux-NetSpeed&#x2F;master&#x2F;tcp.sh&quot;</span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">.&#x2F;tcp.sh</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate -O appex.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;0oVicero0&#x2F;serverSpeeder_Install&#x2F;master&#x2F;appex.sh &amp;&amp; bash appex.sh install &#39;2.6.32-642.el6.x86_64&#39;</span><br></pre></td></tr></table></figure><h1 id="SSR的安装"><a href="#SSR的安装" class="headerlink" title="SSR的安装"></a>SSR的安装</h1><h2 id="方法一（推荐）-1"><a href="#方法一（推荐）-1" class="headerlink" title="方法一（推荐）"></a>方法一（推荐）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubi&#x2F;doubi&#x2F;master&#x2F;ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</span><br></pre></td></tr></table></figure><h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubi&#x2F;doubi&#x2F;master&#x2F;ssr.sh</span><br><span class="line">chmod +x ssr.sh </span><br><span class="line">.&#x2F;ssr.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora使用手册</title>
      <link href="/posts/f0886eb5/"/>
      <url>/posts/f0886eb5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="多级标题"><a href="#多级标题" class="headerlink" title="多级标题"></a>多级标题</h1><ul><li>快捷键：<code>ctrl + 1~6</code> （不要使用单独的数字按键，最多只能写到六级标题）</li><li>输入法：<ol><li><code># 一级标题</code> (注意#号后面有一个空格，以下同理)</li><li><code>## 二级标题</code></li><li><code>### 三级标题</code></li><li><code>#### 四级标题</code></li><li><code>##### 五级标题</code></li><li><code>###### 六级标题</code></li></ol></li></ul><h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><ul><li>演示：<u>下划线</u></li><li>快捷键：<code>ctrl + U</code></li><li>输入法：<code>&lt;u&gt;下划线&lt;/u&gt;</code></li></ul><h1 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h1><ul><li>演示：<strong>字体加粗</strong></li><li>快捷键：<code>ctrl + B</code></li><li>输入法：<code>**字体加粗**</code></li></ul><h1 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h1><ul><li>演示：<em>字体倾斜</em></li><li>快捷键：<code>ctrl + i</code> </li><li>输入法：<code>*字体倾斜*</code></li></ul><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><ul><li>演示：<del>删除线</del></li><li>快捷键：<code>shift + alt + 5</code> （使用%5这个按键）</li><li>输入法：<code>~~删除线~~</code></li></ul><h1 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h1><ul><li><p>开启上下标功能：文件 – 偏好设置 – Markdown – Markdown扩展语法（勾选上下标等信息，注意重启）</p></li><li><p>上标：</p><ol><li>演示：a^2^ + b^2^ = c^2^</li><li>输入法：<code>a^2^ + b^2^ = c^2^</code></li></ol></li><li><p>下标：</p><ol><li>演示：H<del>2</del>O</li><li>输入法：<code>H~2~O</code></li></ol></li></ul><h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><ul><li>演示（每行前面都有序号）：<ol><li>有序列表，第一行</li><li>有序列表，第二行</li><li>有序列表，第三行</li><li>有序列表，。。。</li></ol></li><li>快捷键：<code>ctrl + shift + [</code> </li><li>输入法：<code>1.空格</code> <code>100.空格</code>（编号后一定要加空格，行末enter键，序号会在当前序号添加并+1；行末上下键翻动，序号不会添加）</li><li>降级快捷键：<code>tab</code></li><li>升级快捷键：<code>shift + tab</code></li></ul><h1 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h1><ul><li>演示：<ul><li>无序列表，第一行</li><li>无序列表，第二行</li><li>无序列表，第三行</li><li>无序列表，。。。</li></ul></li><li>快捷键：<code>ctrl + shift + ]</code> </li><li>输入法：<code>*空格</code>或<code>-空格</code>（符号后一定要加空格，行末enter键，列表会自动添加一行；行末上下键翻动，列表不会添加）</li><li>降级快捷键：<code>tab</code></li><li>升级快捷键：<code>shift + tab</code></li></ul><p><strong>注意：有序列表和无序列表可交错使用</strong>（有序中有无序，无序中有有序）</p><ol><li>有序列表<ul><li>无序列表<ol><li>有序列表<ol><li>有序列表</li><li>有序列表</li></ol></li><li>有序列表</li></ol></li><li>无序列表</li></ul></li><li>有序列表<ul><li>无序列表<ul><li><input disabled="" type="checkbox"> 任务列表<ol><li>有序列表</li><li>有序列表</li></ol></li><li><input checked="" disabled="" type="checkbox"> 任务列表</li></ul></li><li>无序列表</li></ul></li><li>有序列表<ul><li>无序列表<ul><li>无序列表<ol><li>有序列表</li><li>有序列表</li></ol></li><li>无序列表</li></ul></li><li>无序列表</li><li>无序列表</li></ul></li></ol><h1 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h1><ul><li>演示（可以选择任务）：<ul><li><input disabled="" type="checkbox"> 任务列表，第一行</li><li><input checked="" disabled="" type="checkbox"> 任务列表，第二行</li><li><input checked="" disabled="" type="checkbox"> 任务列表，第三行</li><li><input disabled="" type="checkbox"> 任务列表，。。。</li></ul></li><li>快捷键：无</li><li>输入法：<code>- [ ]</code>（<strong>每一个符号</strong>后都要加一个<strong>空格隔开</strong>，行末enter键，列表会自动添加一行；行末上下键翻动，列表不会添加）</li><li>降级快捷键：<code>tab</code></li><li>升级快捷键：<code>shift + tab</code></li></ul><p><strong>注意</strong>：<strong>任务列表</strong>也可以和<strong>有序列表</strong>和<strong>无序列表</strong>一起<strong>交错使用</strong> （如上面演示）</p><h1 id="表格插入"><a href="#表格插入" class="headerlink" title="表格插入"></a>表格插入</h1><ul><li><p>演示：</p><table><thead><tr><th>学号</th><th>姓名</th><th>年龄</th></tr></thead><tbody><tr><td>1001</td><td>张三</td><td>66</td></tr><tr><td>1002</td><td>李四</td><td>88</td></tr><tr><td>1003</td><td>王五</td><td>99</td></tr></tbody></table></li></ul><ul><li><p>快捷键：<code>ctrl + T</code> </p></li><li><p>输入法：<code>|学号|姓名|年龄|</code>（回车即可创建表格）</p></li><li><p>添加下一行：<code>ctrl+ 回车键</code> </p></li><li><p>调整表格：点击创建的表格，会有很多按钮，自己去尝试即可</p></li></ul><h1 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h1><ul><li><p>演示：<code>python</code>语言是非常简单的；<code>java</code>语言是很难学的！</p></li><li><p>快捷键：<strong>ctrl + shift + `</strong> （<strong>`号</strong>在键盘左上角，和<strong>~号</strong>同键）</p></li><li><p>输入法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;行内代码&#96;</span><br></pre></td></tr></table></figure></li></ul><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ul><li><p>开启代码块功能：文件 – 偏好设置 – Markdown – 勾选显示行号等信息（注意重启）</p></li><li><p>演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'hellow python!'</span>)</span><br><span class="line">func()</span><br></pre></td></tr></table></figure></li><li><p>快捷键：<code>ctrl + shift + K</code>  </p></li><li><p>输入法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​&#96;&#96;&#96;python 或者 ~~~Java（注意：创建代码块后，末端有个语言类型，可填写，三个连续的符号后面可以加任意内容，但是写入正确的语言，会有语法高亮显示）</span><br></pre></td></tr></table></figure></li></ul><h1 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h1><ul><li>演示：<ul><li><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/07/25/PUyVSu7W5iJeqoL.jpg" alt="IuWi8QbHvzjlOPw.jpg"></li></ul></li><li>路径选择：文件 – 偏好设置 – 图像（修改对应的设置“百度”）</li><li>快捷键：<code>ctrl + shift + i</code>  </li><li>输入法：<code>![]()</code></li></ul><div class="note danger">            <p><strong>注意：若要添加网络图片，输入<code>![]()</code> ，[]方括号中填写图片名称，()圆括号中填写图片的URL</strong></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
          <category> 标记语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> 编辑器 </tag>
            
            <tag> Markdown语言 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的安装与使用</title>
      <link href="/posts/6536dfdf/"/>
      <url>/posts/6536dfdf/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="安装Git（Linux系统）"><a href="#安装Git（Linux系统）" class="headerlink" title="安装Git（Linux系统）"></a>安装Git（Linux系统）</h1><ol><li>安装编译环境： yum install gcc patch libffi-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel xz-devel -y</li><li>补充编译环境： yum -y install libcurl-devel</li><li>下载Git，URL： <a href="https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.27.0.tar.xz" target="_blank" rel="noopener">https://mirrors.edge.kernel.org/pub/software/scm/git/git-2.27.0.tar.xz</a></li><li>开始编译： ./configure –prefix=/usr/local/</li><li>构建和安装： make -y &amp;&amp; make install</li></ol><h1 id="Git的用法"><a href="#Git的用法" class="headerlink" title="Git的用法"></a>Git的用法</h1><h2 id="本地操作（Linux系统）"><a href="#本地操作（Linux系统）" class="headerlink" title="本地操作（Linux系统）"></a>本地操作（Linux系统）</h2><ol><li>初始化： git init： 创建一个空的仓库文件： .git隐藏文件（先cd到指定目录）</li><li>添加单个文件到暂存区： git add example01.py（没有任何提示即为成功添加）</li><li>添加目录下所有文件到暂存区： git add .（.代表所有的文件）</li><li>查看暂存区的状态： git status</li><li>提交代码 – git commit -m ‘完成了用户添加功能’ （第一次提交或报错，须填写邮箱和昵称）</li><li>添加提交时的邮箱： git config –global user.email “<a href="mailto:test@test.com">test@test.com</a>“</li><li>添加提交时的昵称： git config –global user.name “test”</li><li>查看提交的历史日志： git log（历史提交记录）<ul><li>commit的值： 全局唯一标识符</li></ul></li><li>查看提交的未来版本日志： git reflog</li><li>暂存区文件恢复到工作区（未提交）： git checkout 空格.（.代表所有，可替换为单个文件名）</li><li>回到历史版本（已提交）： git reset –hard 72b937（72b937代表log中 - commit的值 - 至少前6位字符）</li><li>回到最新版本（已提交）： git reset –hard HEAD^</li></ol><h2 id="服务器地址"><a href="#服务器地址" class="headerlink" title="服务器地址"></a>服务器地址</h2><ul><li>国内代码托管平台： 码云gitee / coding</li><li>URL： <a href="https://gitee.com：">https://gitee.com：</a> <a href="https://coding.net" target="_blank" rel="noopener">https://coding.net</a></li></ul><h2 id="服务器到本地（Linux系统）"><a href="#服务器到本地（Linux系统）" class="headerlink" title="服务器到本地（Linux系统）"></a><strong>服务器到本地</strong>（Linux系统）</h2><ol><li>克隆服务器文件到本地： git clone <URL>（下载文件）</li><li>开始拷贝文件： cp /root/code/* ./</li><li>添加暂存区文件： git add .</li><li>检查是否成功添加： git log 或 git reflog</li></ol><h2 id="本地到服务器（Linux系统）"><a href="#本地到服务器（Linux系统）" class="headerlink" title="本地到服务器（Linux系统）"></a>本地到服务器（Linux系统）</h2><ol><li>先从服务器到本地：</li><li>进入服务器文件目录 – cd test20200706</li><li>本地文件同步服到务器： git push（上传文件）</li><li>服务器文件同步到本地： git pull（更新本地文件）</li></ol><h2 id="本地到服务器（windows系统）"><a href="#本地到服务器（windows系统）" class="headerlink" title="本地到服务器（windows系统）"></a><strong>本地到服务器</strong>（windows系统）</h2><ol><li>通过命令git init将目录变为可以管理的git仓库： <code>git init</code> </li><li>服务器文件同步到本地： <code>git pull</code>（更新本地文件，若仓库是新建的，<strong>第一次</strong>上传，可忽略此步）</li><li>把文件提交到暂存区： <code>git add .</code></li><li>将文件提交到仓库，引号内的为描述： <code>git commit -m &#39;说明&#39;</code></li><li>关联到远程库： <code>git remote add &#39;用户名&#39; 远程库地址</code> </li><li>本地文件上传到远程仓库： <code>git push -u 用户名 master</code> （注意：每次push都要先pull，除非不删除历史记录）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置butterfly主题(二)</title>
      <link href="/posts/1a663c96/"/>
      <url>/posts/1a663c96/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="配置butterfly主题"><a href="#配置butterfly主题" class="headerlink" title="配置butterfly主题"></a>配置butterfly主题</h1><div class="note danger">            <ul><li><strong>注意事项：</strong><ol><li>注意原文件的备份，以防手贱，损坏原文件</li><li>所有安装的插件都在博客根目录下的cmd窗口执行</li><li>在配置文件中，每个属性后面都要有一个<code>空格</code>间隔（即冒号后面必须有一个空格）</li><li>安装插件时，电脑尽量不要做其他操作（一直盯着窗口就行，等待时间太长就取消，重新下载）</li></ol></li></ul>          </div><div class="note danger">            <ul><li><strong>自定义主题配置文件：</strong><ul><li>将 <code>E:\Blogs\Blog\themes\butterfly\</code> 目录中的 <code>_config.yml</code> 复制到 <code>E:\Blogs\Blog\source\_data\</code> 目录中，并重命名为 <code>butterfly.yml</code> （注意：_data目录不存在，就新建，原文件方便更新主题版本）</li></ul></li></ul>          </div><h1 id="butterfly主题配置官方教程"><a href="#butterfly主题配置官方教程" class="headerlink" title="butterfly主题配置官方教程"></a>butterfly主题配置官方教程</h1><ul><li>说明：更加全面、详细的教程（<strong>若我的看不懂，则可以去此网站学习</strong>）</li><li>URL： <a href="https://demo.jerryc.me" target="_blank" rel="noopener">butterfly主题</a></li></ul><h1 id="主页大图片"><a href="#主页大图片" class="headerlink" title="主页大图片"></a>主页大图片</h1><ul><li>打开<code>博客根目录/source/_data/butterfly.yml</code>（主题配置文件），搜索<code>default_top_img:</code>，修改URL即可</li></ul><h1 id="头像的修改"><a href="#头像的修改" class="headerlink" title="头像的修改"></a>头像的修改</h1><ul><li>头像目录：<code>博客根目录/themes/butterfly/source/img/</code>（将头像存放在此目录下，自定义头像大小应与原始文件相等）</li><li>打开主题配置文件，搜索<code>avatar:</code>修改<code>img:</code>的URL（使用本地相对路径或网络地址）</li></ul><h1 id="主页的导航栏"><a href="#主页的导航栏" class="headerlink" title="主页的导航栏"></a>主页的导航栏</h1><ul><li><p>配置文件原始状态（主题配置文件顶部）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br><span class="line">  <span class="string">List||fa</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Music</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Movie</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-film</span></span><br></pre></td></tr></table></figure></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">档案:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">清单||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Music</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Movie</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="美化页面展示"><a href="#美化页面展示" class="headerlink" title="美化页面展示"></a>美化页面展示</h1><ol><li><p>修改主题配置文件：搜索 <code>beautify:</code> 定位代码块</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开启美化</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># site/post</span></span><br><span class="line"><span class="comment">#  title-prefix-icon: '\f0c1'</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">'\f0e7'</span> <span class="comment"># 修改标题前图标为闪电</span></span><br><span class="line"><span class="comment">#  title-prefix-icon-color: '#F47466'</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">'#ffb821'</span> <span class="comment"># 图标颜色为黄色</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="侧边栏排版"><a href="#侧边栏排版" class="headerlink" title="侧边栏排版"></a>侧边栏排版</h1><ol><li><p>修改主题配置文件：搜索 <code>aside:</code> 定位到侧边栏代码块，修改 <code>position:</code> 属性（我选择left）</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span> <span class="comment"># left or right</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="标签颜色"><a href="#标签颜色" class="headerlink" title="标签颜色"></a>标签颜色</h1><ol><li><p>修改主题配置文件：搜索 <code>card_tags:</code> 定位到标签代码块，修改 <code>color</code> 属性（开启true）</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">card_tags:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">color:</span> <span class="literal">true</span> <span class="comment"># 标签颜色</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="访客数和总访问量"><a href="#访客数和总访问量" class="headerlink" title="访客数和总访问量"></a>访客数和总访问量</h1><ol><li><p>修改主题配置文件：搜索    定位到指定代码块，修改    属性（开启true）</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><div class="note danger">            <p><strong>注意：本地测试时，访客数和总访问量是不会重置的，远程部署到站点才会生效</strong></p>          </div></li></ol><h1 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h1><ol><li><p>修改主题配置文件：搜索 <code>runtimeshow:</code> 定位到运行时间代码块，修改 <code>enable</code> 属性（开启true）</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">2020</span><span class="string">/7/23</span> <span class="number">00</span><span class="string">:00:00</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="简体与繁体"><a href="#简体与繁体" class="headerlink" title="简体与繁体"></a>简体与繁体</h1><ol><li><p>修改主题配置文件：搜索 <code>translate:</code> 定位到代码块，修改默认 <code>default:</code> 属性</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">'繁'</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">'简'</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h1><ol><li><p>修改主题配置文件：搜索 <code>footer_custom_text:</code> 定位到代码块</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer_custom_text:</span> <span class="string">Hellow!</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href="https://wounded-hearts.github.io"</span> <span class="string">target="_blank"&gt;Blog&lt;/a&gt;!</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="博客年份"><a href="#博客年份" class="headerlink" title="博客年份"></a>博客年份</h1><ol><li><p>修改主题配置文件：搜索 <code>since:</code> 定位到代码块</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">since:</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h1><ol><li><p>修改主题配置文件：搜索 <code>related_post:</code> 定位到代码块</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># Number of posts displayed</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期顯示創建日或者更新日since: 2020</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="页面文章数"><a href="#页面文章数" class="headerlink" title="页面文章数"></a>页面文章数</h1><ol><li><p>修改<strong>博客配置文件</strong>：搜索 <code>index_generator:</code> 定位到代码块</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">8</span> <span class="comment"># 每页的文章数量</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="数字统计"><a href="#数字统计" class="headerlink" title="数字统计"></a>数字统计</h1><ol><li><p>安装数字统计插件： <code>npm install hexo-wordcount --save</code></p></li><li><p>修改主题配置文件：搜索 <code>wordcount:</code> 定位到指定代码块，修改 <code>enable</code> 属性（开启true）</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="主页座右铭"><a href="#主页座右铭" class="headerlink" title="主页座右铭"></a>主页座右铭</h1><ol><li><p>打开主题配置文件，搜索<code>subtitle:</code>（共有两处，仔细查看内容），修改<code>sub:</code>下的内容</p></li><li><p>我们还可以自动获取网络上的好句子，我们只需要将<code>source: false</code>换成下面你想选择的样式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">source:</span> <span class="number">1</span> <span class="comment">#调用博天API https://api.btstu.cn/</span></span><br><span class="line"><span class="attr">source:</span> <span class="number">2</span> <span class="comment">#调用一言API https://hitokoto.cn/</span></span><br><span class="line"><span class="attr">source:</span> <span class="number">3</span> <span class="comment">#调用一句话API http://yijuzhan.com/</span></span><br><span class="line"><span class="attr">source:</span> <span class="number">4</span> <span class="comment">#调用今日诗词API https://www.jinrishici.com/</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h1><ol><li><p>修改主题配置文件：搜索 <code>note:</code> 定位到运行时间代码块，修改 <code>style:</code> 属性</p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span> <span class="comment"># 标签样式</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h1><ol><li><p>创建分类页文件：博客根目录打开cmd窗口，执行<code>hexo new page categories</code></p></li><li><p>打开根目录下的<code>source/categories/index.md</code>这个文件</p></li><li><p>修改文件内容为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的分类页</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-21</span> <span class="number">14</span><span class="string">:55</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"categories"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h1><ol><li><p>创建标签页文件：博客根目录打开cmd窗口，执行<code>hexo new page tags</code></p></li><li><p>打开根目录下的<code>source/tags/index.md</code>这个文件</p></li><li><p>修改文件内容为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的标签页</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-21</span> <span class="number">14</span><span class="string">:55</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"tags"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="创建友情链接页"><a href="#创建友情链接页" class="headerlink" title="创建友情链接页"></a>创建友情链接页</h1><ol><li><p>创建友情链接页文件：博客根目录打开cmd窗口，执行<code>hexo new page link</code></p></li><li><p>打开根目录下的<code>source/link/index.md</code>这个文件</p></li><li><p>修改文件内容为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">我的小伙伴们</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-21</span> <span class="number">14</span><span class="string">:55</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">"link"</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="友情链接的添加"><a href="#友情链接的添加" class="headerlink" title="友情链接的添加"></a>友情链接的添加</h1><ul><li><p>在Hexo博客根目录中的<code>source/_data</code>，创建文件<code>link.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">萍水相逢的人</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">随缘遇到的人</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">wounded-hearts</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://wounded-hearts.github.io/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">我只管去努力，剩下的交给天意！</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="文章置顶、描述、分类"><a href="#文章置顶、描述、分类" class="headerlink" title="文章置顶、描述、分类"></a>文章置顶、描述、分类</h1><ol><li><p>在主题配置文件中设置文章描述，搜索<code>index_post_content:</code>，修改<code>method：1</code>（详情看代码上面的注释）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure></li><li><p>卸载原始插件： <code>npm uninstall hexo-generator-index --save</code></p></li><li><p>安装置顶插件： <code>npm install hexo-generator-index-pin-top --save</code></p></li><li><p>可以在每篇文章顶部插入如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">个人博客的搭建</span> <span class="comment"># 文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2020</span><span class="number">-07</span><span class="number">-21</span> <span class="number">13</span><span class="string">:55:59</span> <span class="comment"># 文章发布时间</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">说明：利用hexo和nodejs搭建个人博客</span> <span class="comment"># 文章介绍、说明、描述</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span> <span class="comment"># 文章是否置顶</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">其他</span> <span class="comment"># 文章分类</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">个人博客</span> <span class="comment"># 文章添加标签</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li><li><p><code>title:</code>标题名称</p></li><li><p><code>data:</code>日期</p></li><li><p><code>description:</code>对本篇文章的描述</p></li><li><p><code>top:</code>置顶</p></li><li><p><code>categories:</code>文章分类</p></li></ol><h1 id="博客代码块"><a href="#博客代码块" class="headerlink" title="博客代码块"></a>博客代码块</h1><ul><li>代码块高亮：主题配置文件中搜索<code>highlight_theme:</code>修改自己喜欢的即可</li><li>代码块复制按钮：主题配置文件中搜索<code>highlight_copy:</code>默认打开，可false关闭</li><li>代码块收缩按钮：主题配置文件中搜索<code>highlight_shrink:</code>默认关闭（详情看代码注释）</li><li>代码块自动换行：主题配置文件中搜索<code>code_word_wrap:</code>默认关闭</li></ul><h1 id="社交图标链接"><a href="#社交图标链接" class="headerlink" title="社交图标链接"></a>社交图标链接</h1><ul><li>配置文件中搜索<code>social:</code>修改对应的URL即可</li></ul><h1 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h1><ul><li><p>配置文件中搜索<code>reward:</code> </p></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://i.loli.net/2020/08/05/ptZkvgcoeabxSm8.png</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://i.loli.net/2020/08/05/b1DdQvapRXl6uMA.png</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h1><ul><li><p>配置文件中搜索<code>default_cover:</code>修改对应的URL即可</p></li><li><p>排版方式：配置文件搜索 <code>cover:</code> ，修改 <code>position:</code> 的属性，内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># the position of cover in home page (封面顯示的位置)</span></span><br><span class="line">  <span class="comment"># left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h1><ol><li><p>注册第三方评论系统：<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud官网</a> （可选择其他的，本人只用了它）</p></li><li><p>搜索“hexo搭建博客添加valine评论系统”等字样，查看具体详情</p></li><li><p>主题配置文件中搜索<code>use:</code>并添加<code>Valine</code>内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">use:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Valine</span></span><br><span class="line"><span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line"><span class="attr">load_begin:</span> <span class="literal">false</span> <span class="comment"># The second comment system will auto load when visiting the website</span></span><br><span class="line"><span class="attr">count:</span> <span class="literal">false</span> <span class="comment"># Dispaly comment count in top_img</span></span><br></pre></td></tr></table></figure></li><li><p>主题配置文件中搜索<code>valine:</code>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">appId:</span> <span class="comment"># 添加leancloud网站中的对应id</span></span><br><span class="line">  <span class="attr">appKey:</span> <span class="comment"># 添加leancloud网站中的对应可以 </span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> </span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> </span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span> <span class="comment"># 语言为中文</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">说些什么吧</span> <span class="comment"># 在评论区添加默认提示内容</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> </span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># 添加leancloud网站中的对应REST API 服务器地址 </span></span><br><span class="line">  <span class="attr">bg:</span> </span><br><span class="line">  <span class="attr">emojiCDN:</span> </span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">requiredFields:</span> <span class="string">nick,mail</span></span><br></pre></td></tr></table></figure></li><li><p>解决未出现评论面板的问题</p><ul><li>主题配置文件共修改2处配置</li><li>对照原始的主题配置文件，看是否自己不小心改错或删错内容了（注意冒号后面的空格）</li></ul></li></ol><h1 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h1><ul><li><p>配置文件中搜索<code>error_404:</code>修改对应的URL和属性</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">'Page Not Found'</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="音乐界面"><a href="#音乐界面" class="headerlink" title="音乐界面"></a>音乐界面</h1><ol><li><p>安装音乐插件hexo-tag-aplayer：<code>npm install --save hexo-tag-aplayer</code></p></li><li><p><strong>博客配置文件</strong>最底部，添加如下代码：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>创建音乐界面：<code>hexo new page music</code> （自动创建一个文件夹及音乐配置文件）</p></li><li><p>修改音乐配置文件：打开音乐配置文件，修改meting后的数字（id），还可修改公司名，可以是tencent、netease或是其他公司（本人使用网易云音乐，<strong>只修改id即可</strong>），<code>976703418</code>为我的歌单id，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;976703418&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#FF4081&quot; &quot;mode:circulation&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure></li><li><p>音乐id获取：浏览器打开网易云歌单（登陆），点击<code>生成外链播放器</code>，即可查看列表的id</p></li></ol><h1 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h1><ol><li><p>作用：解决了博客链接过长的问题</p></li><li><p>安装链接插件：<code>npm install hexo-abbrlink --save</code></p></li><li><p>修改<strong>博客配置文件</strong>：搜索<code>permalink:</code>，添加内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment">#support crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment">#support dec(default) and hex</span></span><br></pre></td></tr></table></figure></li><li><p>执行<code>hexo clean</code> 和 <code>hexo g</code>，不然会报错</p></li></ol><h1 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h1><ol><li><p>安装搜索插件：<code>npm install hexo-generator-search --save</code></p></li><li><p>修改主题配置文件：搜索<code>local_search:</code>，修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">"We didn't find any results for the search: $&#123;query&#125;"</span> <span class="comment"># if there are no result</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h1><ul><li><p>修改主题配置文件：搜索<code>click_heart:</code>，修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mouse click effects: fireworks (鼠標點擊效果: 煙火特效)</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span> <span class="comment"># -1 or 9999</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line"><span class="attr">click_heart:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mouse click effects: words (鼠標點擊效果: 文字)</span></span><br><span class="line"><span class="attr">ClickShowText:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">I</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">LOVE</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">YOU</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="背景特效"><a href="#背景特效" class="headerlink" title="背景特效"></a>背景特效</h1><ul><li><p>修改主题配置文件：搜索<code>canvas_ribbon_piao:</code>，修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon_piao:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 电脑端</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># 手机端</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="打字特效"><a href="#打字特效" class="headerlink" title="打字特效"></a>打字特效</h1><ul><li><p>修改主题配置文件：搜索<code>activate_power_mode:</code>，修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span> <span class="comment"># open particle animation (冒光特效)</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span> <span class="comment">#  open shake (抖動特效)</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo常用命令</title>
      <link href="/posts/33f59116/"/>
      <url>/posts/33f59116/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h1><ol><li>初始化： <code>hexo init</code> <ul><li>作用：初始化站点（博客），生成一个简单网站所需的各种文件</li></ul></li><li>启动服务： <code>hexo s</code> （s代表server，可写全名）<ul><li>作用：以调试模式，启动hexo服务（在本地运行博客）</li></ul></li><li>清除缓存： <code>hexo clean</code> <ul><li>作用：清除缓存（将public目录删除）</li></ul></li><li>编译文件： <code>hexo g</code> （g代表generate）<ul><li>作用：将新增、修改、更新的文件（博客），生成（编译）网站静态文件，默认都在 <code>public</code> 目录下（目录自动创建），为远程部署做铺垫</li></ul></li><li>远端部署： <code>hexo d</code>（d代表deploy，需装插件）<ul><li>作用：部署站点，在本地生成 <code>.deploy_git</code> 文件夹，并将编译后的文件上传至 <code>GitHub</code> 或 <code>Gitee</code> 等站点</li></ul></li><li>新建页面： <code>hexo new page path_name</code> </li></ol>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客的搭建(一)</title>
      <link href="/posts/8bf38f6f/"/>
      <url>/posts/8bf38f6f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="windows系统下安装nodejs和hexo"><a href="#windows系统下安装nodejs和hexo" class="headerlink" title="windows系统下安装nodejs和hexo"></a>windows系统下安装nodejs和hexo</h1><ol><li>安装Git（配置环境变量）</li><li>安装nodejs：<a href="https://nodejs.org" target="_blank" rel="noopener">nodejs官网</a></li><li>创建目录 ： E:\Blogs\Global（可自定义目录）</li><li>打开Git Bash</li><li>设置全局变量：<code>npm config set profix &quot;E:\Blogs\Global&quot;</code> </li><li>设置缓存器：<code>npm config set cache &quot;E:\Blogs\Global&quot;</code></li><li>安装hexo ： <code>npm install -g hexo</code>（需等待一分钟）</li><li>检查hexo ： <code>hexo -v</code><ul><li>若出现版本信息，则表示安装成功，直接下一步即可</li><li>若不出现版本信息，需配置环境变量，再继续检查，环境变量路径为：E:\Blogs\Global（重启Git Bash）</li></ul></li><li>创建博客储存目录：E:/Blogs/Blog（此目录为博客根目录）</li><li>初始化hexo ：<code>hexo init</code>（必须在E:/Blogs/Blog目录下运行cmd窗口）</li><li>本地运行hexo ：<code>hexo s</code>（s代表server）</li><li>本地访问 ： <code>http://localhost:4000/</code>（默认地址，以运行窗口的地址为准）</li></ol><h1 id="博客的基本配置"><a href="#博客的基本配置" class="headerlink" title="博客的基本配置"></a>博客的基本配置</h1><ul><li><p>在博客根目录，打开博客配置文件<code>_config.yml</code>，修改内容如下（文件顶部）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">乐天的博客</span> <span class="comment"># 博客标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">'wounded-hearts'</span>  <span class="comment"># 博客的副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">''</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">wounded-hearts</span> <span class="comment"># 作者昵称</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 语言中文</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://wounded-hearts.github.io</span> <span class="comment"># 博客链接</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="安装个人主题"><a href="#安装个人主题" class="headerlink" title="安装个人主题"></a>安装个人主题</h1><ol><li>本人使用的主题：<a href="https://github.com/jerryc127/hexo-theme-butterfly" target="_blank" rel="noopener">butterfly主题</a></li><li>其他主题：<ul><li><a href="https://hexo.io/themes" target="_blank" rel="noopener">主题官网</a> </li><li><a href="https://theme-next.js.org/" target="_blank" rel="noopener">Next主题</a>    </li><li><a href="https://www.yunyoujun.cn/" target="_blank" rel="noopener">Yun主题</a></li></ul></li><li>下载butterfly主题：<code>git clone https://github.com/jerryc127/hexo-theme-butterfly themes/butterfly</code></li><li>配置默认主题：<ul><li>配置文件：<code>E:\Blogs\Blog\</code>目录下的<code>_config.yml</code>文件</li><li>修改内容：搜索<code>theme:</code>将默认主题<code>landspace</code>替换为新下载的主题<code>butterfly</code></li><li>安装主题插件（2个）：<code>npm install hexo-renderer-pug hexo-renderer-stylus</code>（必须在E:/Blogs/Blog目录下运行cmd窗口）</li></ul></li><li>本地启动默认主题：<code>hexo s</code>（此默认主题即为butterfly主题）</li></ol><h1 id="配置butterfly主题"><a href="#配置butterfly主题" class="headerlink" title="配置butterfly主题"></a>配置butterfly主题</h1><ol><li><p><strong>注意事项：</strong></p><ul><li><strong>注意原文件的备份，以防手贱，损坏原文件</strong></li><li><strong>所有安装的插件都在博客根目录下的cmd窗口执行</strong></li><li><strong>在配置文件中，每个属性后面都要有一个<code>空格</code>间隔（即冒号后面必须有一个空格）</strong></li><li><strong>安装插件时，电脑尽量不要做其他操作（一直盯着窗口就行，等待时间太长就取消，重新下载）</strong></li></ul></li><li><p><strong>自定义配置文件：</strong></p><ul><li>将 <code>E:\Blogs\Blog\themes\butterfly\</code> 目录中的 <code>_config.yml</code> 复制到 <code>E:\Blogs\Blog\source\_data\</code> 目录中，并重命名为 <code>butterfly.yml</code> （注意：_data目录不存在，就新建，原文件方便更新主题版本）</li></ul></li></ol><h2 id="主页大图片的修改"><a href="#主页大图片的修改" class="headerlink" title="主页大图片的修改"></a>主页大图片的修改</h2><ul><li>打开<code>博客根目录/source/_data/butterfly.yml</code>（主题配置文件），搜索<code>default_top_img:</code>，修改URL即可</li></ul><h2 id="头像的修改"><a href="#头像的修改" class="headerlink" title="头像的修改"></a>头像的修改</h2><ul><li>头像目录：<code>博客根目录/themes/butterfly/source/img/</code>（将头像存放在此目录下，自定义头像大小应与原始文件相等）</li><li>打开主题配置文件，搜索<code>avatar:</code>修改<code>img:</code>的URL（使用本地相对路径或网络地址）</li></ul><h2 id="主页的导航栏的修改"><a href="#主页的导航栏的修改" class="headerlink" title="主页的导航栏的修改"></a>主页的导航栏的修改</h2><ul><li><p>配置文件原始状态（主题配置文件顶部）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-heart</span></span><br><span class="line">  <span class="string">List||fa</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Music</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Movie</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-film</span></span><br></pre></td></tr></table></figure></li><li><p>修改内容如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">档案:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">清单||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Music</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Movie</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="主页座右铭的修改"><a href="#主页座右铭的修改" class="headerlink" title="主页座右铭的修改"></a>主页座右铭的修改</h2><ul><li><p>打开主题配置文件，搜索<code>subtitle:</code>（共有两处，仔细查看内容），修改<code>sub:</code>下的内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用搏天api的隨機語錄（簡體） https://api.btstu.cn/</span></span><br><span class="line">  <span class="comment"># source: 2  調用一言網的一句話（簡體） https://hitokoto.cn/</span></span><br><span class="line">  <span class="comment"># source: 3  調用一句網（簡體） http://yijuzhan.com/</span></span><br><span class="line">  <span class="comment"># source: 4  調用今日詩詞（簡體） https://www.jinrishici.com/</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果有英文逗號' , ',請使用轉義字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文雙引號' " ',請使用轉義字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span></span><br><span class="line">  <span class="comment"># 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">我只管去努力，剩下的交给天意！</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">I</span> <span class="string">just</span> <span class="string">work</span> <span class="string">hard,</span> <span class="string">the</span> <span class="string">rest</span> <span class="string">to</span> <span class="string">God!</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>我们还可以自动获取网络上的好句子，我们只需要将<code>source: false</code>换成下面你想选择的样式（我自己的是false）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">source:</span> <span class="number">1</span> <span class="comment">#调用博天API https://api.btstu.cn/</span></span><br><span class="line"><span class="attr">source:</span> <span class="number">2</span> <span class="comment">#调用一言API https://hitokoto.cn/</span></span><br><span class="line"><span class="attr">source:</span> <span class="number">3</span> <span class="comment">#调用一句话API http://yijuzhan.com/</span></span><br><span class="line"><span class="attr">source:</span> <span class="number">4</span> <span class="comment">#调用今日诗词API https://www.jinrishici.com/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="butterfly主题配置官方教程"><a href="#butterfly主题配置官方教程" class="headerlink" title="butterfly主题配置官方教程"></a>butterfly主题配置官方教程</h2><ul><li>说明：更加全面、详细的教程（<strong>若我的看不懂，则可以去此网站学习</strong>）</li><li>URL： <a href="https://demo.jerryc.me" target="_blank" rel="noopener">butterfly主题</a></li></ul><h1 id="部署到github网站"><a href="#部署到github网站" class="headerlink" title="部署到github网站"></a>部署到github网站</h1><ol><li><p>注册github： <a href="https://github.com" target="_blank" rel="noopener">github官网</a></p></li><li><p>准备工作：创建github账号，新建一个新的仓库（其中仓库名字必须是<code>xxx.github.io</code><strong>xxx</strong>是你的Github名字）</p></li><li><p>修改<strong>博客配置</strong>文件（最底部）：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/wounded-hearts/wounded-hearts.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p><code>github:</code> 添加自己github的仓库地址：gitee的仓库地址在 <code>Code</code> 处（最重要的一步）</p></li><li><p>安装部署插件： <code>npm install hexo-deployer-git --save</code></p></li><li><p>在博客根目录执行以下命令（按顺序）：</p><ul><li>清理垃圾： <code>hexo clean</code> </li><li>生成网站静态文件： <code>hexo g</code> </li><li>推送到远端： <code>hexo d</code> </li></ul></li><li><p>互联网访问博客地址： <code>https://wounded-hearts.github.io</code></p></li></ol><h1 id="部署到gitee网站"><a href="#部署到gitee网站" class="headerlink" title="部署到gitee网站"></a>部署到gitee网站</h1><ol><li><p>注册码云：<a href="https://gitee.com" target="_blank" rel="noopener">giree官网</a></p></li><li><p>新建仓库并开启 <code>Gitee Pages 服务</code> （仓库名与网站用户名一致，服务怎么开启 <code>百度</code>）</p></li><li><p>修改<strong>博客配置</strong>文件（个人建议推送时单个推送，先注释一个）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line"><span class="comment">#    github: https://github.com/wounded-hearts/wounded-hearts.github.io.git</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://gitee.com/wlet/wlet.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li><li><p>gitee的仓库地址在 <code>克隆/下载</code> 处</p></li><li><p>在博客根目录执行以下命令：</p><ul><li>清理垃圾： <code>hexo clean</code> </li><li>生成网站静态文件： <code>hexo g</code> </li><li>推送到远端： <code>hexo d</code> </li></ul></li><li><p>手动更新 <code>Gitee Pages 服务</code> （gitee免费版必须手动更新，专业付费版自动更新）</p></li><li><p>互联网访问博客地址： <code>https://wlet.gitee.io</code> </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
